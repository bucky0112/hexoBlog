{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/README.md","path":"lib/algolia-instant-search/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css.map","path":"lib/algolia-instant-search/instantsearch.min.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/LICENSE","path":"lib/algolia-instant-search/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c6a865372c8465854987dc88f448a75c2d8e5859","modified":1598584416718},{"_id":"source/googled36834cd638cf6e1.html","hash":"4478e32b80ec712af7fa19c64f073293472b6a35","modified":1587050347621},{"_id":"source/robots.txt","hash":"b28f5fa43592ea2d242dd62309d4c2d1002c7287","modified":1586574758304},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1586188437804},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1586188437805},{"_id":"themes/next/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1586190165093},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1586188437810},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1586188437805},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1586188437811},{"_id":"themes/next/_config.yml","hash":"285d243b88c7f5be68041f4dd61e97f25b743af5","modified":1587052040580},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1586188437813},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1586188437822},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1586188437811},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1586188437811},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1586188437810},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1586188437861},{"_id":"source/_posts/.DS_Store","hash":"bc478ffc0a9e00ba35c98441f0716780d44d53ea","modified":1591195471072},{"_id":"source/_posts/CodewarChallenge.md","hash":"f0b58dabba317e9929a0454d315ef0b0a5583a54","modified":1588931063263},{"_id":"source/_posts/JSnotice-javascript-and-undefined.md","hash":"10057efaadc633f907ebf3399be6e539fc80ff0a","modified":1589212178651},{"_id":"source/_posts/JSnotice：語法解析器、詞彙環境、執行環境.md","hash":"a7939c0025cf0008dacc97a0b89647a155a6e65c","modified":1586791873000},{"_id":"source/_posts/JSreview-loop.md","hash":"237fd8e9f8c7b7d95c67d402feafb2971e974a5e","modified":1589598639473},{"_id":"source/_posts/JS基礎回顧-function.md","hash":"6215757c1a32a39ee8b464aee52dd00fb4cb1677","modified":1587397268152},{"_id":"source/_posts/JSnotice：值配對與物件.md","hash":"4e34bc0df1e68c69e6105c5150a91fcb5a425175","modified":1586791831362},{"_id":"source/_posts/es6-let-and-const.md","hash":"7d775e537291b1d045f1b6a93a903b6f64ffc01c","modified":1592045920591},{"_id":"source/_posts/JS基礎回顧-物件與陣列.md","hash":"98a2c4ddd2aff611b7fddaa2d5cec4d5b6054a98","modified":1591195044768},{"_id":"source/_posts/JS基礎回顧-變數與資料型態.md","hash":"d0c73aeab9c32403d9579e6bfd75b8a207b8757a","modified":1586542600584},{"_id":"source/_posts/Think first, code later.md","hash":"358f8fb7b4ce1ef2e16655c0e0c999d77f70e6d3","modified":1587227199892},{"_id":"source/_posts/execution-context-code-execution.md","hash":"dc0328aa693c39a79b7df103711c7a89734b7219","modified":1589900698526},{"_id":"source/_posts/js-review-dom.md","hash":"ac7dbdff58e72a84b2d77dae08067c67bae464cc","modified":1590304145903},{"_id":"source/_posts/vue-components.md","hash":"c131909d054f2059df2d71f4e6d120e2979d424c","modified":1591195065129},{"_id":"source/_posts/vue-cli.md","hash":"bb4c5a9732257dacec300210ecf9a584733d487a","modified":1590507278530},{"_id":"source/_posts/makeTodolistByVue.md","hash":"390eeb60e3526ec7188ff9a03d9f6b950990f03e","modified":1589621188345},{"_id":"source/_posts/全域環境與全域物件.md","hash":"1312074dafc5c1f1af6fb1ef36741d11423fd3f8","modified":1587030015000},{"_id":"source/_posts/使用Hexo在GitHub部署Blog.md","hash":"af6a6e7395e546a56ef9db20e164abd4ab1cc211","modified":1586161931815},{"_id":"source/_posts/基礎Vue-js-2.md","hash":"46806ccabfc1e4b40ceaa5ab57202d4be17896a9","modified":1585575394918},{"_id":"source/_posts/基礎 Vue.js-1.md","hash":"78bfe8e3df1d20ac728dca05dade59199f0eae85","modified":1588317529127},{"_id":"source/_posts/全域變數與區域變數.md","hash":"5e28c62808779412540860870a50e2ad60882fcd","modified":1588151737327},{"_id":"source/_posts/執行環境-創造與提升.md","hash":"160bc62ea4f935b4ce5ad68881b94c12de669132","modified":1588151170238},{"_id":"source/_posts/物件結構.md","hash":"7e360301858bc403b13ed0ee394d81c8bbe1038a","modified":1591195481123},{"_id":"source/_posts/基礎Vue-js-3.md","hash":"9bdc1a637f9f9ef149c59f3ac8b1cd452121cb56","modified":1585580126046},{"_id":"source/_drafts/vue-advanced-use-directives.md","hash":"0bda7167c861f31c3f02d19c5f3d55c5cf55a297","modified":1589987140177},{"_id":"source/categories/index.md","hash":"ecab068573b4ecd908bc39c7a76c76969adf3a15","modified":1586143869820},{"_id":"source/_posts/練習如何解題.md","hash":"74b074e7e5b91595c04f3593303dbe115a352a18","modified":1587395648367},{"_id":"source/link/index.md","hash":"25b6ca8e9565e772b91e6afe3575df7479ca5783","modified":1586144763078},{"_id":"source/tags/index.md","hash":"4817082ed9e8b00eae1e10f26ebd681bb124855b","modified":1586143881111},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1586188437808},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1586188437806},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1586188437808},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1586188437806},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1586188437809},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1586188437809},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1586188437809},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1586188437809},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1586188437810},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1586188437810},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1586188437810},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1586188437813},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1586188437815},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1586188437815},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1586188437816},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1586188437814},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1586188437816},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1586188437815},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1586188437817},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1586188437817},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1586188437823},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1586188437823},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1586188437823},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1586188437824},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1586188437824},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1586188437825},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1586188437825},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1586188437826},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1586188437825},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1586188437823},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1586188437826},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1586188437824},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1586188437828},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1586188437827},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1586188437828},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1586188437827},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1586188437827},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1586188437829},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1586188437829},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1586188437830},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1586188437830},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1586188437831},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1586188437829},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1586188437860},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1586188437860},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1586188437861},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1586188437859},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1586188437860},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1586188437861},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1586188437870},{"_id":"themes/next/source/.DS_Store","hash":"38935a63afc005352272db433e4fc3279d3f6ce7","modified":1586190178974},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1586188437807},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1586188437807},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1586188437807},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1586188437808},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1586188437819},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1586188437818},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1586188437818},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1586188437818},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1586188437820},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1586188437820},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1586188437819},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1586188437820},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1586188437820},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1586188437821},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1586188437822},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1586188437822},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1586188437822},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1586188437832},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1586188437834},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1586188437838},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1586188437833},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1586188437839},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1586188437843},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1586188437844},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1586188437844},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1586188437845},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1586188437847},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1586188437847},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1586188437849},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1586188437831},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1586188437833},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1586188437853},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1586188437854},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1586188437855},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1586188437862},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1586188437867},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1586188437867},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1586188437867},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1586188437868},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1586188437868},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1586188437868},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1586188437869},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1586188437869},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1586188437869},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1586188437871},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1586188437871},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1586188437871},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1586188437871},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1586188437872},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1586188437872},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1586188437872},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1586188437872},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1586188437872},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1586188437873},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1586188437954},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1586188437935},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1586188437880},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1586190883039},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586188437954},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586188437955},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1586188437956},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1586188437957},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1586188437959},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1586188437960},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1586188437958},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586188437961},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1586188437962},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1586188437959},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1586188437958},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1586188437963},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1586188437963},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586188437961},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1586188437964},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1586188437964},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1586188437966},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1586188437964},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1586188437966},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1586188437834},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"ae3a77d0df4ba0ab0d075014eb0cb04c981aae65","modified":1587051115732},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1586188437835},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1586188437836},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1586188437837},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1586188437838},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1586188437838},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1586188437836},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1586188437839},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1586188437840},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1586188437840},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1586188437840},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1586188437841},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1586188437841},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1586188437841},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1586188437842},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1586188437842},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1586188437843},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1586188437845},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1586188437845},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1586188437846},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1586188437846},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1586188437846},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1586188437848},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1586188437848},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1586188437849},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1586188437849},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1586188437850},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1586188437850},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1586188437850},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1586188437851},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1586188437851},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1586188437852},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1586188437852},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1586188437852},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1586188437853},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1586188437853},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1586188437854},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1586188437855},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1586188437855},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1586188437856},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1586188437857},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1586188437857},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1586188437857},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1586188437858},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1586188437858},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1586188437859},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1586188437863},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1586188437859},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1586188437863},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1586188437863},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1586188437864},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1586188437865},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1586188437865},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1586188437865},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1586188437866},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1586188437866},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1586188437866},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1586188437866},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1586188437949},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1586188437948},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1586188437952},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1586188437952},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1586188437953},{"_id":"themes/next/source/lib/algolia-instant-search/README.md","hash":"73c4092f53b27d322f89dc33ba26f826e10bd3fc","modified":1586270319282},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"6e01a39d7f6d58a0895957361b0a942543c18332","modified":1586270319283},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css.map","hash":"d055d06395af598682873d1b458166dc6f513072","modified":1586270319283},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"c064a6369e31f846061fec42fd20c94cd34baebf","modified":1586272861333},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1586272861334},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"cdbc258b29270771e1846aeacc67198d0aed5447","modified":1586272861334},{"_id":"themes/next/source/lib/algolia-instant-search/.instantsearch.min.js.map.icloud","hash":"d726e08225e6cc56e5885be7af69cfc7e8b55917","modified":1586270319000},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"af77252405d1ae97b1d4139b53f2684b64d87596","modified":1586272861334},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1586272861334},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1586188437965},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"4482a245ac2c867102490c71d0fcbb502be0e3e5","modified":1586272861334},{"_id":"themes/next/source/lib/algolia-instant-search/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1586270319282},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1586188437965},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1586272861335},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"0948420e18b2cec89c40093da5c7c14fa4c9bc5d","modified":1586272861334},{"_id":"themes/next/source/lib/pjax/README.md","hash":"6e83f73f2c43fc4f85eda51daed5c321ec55c83c","modified":1586272861335},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1586272861336},{"_id":"themes/next/source/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1586272861337},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1586272861344},{"_id":"themes/next/source/lib/pjax/package.json","hash":"1c0055fc51eee37e39ca9d5b6ea5078677b20201","modified":1586272861343},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1586272861344},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1586188437974},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1586188437975},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1586188437897},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1586188437904},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1586188437905},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1586188437912},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1586188437913},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1586188437913},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1586188437916},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1586188437917},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1586188437917},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1586188437918},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1586188437933},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1586188437937},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1586188437938},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1586188437938},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1586188437939},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"fa74108a6c853b2659f5e19f120bc1c5706ffeb6","modified":1587048512977},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1586188437940},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1586188437940},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1586188437941},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1586188437941},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1586188437942},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1586188437942},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1586188437943},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1586188437944},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1586188437944},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1586188437944},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1586188437945},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1586188437946},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1586188437881},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1586188437884},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1586188437883},{"_id":"themes/next/source/lib/algolia-instant-search/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1586270319272},{"_id":"themes/next/source/lib/algolia-instant-search/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1586270311475},{"_id":"themes/next/source/lib/algolia-instant-search/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1586270319282},{"_id":"themes/next/source/lib/algolia-instant-search/.git/packed-refs","hash":"dc5939fb60e7abf14be4a48afc6f33d2ef552182","modified":1586270319268},{"_id":"themes/next/source/lib/algolia-instant-search/.git/config","hash":"ae057b7f33eac7ddf41bed1c7a3323eb69ec0b7c","modified":1586270319274},{"_id":"themes/next/source/lib/algolia-instant-search/.git/index","hash":"77e58ab1349feb75832132ece8b740c2af310c4b","modified":1586270319313},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1586188437969},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1586188437945},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1586272861324},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"2eed2a5f446fc52569198cc67e053099b03b6b22","modified":1586272861353},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1586272847077},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1586272861335},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1586272861336},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"b668d1d9a28843557320d14b8660f46e0eeb76d7","modified":1586272861326},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"edbdf218d3ec5dca511b8e29e88aebcf725d68ad","modified":1586272861320},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1586272861336},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1586272861337},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1586272861337},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1586272861336},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1586272861338},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1586272861338},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1586272861338},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1586272861339},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1586272861339},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1586272861336},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1586272861341},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1586272861341},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1586272861342},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1586272861352},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1586272861353},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1586272861342},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1586188437969},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1586188437970},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1586188437885},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1586188437885},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1586188437886},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1586188437886},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1586188437887},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1586188437886},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1586188437892},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1586188437892},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1586188437892},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1586188437893},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1586188437893},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1586188437894},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1586188437894},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1586188437895},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1586188437894},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1586188437895},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1586188437897},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1586188437896},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1586188437896},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1586188437898},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1586188437900},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1586188437899},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1586188437898},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1586188437900},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1586188437902},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1586188437901},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1586188437903},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1586188437902},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1586188437903},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1586188437902},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1586188437904},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1586188437906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1586188437908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1586188437905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1586188437908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1586188437907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1586188437909},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1586188437910},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1586188437910},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1586188437911},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1586188437912},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1586188437913},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1586188437914},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1586188437915},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1586188437916},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1586188437918},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1586188437919},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1586188437929},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1586188437931},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1586188437932},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1586188437932},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1586188437933},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1586270311479},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1586270311477},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1586270311477},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1586270311475},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1586270311476},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1586270311480},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1586270311480},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1586270311481},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1586270311478},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1586270311476},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1586270311479},{"_id":"themes/next/source/lib/algolia-instant-search/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1586270311481},{"_id":"themes/next/source/lib/algolia-instant-search/.git/logs/HEAD","hash":"b8b41381c48951f4ad88dedce3d474662b1a7983","modified":1586270319273},{"_id":"themes/next/source/lib/algolia-instant-search/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1586270311474},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1586272847079},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1586272847080},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1586188437968},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1586272847078},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1586272847083},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1586272847079},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1586272847083},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1586272847082},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1586272847081},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1586272847081},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1586272847082},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1586272847084},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"8f2241dd55a9f77d8cea0f877a7d1fba0fba7892","modified":1586272861325},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1586272847079},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1586272847077},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1586272861338},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1586272861337},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1586272861338},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1586272861340},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1586272861340},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1586272861340},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1586272861342},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1586272861340},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1586272861342},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1586272861341},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1586272861343},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1586272861345},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1586272861345},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1586272861343},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1586272861346},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1586272861346},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1586272861346},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1586272861347},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1586272861347},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1586272861347},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1586272861350},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1586272861349},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1586272861350},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1586272861351},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1586272861343},{"_id":"themes/next/source/lib/algolia-instant-search/.git/refs/heads/master","hash":"cb263068622d3a28d619a3576c4efbed8e9e546d","modified":1586270319273},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/0d/49463cf444a6411519b6d7b5bb65fa7e96c4dc","hash":"8baa9ed7c87fbf1a9fdeb378c656471cb98c48e5","modified":1586270313027},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/26/041255661ec27600579e1ba00c5898aa6f8b48","hash":"d6013a8e8a369061c0ef69f48f89ec61320f0ba7","modified":1586270319250},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/59/0f6f985f6018c397b2499bb49e599b7109ec06","hash":"650b4b24a81daa3b02646b7ffd5ccdac11ab6be8","modified":1586270318288},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/54/7b348ba5c8725ea590087860a352c8ff41cb98","hash":"79281e0d03b3acdbce61914bbfef33ae0c29be6d","modified":1586270313021},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/2b/a3834eb798ac34ab72ed5fdf7a56d175fee554","hash":"e8edf92b35519a3ec9333c7b54243eca7edc37f2","modified":1586270318287},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1586270313024},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/6d/c836cd5e780134d73d56944a2e7039bacc7cb3","hash":"5a6fc74f4eff0b3bf6429b28df2a5d721c92933a","modified":1586270318285},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/6d/b4c7bd4b80f34ae7165de7d91291759569d572","hash":"f04a0f8b9dde5d5c36f470634ca8f958a3b6aa15","modified":1586270319249},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/72/77a0daac0e35928cb7e7905e28b7d490f18fea","hash":"fd53bdb026530aa2254de2dbc21f91c6ac4ca66a","modified":1586270313210},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/74/1e8eedaad6125d0feee4afcc124ba0bffc48c5","hash":"0963b162d9de3c8df0d966c07299efd39389da5d","modified":1586270313028},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/92/1eb7be3c529d19b6c92ce67e4099e8f7d6adf3","hash":"023bef5405aee54ae6b00e1e02eb6984b691ccbf","modified":1586270319247},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/a4/0c9f2635389a60948f0f2235f037277f8acff6","hash":"ec4074d54b477aea533dab38384dd9a52fa58854","modified":1586270313026},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/be/20adccf394f75e31e8f8b5fdf22728a1770602","hash":"665067f8dc3adcb99fa753845e7be4440eed9fc3","modified":1586270313014},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/b2/88437db05849d7556c1ca77f48e1e467c49837","hash":"08035d18e8af952a4da5c5b726fa291fcf5664db","modified":1586270319252},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/c7/fbb078f1639009ff35512e07a344065d222948","hash":"123afd34f26169b38c32f4b035562726036fd960","modified":1586270313016},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/c9/af6112eed1dab47eba55651562f768bfbc861d","hash":"a3ce783cca46bdcba0a1eda2d034c77221e07e06","modified":1586270313017},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/da/0b2b5f2ab8f750444499f17e4cbf6074aef7f0","hash":"b343b66897d47a95d9a4363eaab8ff61a1c8a683","modified":1586270313018},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/eb/c17e345ba26077f759ce9f3af0868234200765","hash":"7e458a3ddef5d0a43916751453e8d404ab22cc2a","modified":1586270319253},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/f5/e09255981809338b668b56510e360595fc12fa","hash":"c385e27cf914367d1fde121a2c920b93832cf2ed","modified":1586270319245},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/08/777d50ffb9e517f20d2cbf2ea19130862fb501","hash":"110fcf7830673d2a7715f8347834f7393597ecd0","modified":1586270319246},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1586270313022},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1586270313023},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"3c8414e83b32974579667c4c79e04af7d699edde","modified":1586272861325},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-6676209366959508b7039bccc564fff2659503c6.idx","hash":"eec4e30af70e4d372ab4327a48d2d5b40ae113b9","modified":1586272861307},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1586272861348},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1586272861349},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1586272861348},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1586272861349},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1586272861351},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1586272861352},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1586272861352},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1586272861351},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1586272861352},{"_id":"themes/next/source/lib/algolia-instant-search/.git/logs/refs/heads/master","hash":"b8b41381c48951f4ad88dedce3d474662b1a7983","modified":1586270319273},{"_id":"themes/next/source/lib/algolia-instant-search/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1586270319271},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/2b/d5d590d07a161741477ace2339eb37c07cc40c","hash":"10a1f52729a36d3b9d594e93473fef26fed768e1","modified":1586270319243},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/a7/8511a30ca600e9db1ecc1a835c0d4b65fbec6b","hash":"c5fbf2c49ade74e34a3ed2cce39a6b54e4686e3e","modified":1586270313931},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"8f2241dd55a9f77d8cea0f877a7d1fba0fba7892","modified":1586272861325},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1586272861324},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"d8f2e1de2142c44500d41debeeb319ba8adb1ccd","modified":1586270319286},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"8f2241dd55a9f77d8cea0f877a7d1fba0fba7892","modified":1586272861323},{"_id":"themes/next/source/lib/algolia-instant-search/.git/logs/refs/remotes/origin/HEAD","hash":"b8b41381c48951f4ad88dedce3d474662b1a7983","modified":1586270319271},{"_id":"themes/next/source/images/avatar.jpg","hash":"ea20921ecd4d0be8f9b78d7c98ad28e82c8e6664","modified":1585926291289},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-6676209366959508b7039bccc564fff2659503c6.pack","hash":"9eee1305363808025c13b7012f1362993ec9a9f2","modified":1586272861306},{"_id":"themes/next/source/lib/algolia-instant-search/.git/objects/e4/c7790c85a26069925132383ac286502de41c71","hash":"76b2ebe5b1dc357c9c59c97dbe17c35069257531","modified":1586270318284},{"_id":"source/_posts/hexo-js-note-week4.md","hash":"3323b9ded8e6c09aaa02449e7b62dfb7bbb8cbf0","modified":1594744938371},{"_id":"source/_posts/hexoJSclassReview.md","hash":"069cb55680f27eeb07a41bd7639d4e69d0a600fe","modified":1598594662388},{"_id":"public/search.json","hash":"6a1682ab89e4e5b60240adbded74902684ab146a","modified":1600786051878},{"_id":"public/sitemap.xml","hash":"a715768c48fc835162b9f1581ef05c23b0f8ae8e","modified":1600786051878},{"_id":"public/archives/2020/06/index.html","hash":"1a7cfe2a62473617af213b84bfb82f355ad242a6","modified":1600786051878},{"_id":"public/archives/2020/08/index.html","hash":"84ca15f26c082855cd336935c145c3dbe23cbf3f","modified":1600786051878},{"_id":"public/categories/挑戰-Codewar-系列/index.html","hash":"b30a69f57f33645b9277a970bebd460a70dbca36","modified":1600786051878},{"_id":"public/categories/Hexo/index.html","hash":"7a9797069fbc702cf5e2cfd645dc7f08ea70bac2","modified":1600786051878},{"_id":"public/tags/codewar/index.html","hash":"10eb856ca5e3ee819109ea1f92fe30e2bd997400","modified":1600786051878},{"_id":"public/tags/JavaScript/index.html","hash":"4aaac6dbf9ffd93b541dc8168c46b2446d82ff9e","modified":1600786051878},{"_id":"public/tags/undefined/index.html","hash":"140c3dc68044a68f4035131e29c8ac0bcfbc6523","modified":1600786051878},{"_id":"public/tags/詞彙環境/index.html","hash":"7fe70e30af5fc16337d2983ca83dcfddba2355fe","modified":1600786051878},{"_id":"public/tags/執行環境/index.html","hash":"d51886fbece8cb0151322b859e1cc412147ecc26","modified":1600786051878},{"_id":"public/tags/迴圈/index.html","hash":"2486abae7cab93aa2eeb0915a0249087f7d90db3","modified":1600786051878},{"_id":"public/tags/function/index.html","hash":"ff81dc131dfd9bd20175c20846c66cc6def15674","modified":1600786051878},{"_id":"public/tags/匿名函式/index.html","hash":"7ffea6415344f3c047914111b079f8258f4e70c0","modified":1600786051878},{"_id":"public/tags/陣列/index.html","hash":"632e85f153d86032a7dd2ad649b3f66c877468b8","modified":1600786051878},{"_id":"public/tags/先別急著寫-leetcode/index.html","hash":"1ac8102459566167d2700b93fa871bdf38e18cdb","modified":1600786051878},{"_id":"public/tags/pseudo-code/index.html","hash":"4f90783b03d9bd4507d0b037b7c3cfd41b2245e4","modified":1600786051878},{"_id":"public/tags/程式執行/index.html","hash":"58417026b6171c3509c395facbad2e4cc3628157","modified":1600786051878},{"_id":"public/tags/DOM/index.html","hash":"9a2fe8ee742bf337cf98529d181786e61a33c2e0","modified":1600786051878},{"_id":"public/tags/component/index.html","hash":"6873d919ecbbe4ac3981f0540b69cedb38be8de3","modified":1600786051878},{"_id":"public/tags/prop/index.html","hash":"4f2c7fae9e5887f92c05e1e700dc5ebffb75fb8f","modified":1600786051878},{"_id":"public/tags/x-template/index.html","hash":"996a3d39870bf3433fdcacb52c28ed1ea4752fb5","modified":1600786051878},{"_id":"public/tags/vue-cli/index.html","hash":"10d0574187bf8b524c575f8ea6df96e673170785","modified":1600786051878},{"_id":"public/tags/node-js/index.html","hash":"1a929d71ee140832221fe80383e906b069e9d998","modified":1600786051878},{"_id":"public/tags/todolist/index.html","hash":"b11ff0c19087ec31a2f1ca7a5cf0e6047ee2f59d","modified":1600786051878},{"_id":"public/tags/hexo/index.html","hash":"356f5e991df9a8ab0e438e2c059d33541e51df18","modified":1600786051878},{"_id":"public/tags/next/index.html","hash":"c9b5908dd1ac93cf449ad5ea5237506e24394bfa","modified":1600786051878},{"_id":"public/tags/全域環境/index.html","hash":"ed25a67a682efb6d7202fcc210feb6fd723951a3","modified":1600786051878},{"_id":"public/tags/全域物件/index.html","hash":"8009dc35d70fabbbea8a32675f72f2f5668aed58","modified":1600786051878},{"_id":"public/tags/全域變數/index.html","hash":"2f0936258c616d7f9d7f25b6ac75103052ecd22c","modified":1600786051878},{"_id":"public/tags/區域變數/index.html","hash":"1ee38169fec78cc3c648bf3ae0fc27ea7d69f143","modified":1600786051878},{"_id":"public/tags/印出-1-100-的奇數/index.html","hash":"50edb3d90947fb4bcf3f068e4e3f32a19a2e0d0f","modified":1600786051878},{"_id":"public/tags/fizz-buzz/index.html","hash":"702494c725d431b06dfc286001890ac8e74c72c5","modified":1600786051878},{"_id":"public/tags/找最小值/index.html","hash":"9e06a1c5cedadd33e4bf88051d9a0770121a2481","modified":1600786051878},{"_id":"public/tags/hoisting/index.html","hash":"05e778e91bb046f689e5be7b20bfc17d7c070e60","modified":1600786051878},{"_id":"public/tags/JavaScript-作品實戰班/index.html","hash":"c9f7ce3b8c2bb201ebc345046876273b90a9ca01","modified":1600786051878},{"_id":"public/googled36834cd638cf6e1.html","hash":"1180b9af2c9a4265207d5967c091e34453e4e9fd","modified":1600786051878},{"_id":"public/categories/index.html","hash":"2dd7bb94053d64a4cf7b8c3132f02eb46d768da5","modified":1600786051878},{"_id":"public/link/index.html","hash":"c9bb23806501d66ff48aa4d4be62b33483685b4c","modified":1600786051878},{"_id":"public/tags/index.html","hash":"de7d34bae7aa2275dc38edae7f875ef02ed46e65","modified":1600786051878},{"_id":"public/2020/08/28/hexoJSclassReview/index.html","hash":"c8abf0cbbbd66c5013cb58d7ea93bfb1cb72d749","modified":1600786051878},{"_id":"public/2020/06/01/vue-components/index.html","hash":"cb6fcbd6feb7904a31a1fa6901c0b9ed4bba82db","modified":1600786051878},{"_id":"public/2020/05/20/js-review-dom/index.html","hash":"7e9b99349d4db0879b7a3c21a7795135657fb503","modified":1600786051878},{"_id":"public/2020/05/19/execution-context-code-execution/index.html","hash":"32064c5f525770ca824663ba163d8cd159867f69","modified":1600786051878},{"_id":"public/2020/05/18/vue-cli/index.html","hash":"71dd7397a6d8266138c503cd4542e7fa91c4abc8","modified":1600786051878},{"_id":"public/2020/05/12/JSreview-loop/index.html","hash":"46ecb11b06758e03c385dbcb87f7bb680cca36ce","modified":1600786051878},{"_id":"public/2020/05/11/JSnotice-javascript-and-undefined/index.html","hash":"75f775d019f0dc0cdaf063120ae43fac8680689e","modified":1600786051878},{"_id":"public/2020/05/09/makeTodolistByVue/index.html","hash":"092275a8bdb57ad9fe9039953265bafb8a0a4d2c","modified":1600786051878},{"_id":"public/2020/05/07/CodewarChallenge/index.html","hash":"bcc51357d8972a7a0df973bcf175498e36bcc4bc","modified":1600786051878},{"_id":"public/2020/05/01/JS基礎回顧-物件與陣列/index.html","hash":"583f82dc746a3010ab0b031bd671f6132d34fc8e","modified":1600786051878},{"_id":"public/2020/04/24/執行環境-創造與提升/index.html","hash":"40f9b1a688629f9e42f81d3adc6b4531f2b95739","modified":1600786051878},{"_id":"public/2020/04/23/全域變數與區域變數/index.html","hash":"6439b6eafc1aa4aa15f03a422472430e11a58b0f","modified":1600786051878},{"_id":"public/2020/04/18/練習如何解題/index.html","hash":"f1d82bb2357f227c06f40ec52740dc883fb74f98","modified":1600786051878},{"_id":"public/2020/04/16/全域環境與全域物件/index.html","hash":"41a610d10cf4e4d84a994d39d3583d6256f94218","modified":1600786051878},{"_id":"public/2020/04/13/JSnotice：值配對與物件/index.html","hash":"4ed5a7e0cb09457a4e357509c1208e32c4ffcd48","modified":1600786051878},{"_id":"public/2020/04/11/JS基礎回顧-function/index.html","hash":"0fdb2f2dfd15b0e72051d11fe4c76e52a1948225","modified":1600786051878},{"_id":"public/2020/04/10/JS基礎回顧-變數與資料型態/index.html","hash":"a0871da1c782676f99feb98efe5dcef8c3d2378b","modified":1600786051878},{"_id":"public/2020/04/03/Think first, code later/index.html","hash":"ff26446008e0b91957f3d8270488ae2f76e14917","modified":1600786051878},{"_id":"public/2020/04/01/JSnotice：語法解析器、詞彙環境、執行環境/index.html","hash":"cadedc70e115e80cc09103a5d26bd5067c679559","modified":1600786051878},{"_id":"public/2020/03/30/基礎Vue-js-3/index.html","hash":"6dbe4c7e19b9d84903b53921e6313b6a8ee6baa3","modified":1600786051878},{"_id":"public/2020/03/30/基礎Vue-js-2/index.html","hash":"98cf2aeb146c52a8940f0dc5fbc171d46a91ff4e","modified":1600786051878},{"_id":"public/2020/03/30/基礎 Vue.js-1/index.html","hash":"49730b8eefc532a606da36ed71d5cba8c56dbc20","modified":1600786051878},{"_id":"public/2020/03/28/使用Hexo在GitHub部署Blog/index.html","hash":"1b87b16f7bcb8e74fa6456488451e7bd57400b39","modified":1600786051878},{"_id":"public/archives/index.html","hash":"4bf0cb23b5ede5ff4a3eaa42054b14824045010c","modified":1600786051878},{"_id":"public/archives/page/2/index.html","hash":"f3f5f5ea5f82fb63b80a2666731671485036cb41","modified":1600786051878},{"_id":"public/archives/page/3/index.html","hash":"bb4ef0e0cccf90a25b6b4d529d64980b35409329","modified":1600786051878},{"_id":"public/archives/2020/index.html","hash":"7f8e9c8d9cfcde62bc262235f3d90ea7684c2c08","modified":1600786051878},{"_id":"public/archives/2020/page/2/index.html","hash":"30cc6c7e346a7c4dcac99a4f54b6c5e954de1b98","modified":1600786051878},{"_id":"public/archives/2020/page/3/index.html","hash":"a567c845a4636ac6e27b19f6e00cc0904aa535cc","modified":1600786051878},{"_id":"public/archives/2020/03/index.html","hash":"bf63edfb6c9dab3255e80550fef8a7c8fe1d95bf","modified":1600786051878},{"_id":"public/archives/2020/04/index.html","hash":"0cf572baae61ca393ee49f2e1f218fd0e473ea8d","modified":1600786051878},{"_id":"public/archives/2020/05/index.html","hash":"08542b6901929f01a888fdae91471626bd03f692","modified":1600786051878},{"_id":"public/categories/JavaScript-的怪奇物語/index.html","hash":"d2824e2c9226050cd598b5d53825c0a25779b85f","modified":1600786051878},{"_id":"public/categories/JS-基礎回顧/index.html","hash":"3a9d7502a04c026f47ab3c19ad4018228f20e1d5","modified":1600786051878},{"_id":"public/categories/先別急著寫-leetcode-課程心得/index.html","hash":"f0c049a8e41ec628388b59acbed1f96f9fc20330","modified":1600786051878},{"_id":"public/categories/vue/index.html","hash":"62974ede62396d561c16a9aa4754baed931704e3","modified":1600786051878},{"_id":"public/categories/JavaScript-作品實戰班-學習心得/index.html","hash":"6e7ec409e26adcdbfa3feda0afd8646bc1b4de14","modified":1600786051878},{"_id":"public/index.html","hash":"b08b17c941da19c10c346a89d50798dde853b1ed","modified":1600786051878},{"_id":"public/page/2/index.html","hash":"b188c9ffd8f932820f968a83d21b779916b1f0fc","modified":1600786051878},{"_id":"public/page/3/index.html","hash":"faeb64dffb827c7b1a25a0a4a3e93204f2e47898","modified":1600786051878},{"_id":"public/tags/w3HexSchool/index.html","hash":"28fab3169840ba90f08ac3c9ac8b3f247fb4afd3","modified":1600786051878},{"_id":"public/tags/javascript/index.html","hash":"5bdc612e03cc76713200710dcf54e5cefa6a4bf2","modified":1600786051878},{"_id":"public/tags/javascript/page/2/index.html","hash":"cbc66953d30b7fde00e0129c51bfd419ce88b6e8","modified":1600786051878},{"_id":"public/tags/語法解析器/index.html","hash":"0bfb83b4254d8ce6938ff5c5eeec280fc9790de1","modified":1600786051878},{"_id":"public/tags/物件/index.html","hash":"06dd2a61ae7a8da59b80858c36fda760630602fd","modified":1600786051878},{"_id":"public/tags/vue/index.html","hash":"d1afe62405e48ca9b6a1354c5efdb2d821f5b42e","modified":1600786051878},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598594841190},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598594841190},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598594841190},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598594841190},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598594841190},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598594841190},{"_id":"public/robots.txt","hash":"b28f5fa43592ea2d242dd62309d4c2d1002c7287","modified":1598594841190},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598594841190},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598594841190},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598594841190},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598594841190},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598594841190},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598594841190},{"_id":"public/lib/algolia-instant-search/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1598594841190},{"_id":"public/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1598594841190},{"_id":"public/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1598594841190},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css.map","hash":"d055d06395af598682873d1b458166dc6f513072","modified":1598594841190},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598594841190},{"_id":"public/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1598594841190},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"284416885e4e80e27fa4eae6fc305f4de15b914c","modified":1598594841190},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598594841190},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598594841190},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"a3b131a9a47ccc16f4dd8988fabb6d306548db2f","modified":1598594841190},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e56ad6b82caf69066de545201014291fc961635e","modified":1598594841190},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1598594841190},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598594841190},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1598594841190},{"_id":"public/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1598594841190},{"_id":"public/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1598594841190},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1598594841190},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1598594841190},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"6e01a39d7f6d58a0895957361b0a942543c18332","modified":1598594841190},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1598594841190},{"_id":"public/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1598594841190},{"_id":"public/lib/pjax/package.json","hash":"da55143475b12cb91a44aeb5a995c53879fe3326","modified":1598594841190},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598594841190},{"_id":"public/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1598594841190},{"_id":"public/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1598594841190},{"_id":"public/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1598594841190},{"_id":"public/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1598594841190},{"_id":"public/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1598594841190},{"_id":"public/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1598594841190},{"_id":"public/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1598594841190},{"_id":"public/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1598594841190},{"_id":"public/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1598594841190},{"_id":"public/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1598594841190},{"_id":"public/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1598594841190},{"_id":"public/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1598594841190},{"_id":"public/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1598594841190},{"_id":"public/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1598594841190},{"_id":"public/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1598594841190},{"_id":"public/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1598594841190},{"_id":"public/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1598594841190},{"_id":"public/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1598594841190},{"_id":"public/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1598594841190},{"_id":"public/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1598594841190},{"_id":"public/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1598594841190},{"_id":"public/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1598594841190},{"_id":"public/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1598594841190},{"_id":"public/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1598594841190},{"_id":"public/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1598594841190},{"_id":"public/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1598594841190},{"_id":"public/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1598594841190},{"_id":"public/lib/algolia-instant-search/README.html","hash":"fe4bba5584188826c364fd05c9194944f8b911bb","modified":1598594841190},{"_id":"public/lib/pjax/CHANGELOG.html","hash":"6c0d09dac56e59897d1555628df9f2124822a27d","modified":1598594841190},{"_id":"public/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1598594841190},{"_id":"public/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1598594841190},{"_id":"public/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1598594841190},{"_id":"public/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1598594841190},{"_id":"public/css/main.css","hash":"048477aedac404cc20801bed10d481df7d9cb690","modified":1598594841190},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598594841190},{"_id":"public/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1598594841190},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598594841190},{"_id":"public/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1598594841190},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598594841190},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"d8f2e1de2142c44500d41debeeb319ba8adb1ccd","modified":1598594841190},{"_id":"public/lib/pjax/README.html","hash":"09cc188504d4a7bf5f0e9cb2f211e97f0d6f6001","modified":1598594841190},{"_id":"public/assets/algolia/algoliasearch.js","hash":"6948fcdf071e4983e784e8c458cf201536f77792","modified":1598594841190},{"_id":"public/images/avatar.jpg","hash":"ea20921ecd4d0be8f9b78d7c98ad28e82c8e6664","modified":1598594841190},{"_id":"source/_posts/arrow-function-es6.md","hash":"047cc7f1814656bb70276e79425448c59a99047e","modified":1600694045443},{"_id":"public/archives/2020/09/index.html","hash":"8fd842d2a1f34374680e7bf1fb42464f2146bda2","modified":1600786051878},{"_id":"public/categories/ES6-好用語法/index.html","hash":"8b7b8c18eed36c34f4ca4baa6edf0e13da1888e2","modified":1600786051878},{"_id":"public/tags/ES6/index.html","hash":"b3cdc7c8446a746451aed66da39abdabfa4a95cc","modified":1600786051878},{"_id":"public/tags/箭頭函式/index.html","hash":"52ac36501491d785bdae45aa44dccc22f223b7a2","modified":1600786051878},{"_id":"public/tags/arrow-function/index.html","hash":"5b3f50012b85151bebad0d58759dbe449d4cdaf0","modified":1600786051878},{"_id":"public/2020/09/19/arrow-function-es6/index.html","hash":"49da44827ae8518ec0e79fe0d7db0c995452dfd6","modified":1600786051878},{"_id":"public/2020/06/03/物件結構/index.html","hash":"b9b6b729ec659f931a82f66a55a676cb3a9a968a","modified":1600786051878},{"_id":"source/_posts/scss-variable.md","hash":"aec5183569d9174dd03af372a3b15dbe056c6dcf","modified":1600604962264},{"_id":"public/categories/SCSS-學習筆記/index.html","hash":"18f7dd76ec6cf8385b580cd651d0819de98c3709","modified":1600786051878},{"_id":"public/tags/sass/index.html","hash":"cbaf3b7a22464af233eb686a5174ac25105004bd","modified":1600786051878},{"_id":"public/tags/scss/index.html","hash":"661ac62b8df6ba3326b99c0bdf2cf5e0a00ccd91","modified":1600786051878},{"_id":"public/tags/variable/index.html","hash":"446841189fb78d8c06f735cc5b8e2b7841c64feb","modified":1600786051878},{"_id":"public/2020/09/20/scss-variable/index.html","hash":"c017fd8fd3293c778694312e60d7a1840a83abfe","modified":1600786051878},{"_id":"source/_posts/destructuring-assignment-es6.md","hash":"9401c0e48ee7fdcc4af3bf8779f39c668b972e9f","modified":1600697892501},{"_id":"public/tags/destructuring-assignment/index.html","hash":"a0a100ea08fd36763d0f156985f8230354240a00","modified":1600786051878},{"_id":"public/tags/解構賦值/index.html","hash":"0a899445c428730d9629b374618eae15c1248e3a","modified":1600786051878},{"_id":"public/2020/09/21/destructuring-assignment-es6/index.html","hash":"ad799dd9a001de6d8a454e584e6929fd9abab670","modified":1600786051878},{"_id":"source/_posts/scss-import.md","hash":"b70a48f217e61887a1c1b3266ec84f6874753eda","modified":1600786041805},{"_id":"public/tags/import/index.html","hash":"57fca20226fccd05c9e1c16c79a14d38f7d13625","modified":1600786051878},{"_id":"public/2020/09/22/scss-import/index.html","hash":"a63ed87a563262c4a790457ba4d65cbf5dc9b69f","modified":1600786051878}],"Category":[{"name":"挑戰 Codewar 系列","_id":"ckbdizwxz0005b6u7hz9ph0hr"},{"name":"JavaScript 的怪奇物語","_id":"ckbdizwy6000bb6u73tjn524y"},{"name":"JS 基礎回顧","_id":"ckbdizwyg000nb6u7gdhz0098"},{"name":"先別急著寫 leetcode 課程心得","_id":"ckbdizwys001bb6u7hkt58874"},{"name":"vue","_id":"ckbdizwyv001hb6u7e08p4j9q"},{"name":"Hexo","_id":"ckbdizwz30021b6u7c3lm41dm"},{"name":"JavaScript 作品實戰班筆記","_id":"ckcm5psav00010vu7ghhz78na"},{"name":"JavaScript 作品實戰班 - 學習心得","_id":"ckedtxyse000189u7gq2yeqwd"},{"name":"ES6 好用語法","_id":"ckf9kpwih0001pju71apte8do"},{"name":"SCSS 學習筆記","_id":"ckfb2ttsn00018mu72tgz95n1"}],"Data":[],"Page":[{"_content":"google-site-verification: googled36834cd638cf6e1.html","source":"googled36834cd638cf6e1.html","raw":"google-site-verification: googled36834cd638cf6e1.html","date":"2020-04-16T15:20:34.078Z","updated":"2020-04-16T15:19:07.621Z","path":"googled36834cd638cf6e1.html","title":"","comments":1,"layout":"page","_id":"ckbdizwui0000b6u7148j3u0k","content":"google-site-verification: googled36834cd638cf6e1.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googled36834cd638cf6e1.html"},{"title":"分類","date":"2020-03-28T06:26:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2020-03-28 14:26:34\ntype: 'categories'\ncomments: false\n---\n","updated":"2020-04-06T03:31:09.820Z","path":"categories/index.html","layout":"page","_id":"ckbdizwxt0002b6u7120ufsva","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Link","date":"2020-03-29T09:34:55.000Z","type":"link","comments":0,"_content":"## 前端乾貨\n\n* [卡斯伯Blog](https://wcc723.github.io)\n* [Huli](https://blog.huli.tw)\n* [PJCHENder 那些沒告訴你的小細節](https://pjchender.blogspot.com)\n* [Welcome.Web.World](https://hsiangfeng.github.io/)","source":"link/index.md","raw":"---\ntitle: Link\ndate: 2020-03-29 17:34:55\ntype: 'link'\ncomments: false\n---\n## 前端乾貨\n\n* [卡斯伯Blog](https://wcc723.github.io)\n* [Huli](https://blog.huli.tw)\n* [PJCHENder 那些沒告訴你的小細節](https://pjchender.blogspot.com)\n* [Welcome.Web.World](https://hsiangfeng.github.io/)","updated":"2020-04-06T03:46:03.078Z","path":"link/index.html","layout":"page","_id":"ckbdizwxy0004b6u71egx10m8","content":"<h2 id=\"前端乾貨\"><a href=\"#前端乾貨\" class=\"headerlink\" title=\"前端乾貨\"></a>前端乾貨</h2><ul>\n<li><a href=\"https://wcc723.github.io\" target=\"_blank\" rel=\"noopener\">卡斯伯Blog</a></li>\n<li><a href=\"https://blog.huli.tw\" target=\"_blank\" rel=\"noopener\">Huli</a></li>\n<li><a href=\"https://pjchender.blogspot.com\" target=\"_blank\" rel=\"noopener\">PJCHENder 那些沒告訴你的小細節</a></li>\n<li><a href=\"https://hsiangfeng.github.io/\" target=\"_blank\" rel=\"noopener\">Welcome.Web.World</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端乾貨\"><a href=\"#前端乾貨\" class=\"headerlink\" title=\"前端乾貨\"></a>前端乾貨</h2><ul>\n<li><a href=\"https://wcc723.github.io\" target=\"_blank\" rel=\"noopener\">卡斯伯Blog</a></li>\n<li><a href=\"https://blog.huli.tw\" target=\"_blank\" rel=\"noopener\">Huli</a></li>\n<li><a href=\"https://pjchender.blogspot.com\" target=\"_blank\" rel=\"noopener\">PJCHENder 那些沒告訴你的小細節</a></li>\n<li><a href=\"https://hsiangfeng.github.io/\" target=\"_blank\" rel=\"noopener\">Welcome.Web.World</a></li>\n</ul>\n"},{"title":"標籤","date":"2020-03-29T08:35:38.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2020-03-29 16:35:38\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-04-06T03:31:21.111Z","path":"tags/index.html","layout":"page","_id":"ckbdizwy30008b6u73cfuaj74","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"挑戰 Codewar - 1","date":"2020-05-07T15:03:09.000Z","keywords":["Opposite number","Even or Odd","Number-Star ladder"],"decription":"本篇將會說到如何答題的過程與解答。","_content":"這是在胡立的程式導師實驗計畫第四期中的 [Codewar 練習題](https://github.com/bucky0112/mentor-program-4th/blob/master/codewar.md)，裡面的題目都是出自 [Codewars](https://www.codewars.com/dashboard)，之後會試著去由淺入深解開裡面的題目，並在這個系列寫出我解題的過程與心得。\n<!--more-->\n## Opposite number\n---\n\n第一題先從難度零顆星的開始。目的是要將數值正反顛倒，正數變負數，負數變正數。\n一進去就給你一個 function，讓你去思考怎麼解。\n\n```\nfunction opposite(number) {\n  //your code here\n}\n```\n\n一開始有點想太多，想說如果是負數的話，就給它一個負號，讓它變正數；如果是正數，就給負號。\n\n所以一開始的作法我是用 `if...else`：\n\n```\nfunction opposite(number) {\n  if(number < 0) {\n    return -number\n  } else {\n    return -number\n  }\n}\n```\n\n後來想想不對，應該是不用這麼複雜，不管什麼數，給負數就對了，所以就變成：\n\n```\nfunction opposite(number) {\n  return -number\n}\n\nopposite(10); // -10\nopposite(-50) // 50\n```\n\n## Even or Odd\n---\n\n這一題是要做出判斷給的數值是奇數或是偶數。\n\n想了一下，應該是要用判斷 `if...else` 去做，只要判斷出偶數（或是奇數），另一個就會得到結果，所以會是這樣：\n\n```\nif number % 2 === 0\nreturn even\nelse return odd\n```\n\n用 JavaScript 來操作：\n\n```\nfunction even_or_odd(number) {\n  if (number % 2 === 0) {\n    return 'Even'\n  } else {\n    return 'Odd'\n  }\n}\n\neven_or_odd(2); // 'Even'\neven_or_odd(7)  // 'Odd'\n```\n\n## Number-Star ladder\n---\n\n這題從零顆星開始變成一顆星頭目了，感覺有點難，範例是如果給數值 4，會依序回傳：\n\n```\n1\n1*2\n1**3\n1***4\n```\n一開始題目就幫你設定好為：\n\n```\nfunction pattern(n){\n var output=\"\";\n  //being coder\n return output;\n}\n```\n\n這個問題卡了我一天都解不出來，只知道是組字串的作法，最後只好去看提示，後來才知道 JavaScript 有換行的語法，然後照我自己的方法做。\n*補充一下，在 JavaScript 中如果想要做出換行的效果，可以使用 '\\n' 這個語法*\n\n所以作法大概是：\n\n```\n如果是 1，就直接印 1\n其他數字從 2 到 n 跑迴圈\n米字(starkey) 從 1 到 n 跑迴圈\n組裝字串 1 + 換行 + 1 + starkey + n\n```\n\n而在 JavaScript 中的作法為：\n\n```\nfunction pattern(n){\n  if (n <= 1) {               // 如果 n 小於 1，直接回傳 n\n    return n;\n  }\n  var output=\"1\";\n  for (var i = 2; i <= n; i++) {\n    var starKey = \"\";\n    for (var s = 1; s < i; s++) {\n      starKey += \"*\";\n    }\n    output += \"\\n\" + 1 + starKey + i;\n  }\n  return output;\n}\n\nconsole.log(pattern(5));\n// \"1\n//1*2\n//1**3\n//1***4\n//1****5\"\n```\n\n然後還有看到一種作法也滿好的，在 starKey 部份是改用 `Array().join()` 的方式， \n於是就學了起來，就可以改成：\n\n```\nfunction pattern (n) {\n  if (n <= 1) {\n    return n;\n  }\n  var output = \"1\";\n  for (var i = 2; i <= n; i++) {\n    output += \"\\n\" + 1 + Array(i).join(\"*\") + i;\n  }\n  return output;\n}\n\nconsole.log(pattern(5));\n// \"1\n//1*2\n//1**3\n//1***4\n//1****5\"\n```\n\n這次解題過程還算蠻有趣的，雖然第 3 題有點難度，想到後面還有更難的題目就覺得可怕...\n\n![](https://i.imgur.com/CQMhOEc.gif)\n\n但是解完題目後，所得到的成就感也很讓人著迷，會想要再接再厲繼續解下去，希望能透過完成這個系列精進寫程式的想法。","source":"_posts/CodewarChallenge.md","raw":"---\ntitle: 挑戰 Codewar - 1\ntags:\n  - codewar\n  - w3HexSchool\ndate: 2020-05-07 23:03:09\ncategories: 挑戰 Codewar 系列\nkeywords:\n- Opposite number\n- Even or Odd\n- Number-Star ladder\ndecription: 本篇將會說到如何答題的過程與解答。\n---\n這是在胡立的程式導師實驗計畫第四期中的 [Codewar 練習題](https://github.com/bucky0112/mentor-program-4th/blob/master/codewar.md)，裡面的題目都是出自 [Codewars](https://www.codewars.com/dashboard)，之後會試著去由淺入深解開裡面的題目，並在這個系列寫出我解題的過程與心得。\n<!--more-->\n## Opposite number\n---\n\n第一題先從難度零顆星的開始。目的是要將數值正反顛倒，正數變負數，負數變正數。\n一進去就給你一個 function，讓你去思考怎麼解。\n\n```\nfunction opposite(number) {\n  //your code here\n}\n```\n\n一開始有點想太多，想說如果是負數的話，就給它一個負號，讓它變正數；如果是正數，就給負號。\n\n所以一開始的作法我是用 `if...else`：\n\n```\nfunction opposite(number) {\n  if(number < 0) {\n    return -number\n  } else {\n    return -number\n  }\n}\n```\n\n後來想想不對，應該是不用這麼複雜，不管什麼數，給負數就對了，所以就變成：\n\n```\nfunction opposite(number) {\n  return -number\n}\n\nopposite(10); // -10\nopposite(-50) // 50\n```\n\n## Even or Odd\n---\n\n這一題是要做出判斷給的數值是奇數或是偶數。\n\n想了一下，應該是要用判斷 `if...else` 去做，只要判斷出偶數（或是奇數），另一個就會得到結果，所以會是這樣：\n\n```\nif number % 2 === 0\nreturn even\nelse return odd\n```\n\n用 JavaScript 來操作：\n\n```\nfunction even_or_odd(number) {\n  if (number % 2 === 0) {\n    return 'Even'\n  } else {\n    return 'Odd'\n  }\n}\n\neven_or_odd(2); // 'Even'\neven_or_odd(7)  // 'Odd'\n```\n\n## Number-Star ladder\n---\n\n這題從零顆星開始變成一顆星頭目了，感覺有點難，範例是如果給數值 4，會依序回傳：\n\n```\n1\n1*2\n1**3\n1***4\n```\n一開始題目就幫你設定好為：\n\n```\nfunction pattern(n){\n var output=\"\";\n  //being coder\n return output;\n}\n```\n\n這個問題卡了我一天都解不出來，只知道是組字串的作法，最後只好去看提示，後來才知道 JavaScript 有換行的語法，然後照我自己的方法做。\n*補充一下，在 JavaScript 中如果想要做出換行的效果，可以使用 '\\n' 這個語法*\n\n所以作法大概是：\n\n```\n如果是 1，就直接印 1\n其他數字從 2 到 n 跑迴圈\n米字(starkey) 從 1 到 n 跑迴圈\n組裝字串 1 + 換行 + 1 + starkey + n\n```\n\n而在 JavaScript 中的作法為：\n\n```\nfunction pattern(n){\n  if (n <= 1) {               // 如果 n 小於 1，直接回傳 n\n    return n;\n  }\n  var output=\"1\";\n  for (var i = 2; i <= n; i++) {\n    var starKey = \"\";\n    for (var s = 1; s < i; s++) {\n      starKey += \"*\";\n    }\n    output += \"\\n\" + 1 + starKey + i;\n  }\n  return output;\n}\n\nconsole.log(pattern(5));\n// \"1\n//1*2\n//1**3\n//1***4\n//1****5\"\n```\n\n然後還有看到一種作法也滿好的，在 starKey 部份是改用 `Array().join()` 的方式， \n於是就學了起來，就可以改成：\n\n```\nfunction pattern (n) {\n  if (n <= 1) {\n    return n;\n  }\n  var output = \"1\";\n  for (var i = 2; i <= n; i++) {\n    output += \"\\n\" + 1 + Array(i).join(\"*\") + i;\n  }\n  return output;\n}\n\nconsole.log(pattern(5));\n// \"1\n//1*2\n//1**3\n//1***4\n//1****5\"\n```\n\n這次解題過程還算蠻有趣的，雖然第 3 題有點難度，想到後面還有更難的題目就覺得可怕...\n\n![](https://i.imgur.com/CQMhOEc.gif)\n\n但是解完題目後，所得到的成就感也很讓人著迷，會想要再接再厲繼續解下去，希望能透過完成這個系列精進寫程式的想法。","slug":"CodewarChallenge","published":1,"updated":"2020-05-08T09:44:23.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwxq0001b6u7gi6fdok7","content":"<p>這是在胡立的程式導師實驗計畫第四期中的 <a href=\"https://github.com/bucky0112/mentor-program-4th/blob/master/codewar.md\" target=\"_blank\" rel=\"noopener\">Codewar 練習題</a>，裡面的題目都是出自 <a href=\"https://www.codewars.com/dashboard\" target=\"_blank\" rel=\"noopener\">Codewars</a>，之後會試著去由淺入深解開裡面的題目，並在這個系列寫出我解題的過程與心得。</p>\n<a id=\"more\"></a>\n<h2 id=\"Opposite-number\"><a href=\"#Opposite-number\" class=\"headerlink\" title=\"Opposite number\"></a>Opposite number</h2><hr>\n<p>第一題先從難度零顆星的開始。目的是要將數值正反顛倒，正數變負數，負數變正數。<br>一進去就給你一個 function，讓你去思考怎麼解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;your code here</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始有點想太多，想說如果是負數的話，就給它一個負號，讓它變正數；如果是正數，就給負號。</p>\n<p>所以一開始的作法我是用 <code>if...else</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  if(number &lt; 0) &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>後來想想不對，應該是不用這麼複雜，不管什麼數，給負數就對了，所以就變成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  return -number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opposite(10); &#x2F;&#x2F; -10</span><br><span class=\"line\">opposite(-50) &#x2F;&#x2F; 50</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Even-or-Odd\"><a href=\"#Even-or-Odd\" class=\"headerlink\" title=\"Even or Odd\"></a>Even or Odd</h2><hr>\n<p>這一題是要做出判斷給的數值是奇數或是偶數。</p>\n<p>想了一下，應該是要用判斷 <code>if...else</code> 去做，只要判斷出偶數（或是奇數），另一個就會得到結果，所以會是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if number % 2 &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">return even</span><br><span class=\"line\">else return odd</span><br></pre></td></tr></table></figure>\n\n<p>用 JavaScript 來操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function even_or_odd(number) &#123;</span><br><span class=\"line\">  if (number % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">    return &#39;Even&#39;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return &#39;Odd&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">even_or_odd(2); &#x2F;&#x2F; &#39;Even&#39;</span><br><span class=\"line\">even_or_odd(7)  &#x2F;&#x2F; &#39;Odd&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-Star-ladder\"><a href=\"#Number-Star-ladder\" class=\"headerlink\" title=\"Number-Star ladder\"></a>Number-Star ladder</h2><hr>\n<p>這題從零顆星開始變成一顆星頭目了，感覺有點難，範例是如果給數值 4，會依序回傳：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1*2</span><br><span class=\"line\">1**3</span><br><span class=\"line\">1***4</span><br></pre></td></tr></table></figure>\n<p>一開始題目就幫你設定好為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\"> var output&#x3D;&quot;&quot;;</span><br><span class=\"line\">  &#x2F;&#x2F;being coder</span><br><span class=\"line\"> return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這個問題卡了我一天都解不出來，只知道是組字串的作法，最後只好去看提示，後來才知道 JavaScript 有換行的語法，然後照我自己的方法做。<br><em>補充一下，在 JavaScript 中如果想要做出換行的效果，可以使用 ‘\\n’ 這個語法</em></p>\n<p>所以作法大概是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果是 1，就直接印 1</span><br><span class=\"line\">其他數字從 2 到 n 跑迴圈</span><br><span class=\"line\">米字(starkey) 從 1 到 n 跑迴圈</span><br><span class=\"line\">組裝字串 1 + 換行 + 1 + starkey + n</span><br></pre></td></tr></table></figure>\n\n<p>而在 JavaScript 中的作法為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;               &#x2F;&#x2F; 如果 n 小於 1，直接回傳 n</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output&#x3D;&quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    var starKey &#x3D; &quot;&quot;;</span><br><span class=\"line\">    for (var s &#x3D; 1; s &lt; i; s++) &#123;</span><br><span class=\"line\">      starKey +&#x3D; &quot;*&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + starKey + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然後還有看到一種作法也滿好的，在 starKey 部份是改用 <code>Array().join()</code> 的方式，<br>於是就學了起來，就可以改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern (n) &#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output &#x3D; &quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + Array(i).join(&quot;*&quot;) + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這次解題過程還算蠻有趣的，雖然第 3 題有點難度，想到後面還有更難的題目就覺得可怕…</p>\n<p><img src=\"https://i.imgur.com/CQMhOEc.gif\" alt=\"\"></p>\n<p>但是解完題目後，所得到的成就感也很讓人著迷，會想要再接再厲繼續解下去，希望能透過完成這個系列精進寫程式的想法。</p>\n","site":{"data":{}},"excerpt":"<p>這是在胡立的程式導師實驗計畫第四期中的 <a href=\"https://github.com/bucky0112/mentor-program-4th/blob/master/codewar.md\" target=\"_blank\" rel=\"noopener\">Codewar 練習題</a>，裡面的題目都是出自 <a href=\"https://www.codewars.com/dashboard\" target=\"_blank\" rel=\"noopener\">Codewars</a>，之後會試著去由淺入深解開裡面的題目，並在這個系列寫出我解題的過程與心得。</p>","more":"<h2 id=\"Opposite-number\"><a href=\"#Opposite-number\" class=\"headerlink\" title=\"Opposite number\"></a>Opposite number</h2><hr>\n<p>第一題先從難度零顆星的開始。目的是要將數值正反顛倒，正數變負數，負數變正數。<br>一進去就給你一個 function，讓你去思考怎麼解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;your code here</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始有點想太多，想說如果是負數的話，就給它一個負號，讓它變正數；如果是正數，就給負號。</p>\n<p>所以一開始的作法我是用 <code>if...else</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  if(number &lt; 0) &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>後來想想不對，應該是不用這麼複雜，不管什麼數，給負數就對了，所以就變成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  return -number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opposite(10); &#x2F;&#x2F; -10</span><br><span class=\"line\">opposite(-50) &#x2F;&#x2F; 50</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Even-or-Odd\"><a href=\"#Even-or-Odd\" class=\"headerlink\" title=\"Even or Odd\"></a>Even or Odd</h2><hr>\n<p>這一題是要做出判斷給的數值是奇數或是偶數。</p>\n<p>想了一下，應該是要用判斷 <code>if...else</code> 去做，只要判斷出偶數（或是奇數），另一個就會得到結果，所以會是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if number % 2 &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">return even</span><br><span class=\"line\">else return odd</span><br></pre></td></tr></table></figure>\n\n<p>用 JavaScript 來操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function even_or_odd(number) &#123;</span><br><span class=\"line\">  if (number % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">    return &#39;Even&#39;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return &#39;Odd&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">even_or_odd(2); &#x2F;&#x2F; &#39;Even&#39;</span><br><span class=\"line\">even_or_odd(7)  &#x2F;&#x2F; &#39;Odd&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-Star-ladder\"><a href=\"#Number-Star-ladder\" class=\"headerlink\" title=\"Number-Star ladder\"></a>Number-Star ladder</h2><hr>\n<p>這題從零顆星開始變成一顆星頭目了，感覺有點難，範例是如果給數值 4，會依序回傳：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1*2</span><br><span class=\"line\">1**3</span><br><span class=\"line\">1***4</span><br></pre></td></tr></table></figure>\n<p>一開始題目就幫你設定好為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\"> var output&#x3D;&quot;&quot;;</span><br><span class=\"line\">  &#x2F;&#x2F;being coder</span><br><span class=\"line\"> return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這個問題卡了我一天都解不出來，只知道是組字串的作法，最後只好去看提示，後來才知道 JavaScript 有換行的語法，然後照我自己的方法做。<br><em>補充一下，在 JavaScript 中如果想要做出換行的效果，可以使用 ‘\\n’ 這個語法</em></p>\n<p>所以作法大概是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果是 1，就直接印 1</span><br><span class=\"line\">其他數字從 2 到 n 跑迴圈</span><br><span class=\"line\">米字(starkey) 從 1 到 n 跑迴圈</span><br><span class=\"line\">組裝字串 1 + 換行 + 1 + starkey + n</span><br></pre></td></tr></table></figure>\n\n<p>而在 JavaScript 中的作法為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;               &#x2F;&#x2F; 如果 n 小於 1，直接回傳 n</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output&#x3D;&quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    var starKey &#x3D; &quot;&quot;;</span><br><span class=\"line\">    for (var s &#x3D; 1; s &lt; i; s++) &#123;</span><br><span class=\"line\">      starKey +&#x3D; &quot;*&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + starKey + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然後還有看到一種作法也滿好的，在 starKey 部份是改用 <code>Array().join()</code> 的方式，<br>於是就學了起來，就可以改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pattern (n) &#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output &#x3D; &quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + Array(i).join(&quot;*&quot;) + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這次解題過程還算蠻有趣的，雖然第 3 題有點難度，想到後面還有更難的題目就覺得可怕…</p>\n<p><img src=\"https://i.imgur.com/CQMhOEc.gif\" alt=\"\"></p>\n<p>但是解完題目後，所得到的成就感也很讓人著迷，會想要再接再厲繼續解下去，希望能透過完成這個系列精進寫程式的想法。</p>"},{"title":"JS notice： JavaScript 與 undefined","date":"2020-05-11T09:21:49.000Z","keywords":["undefined","not defined"],"decription":"undefined 與 not defined 的差異","_content":"本篇文章會稍微講解 undefined 與 not defined 的差異。\n<!--more-->\n## undefined\n---\n\n先來看一個例子：\n\n```\nvar a = \"Hello World\";\nconsole.log(a)  // \"Hello World\"\n```\n\n當宣告一個變數 a，並指定一個值給它時，再用 `console.log` 印出 a，不意外的得到賦予它的值。\n\n但如果把值去掉，再次看 a 會得到什麼？\n\n```\nvar a;\nconsole.log(a)  // undefined\n```\n\n結果得到 undefined。\n\n## not defined\n---\n\n那麼如果把 var 跟值去掉的話，只留下 a 會發生什麼事？\n\n```\na;\nconsole.log(a);\n```\n\n會發生錯誤，錯誤訊息為 a is not defined。\n這邊則會有一個疑問，not defined 跟 undefined 是不同的嗎？\n\n這個部份有在 [執行環境：創造與提升](https://bucky0112.github.io/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/) 提過，**所有 JavaScript 的變數，在一開始都會被設定為 undefined，而 undefined 是 JavaScript 內建的一個特殊的值，表示這個值尚未被定義**\n\n這邊可以用判斷式來測試一下：\n\n```\nvar a = \"Hello World\";\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined') \n} else {\n  console.log('a is defined')\n}\n```\n\n結果賦予 a 值的情況下，會出現 'a is defined'。\n而把值去掉的話：\n\n```\nvar a;\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined') \n} else {\n  console.log('a is defined')\n}\n```\n\n則是會出現 'a is undefined'。\n\n## undefined 與 not defined 差在哪？\n---\n\n接著把 var 去掉，只留下 a，則會出現錯誤，a is not defined。\n這是因為執行環境被創造時，沒有在記憶體中找到 a。\n而宣告 `var a` 時，a 在創造階段就被放進記憶體中，雖然沒有賦予它值，但是確實先給它一個特殊的初始值 undefined，已經在記憶體中佔據了一席之地。\n\n## 那麼可以設定值為 undefined 嗎？\n---\n\n理論上是可以的，來測試看看：\n\n```\nvar a = undefined;\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined')\n} else {\n  console.log('a is defined')\n}\n```\n\n雖然 a 給它值，可能想說會是 'a is defined'，但是最後的結果會是 'a is undefined'。\n所以這邊就會有問題，萬一想要除錯的話，可能會發生混亂，所以這裏需要注意不要給予賦予變數 undefined 這個特殊關鍵字。","source":"_posts/JSnotice-javascript-and-undefined.md","raw":"---\ntitle: JS notice： JavaScript 與 undefined\ntags:\n  - JavaScript\n  - undefined\ndate: 2020-05-11 17:21:49\ncategories: JavaScript 的怪奇物語\nkeywords:\n- undefined\n- not defined\ndecription: undefined 與 not defined 的差異\n---\n本篇文章會稍微講解 undefined 與 not defined 的差異。\n<!--more-->\n## undefined\n---\n\n先來看一個例子：\n\n```\nvar a = \"Hello World\";\nconsole.log(a)  // \"Hello World\"\n```\n\n當宣告一個變數 a，並指定一個值給它時，再用 `console.log` 印出 a，不意外的得到賦予它的值。\n\n但如果把值去掉，再次看 a 會得到什麼？\n\n```\nvar a;\nconsole.log(a)  // undefined\n```\n\n結果得到 undefined。\n\n## not defined\n---\n\n那麼如果把 var 跟值去掉的話，只留下 a 會發生什麼事？\n\n```\na;\nconsole.log(a);\n```\n\n會發生錯誤，錯誤訊息為 a is not defined。\n這邊則會有一個疑問，not defined 跟 undefined 是不同的嗎？\n\n這個部份有在 [執行環境：創造與提升](https://bucky0112.github.io/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/) 提過，**所有 JavaScript 的變數，在一開始都會被設定為 undefined，而 undefined 是 JavaScript 內建的一個特殊的值，表示這個值尚未被定義**\n\n這邊可以用判斷式來測試一下：\n\n```\nvar a = \"Hello World\";\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined') \n} else {\n  console.log('a is defined')\n}\n```\n\n結果賦予 a 值的情況下，會出現 'a is defined'。\n而把值去掉的話：\n\n```\nvar a;\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined') \n} else {\n  console.log('a is defined')\n}\n```\n\n則是會出現 'a is undefined'。\n\n## undefined 與 not defined 差在哪？\n---\n\n接著把 var 去掉，只留下 a，則會出現錯誤，a is not defined。\n這是因為執行環境被創造時，沒有在記憶體中找到 a。\n而宣告 `var a` 時，a 在創造階段就被放進記憶體中，雖然沒有賦予它值，但是確實先給它一個特殊的初始值 undefined，已經在記憶體中佔據了一席之地。\n\n## 那麼可以設定值為 undefined 嗎？\n---\n\n理論上是可以的，來測試看看：\n\n```\nvar a = undefined;\nconsole.log(a);\n\nif (a === undefined) {\n  console.log('a is undefined')\n} else {\n  console.log('a is defined')\n}\n```\n\n雖然 a 給它值，可能想說會是 'a is defined'，但是最後的結果會是 'a is undefined'。\n所以這邊就會有問題，萬一想要除錯的話，可能會發生混亂，所以這裏需要注意不要給予賦予變數 undefined 這個特殊關鍵字。","slug":"JSnotice-javascript-and-undefined","published":1,"updated":"2020-05-11T15:49:38.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwxw0003b6u7etph3h0e","content":"<p>本篇文章會稍微講解 undefined 與 not defined 的差異。</p>\n<a id=\"more\"></a>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><hr>\n<p>先來看一個例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; &quot;Hello World&quot;</span><br></pre></td></tr></table></figure>\n\n<p>當宣告一個變數 a，並指定一個值給它時，再用 <code>console.log</code> 印出 a，不意外的得到賦予它的值。</p>\n<p>但如果把值去掉，再次看 a 會得到什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>結果得到 undefined。</p>\n<h2 id=\"not-defined\"><a href=\"#not-defined\" class=\"headerlink\" title=\"not defined\"></a>not defined</h2><hr>\n<p>那麼如果把 var 跟值去掉的話，只留下 a 會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>會發生錯誤，錯誤訊息為 a is not defined。<br>這邊則會有一個疑問，not defined 跟 undefined 是不同的嗎？</p>\n<p>這個部份有在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/\">執行環境：創造與提升</a> 提過，<strong>所有 JavaScript 的變數，在一開始都會被設定為 undefined，而 undefined 是 JavaScript 內建的一個特殊的值，表示這個值尚未被定義</strong></p>\n<p>這邊可以用判斷式來測試一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果賦予 a 值的情況下，會出現 ‘a is defined’。<br>而把值去掉的話：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>則是會出現 ‘a is undefined’。</p>\n<h2 id=\"undefined-與-not-defined-差在哪？\"><a href=\"#undefined-與-not-defined-差在哪？\" class=\"headerlink\" title=\"undefined 與 not defined 差在哪？\"></a>undefined 與 not defined 差在哪？</h2><hr>\n<p>接著把 var 去掉，只留下 a，則會出現錯誤，a is not defined。<br>這是因為執行環境被創造時，沒有在記憶體中找到 a。<br>而宣告 <code>var a</code> 時，a 在創造階段就被放進記憶體中，雖然沒有賦予它值，但是確實先給它一個特殊的初始值 undefined，已經在記憶體中佔據了一席之地。</p>\n<h2 id=\"那麼可以設定值為-undefined-嗎？\"><a href=\"#那麼可以設定值為-undefined-嗎？\" class=\"headerlink\" title=\"那麼可以設定值為 undefined 嗎？\"></a>那麼可以設定值為 undefined 嗎？</h2><hr>\n<p>理論上是可以的，來測試看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; undefined;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>雖然 a 給它值，可能想說會是 ‘a is defined’，但是最後的結果會是 ‘a is undefined’。<br>所以這邊就會有問題，萬一想要除錯的話，可能會發生混亂，所以這裏需要注意不要給予賦予變數 undefined 這個特殊關鍵字。</p>\n","site":{"data":{}},"excerpt":"<p>本篇文章會稍微講解 undefined 與 not defined 的差異。</p>","more":"<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><hr>\n<p>先來看一個例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; &quot;Hello World&quot;</span><br></pre></td></tr></table></figure>\n\n<p>當宣告一個變數 a，並指定一個值給它時，再用 <code>console.log</code> 印出 a，不意外的得到賦予它的值。</p>\n<p>但如果把值去掉，再次看 a 會得到什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>結果得到 undefined。</p>\n<h2 id=\"not-defined\"><a href=\"#not-defined\" class=\"headerlink\" title=\"not defined\"></a>not defined</h2><hr>\n<p>那麼如果把 var 跟值去掉的話，只留下 a 會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>會發生錯誤，錯誤訊息為 a is not defined。<br>這邊則會有一個疑問，not defined 跟 undefined 是不同的嗎？</p>\n<p>這個部份有在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/\">執行環境：創造與提升</a> 提過，<strong>所有 JavaScript 的變數，在一開始都會被設定為 undefined，而 undefined 是 JavaScript 內建的一個特殊的值，表示這個值尚未被定義</strong></p>\n<p>這邊可以用判斷式來測試一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果賦予 a 值的情況下，會出現 ‘a is defined’。<br>而把值去掉的話：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>則是會出現 ‘a is undefined’。</p>\n<h2 id=\"undefined-與-not-defined-差在哪？\"><a href=\"#undefined-與-not-defined-差在哪？\" class=\"headerlink\" title=\"undefined 與 not defined 差在哪？\"></a>undefined 與 not defined 差在哪？</h2><hr>\n<p>接著把 var 去掉，只留下 a，則會出現錯誤，a is not defined。<br>這是因為執行環境被創造時，沒有在記憶體中找到 a。<br>而宣告 <code>var a</code> 時，a 在創造階段就被放進記憶體中，雖然沒有賦予它值，但是確實先給它一個特殊的初始值 undefined，已經在記憶體中佔據了一席之地。</p>\n<h2 id=\"那麼可以設定值為-undefined-嗎？\"><a href=\"#那麼可以設定值為-undefined-嗎？\" class=\"headerlink\" title=\"那麼可以設定值為 undefined 嗎？\"></a>那麼可以設定值為 undefined 嗎？</h2><hr>\n<p>理論上是可以的，來測試看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; undefined;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>雖然 a 給它值，可能想說會是 ‘a is defined’，但是最後的結果會是 ‘a is undefined’。<br>所以這邊就會有問題，萬一想要除錯的話，可能會發生混亂，所以這裏需要注意不要給予賦予變數 undefined 這個特殊關鍵字。</p>"},{"title":"JS notice： 語法解析器、詞彙環境、執行環境","keywords":["javascript","JavaScript 全攻略：克服 JS 的奇怪部分"],"decription":"Is a note about JavaScript Understanding the Weird Parts by Anthony Alicea","date":"2020-03-31T16:16:57.000Z","_content":"\n由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 [JavaScript 全攻略：克服 JS 的奇怪部分](https://www.udemy.com/course/javascriptjs/) 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！\n<!--more-->\n\n## 語法解析器 (Syntax Parsers)\n---\n\n首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。\n\n![給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。](https://i.imgur.com/500vRoE.png)\n\n**那麼編譯器是怎麼運作的呢？**\n\n當你輸入一段文字，例如： console.log('Hello')，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 `console.log('Hello')`，就會轉換給電腦看得懂的指令。\n\n## 詞彙環境 (Lexical Environments)\n---\n\n>程式碼在程式中實際所在的位置\n\n詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：\n\n```\nfunction greeting () {\n    var a = 'hello world';\n}\n```\n\n所以語法解析器讀到 `var a = 'hello world'` ，它就會了解說，這一段的位置是在 `greeting()` 這個 function 裡面。\n\n## 執行環境 (Execution Contexts)\n---\n\n一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。\n\n## 資料來源\n---\n\n[圖片來源](https://www.guru99.com/syntax-analysis-parsing-types.html)\n[JavaScript 全攻略：克服 JS 的奇怪部分](https://www.udemy.com/course/javascriptjs/)","source":"_posts/JSnotice：語法解析器、詞彙環境、執行環境.md","raw":"---\ntitle: JS notice： 語法解析器、詞彙環境、執行環境\ntags:\n  - javascript\n  - 語法解析器\n  - 詞彙環境\n  - 執行環境\ncategories: JavaScript 的怪奇物語\nkeywords:\n  - javascript\n  - JavaScript 全攻略：克服 JS 的奇怪部分\ndecription: Is a note about JavaScript Understanding the Weird Parts by Anthony Alicea\ndate: 2020-04-01 00:16:57\n---\n\n由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 [JavaScript 全攻略：克服 JS 的奇怪部分](https://www.udemy.com/course/javascriptjs/) 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！\n<!--more-->\n\n## 語法解析器 (Syntax Parsers)\n---\n\n首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。\n\n![給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。](https://i.imgur.com/500vRoE.png)\n\n**那麼編譯器是怎麼運作的呢？**\n\n當你輸入一段文字，例如： console.log('Hello')，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 `console.log('Hello')`，就會轉換給電腦看得懂的指令。\n\n## 詞彙環境 (Lexical Environments)\n---\n\n>程式碼在程式中實際所在的位置\n\n詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：\n\n```\nfunction greeting () {\n    var a = 'hello world';\n}\n```\n\n所以語法解析器讀到 `var a = 'hello world'` ，它就會了解說，這一段的位置是在 `greeting()` 這個 function 裡面。\n\n## 執行環境 (Execution Contexts)\n---\n\n一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。\n\n## 資料來源\n---\n\n[圖片來源](https://www.guru99.com/syntax-analysis-parsing-types.html)\n[JavaScript 全攻略：克服 JS 的奇怪部分](https://www.udemy.com/course/javascriptjs/)","slug":"JSnotice：語法解析器、詞彙環境、執行環境","published":1,"updated":"2020-04-13T15:31:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwy20007b6u7am81g095","content":"<p>由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 <a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a> 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"語法解析器-Syntax-Parsers\"><a href=\"#語法解析器-Syntax-Parsers\" class=\"headerlink\" title=\"語法解析器 (Syntax Parsers)\"></a>語法解析器 (Syntax Parsers)</h2><hr>\n<p>首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。</p>\n<p><img src=\"https://i.imgur.com/500vRoE.png\" alt=\"給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。\"></p>\n<p><strong>那麼編譯器是怎麼運作的呢？</strong></p>\n<p>當你輸入一段文字，例如： console.log(‘Hello’)，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 <code>console.log(&#39;Hello&#39;)</code>，就會轉換給電腦看得懂的指令。</p>\n<h2 id=\"詞彙環境-Lexical-Environments\"><a href=\"#詞彙環境-Lexical-Environments\" class=\"headerlink\" title=\"詞彙環境 (Lexical Environments)\"></a>詞彙環境 (Lexical Environments)</h2><hr>\n<blockquote>\n<p>程式碼在程式中實際所在的位置</p>\n</blockquote>\n<p>詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function greeting () &#123;</span><br><span class=\"line\">    var a &#x3D; &#39;hello world&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以語法解析器讀到 <code>var a = &#39;hello world&#39;</code> ，它就會了解說，這一段的位置是在 <code>greeting()</code> 這個 function 裡面。</p>\n<h2 id=\"執行環境-Execution-Contexts\"><a href=\"#執行環境-Execution-Contexts\" class=\"headerlink\" title=\"執行環境 (Execution Contexts)\"></a>執行環境 (Execution Contexts)</h2><hr>\n<p>一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><hr>\n<p><a href=\"https://www.guru99.com/syntax-analysis-parsing-types.html\" target=\"_blank\" rel=\"noopener\">圖片來源</a><br><a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a></p>\n","site":{"data":{}},"excerpt":"<p>由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 <a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a> 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！</p>","more":"<h2 id=\"語法解析器-Syntax-Parsers\"><a href=\"#語法解析器-Syntax-Parsers\" class=\"headerlink\" title=\"語法解析器 (Syntax Parsers)\"></a>語法解析器 (Syntax Parsers)</h2><hr>\n<p>首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。</p>\n<p><img src=\"https://i.imgur.com/500vRoE.png\" alt=\"給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。\"></p>\n<p><strong>那麼編譯器是怎麼運作的呢？</strong></p>\n<p>當你輸入一段文字，例如： console.log(‘Hello’)，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 <code>console.log(&#39;Hello&#39;)</code>，就會轉換給電腦看得懂的指令。</p>\n<h2 id=\"詞彙環境-Lexical-Environments\"><a href=\"#詞彙環境-Lexical-Environments\" class=\"headerlink\" title=\"詞彙環境 (Lexical Environments)\"></a>詞彙環境 (Lexical Environments)</h2><hr>\n<blockquote>\n<p>程式碼在程式中實際所在的位置</p>\n</blockquote>\n<p>詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function greeting () &#123;</span><br><span class=\"line\">    var a &#x3D; &#39;hello world&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以語法解析器讀到 <code>var a = &#39;hello world&#39;</code> ，它就會了解說，這一段的位置是在 <code>greeting()</code> 這個 function 裡面。</p>\n<h2 id=\"執行環境-Execution-Contexts\"><a href=\"#執行環境-Execution-Contexts\" class=\"headerlink\" title=\"執行環境 (Execution Contexts)\"></a>執行環境 (Execution Contexts)</h2><hr>\n<p>一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><hr>\n<p><a href=\"https://www.guru99.com/syntax-analysis-parsing-types.html\" target=\"_blank\" rel=\"noopener\">圖片來源</a><br><a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a></p>"},{"title":"JS 基礎回顧 - 迴圈","date":"2020-05-12T08:56:29.000Z","keywords":["迴圈"],"decription":"在 JavaScript 中迴圈的使用。","_content":"迴圈 (Loop) 在 JavaScript 中，當遇到需要重複做某件事時，是個非常好用的方法。而迴圈又分為幾種不同的方式，本篇將會介紹如何使用比較常見的作法。\n<!--more-->\n\n## 迴圈\n---\n\n如果一件重要的事，想要說三次的話，可能會這樣表達：\n\n```\nconsole.log('很重要'); // \"很重要\"\nconsole.log('很重要'); // \"很重要\"\nconsole.log('很重要')  // \"很重要\"\n```\n\n但是在 JavaScript 中，可以使用迴圈來幫助我們更省時省力地來處理這件事：\n\n## for 迴圈\n---\n\nfor 迴圈的用法：\n\n```\nvar i;\n\nfor () {}\n```\n\n{ }中，要重複一直做的事情，例如：\n`{console.log('很重要')}`\n\n( )中，要從哪裏開始，到那裏結束，還有每回合會做什麼事情，例如：\n`for (i = 0; i < 3; i++)`\n上面那段的意思是：i 從 0 開始計算；到 3 的時候結束；i + 1\n寫出來就是這樣：\n\n```\nvar i\nfor (i = 0; i < 3; i++) {\n  console.log('很重要')\n}  // \"很重要\" \"很重要\" \"很重要\"\n```\n\n也可以這樣寫：\n\n```\nfor (var i = 0; i < 3; i++) {\n  console.log('很重要')\n}  // \"很重要\" \"很重要\" \"很重要\"\n```\n\n![Image](https://i.imgur.com/BZlPcjz.png)\n\n畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。\n雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。\n\n綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。\n\n藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。\n\n## while 迴圈\n---\n\n使用 while 迴圈做出上面的動作：\n\n```\nvar i = 0;\n\nwhile (i < 3){\n  console.log('很重要');\n  i++\n}\n```\n\n![Image](https://i.imgur.com/JFFQMSs.png)\n\n括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。\n\n要注意的是在迴圈中，如果第三個條件 `i++` 沒寫的話，會發生什麼事呢？\n第一圈 i = 0，第二圈 i 沒有 + 1，所以一樣是 0，以此類推會一直無線迴圈，所以要特別注意。\n\n## for 的運用\n---\n\n因為 for 迴圈比較常用，所以以下的範例將會使用 for 迴圈來做示範。\n\n###  for - 加總\n\n下方有一個陣列，裡面紀錄著 iPhone 11 系列的價錢，如果想要使用 for 迴圈把價錢全部加總的話，該怎麼做呢？\n\n```\nvar alliphone11 = [\n  {\n    name: 'iPhone 11',\n    price: 24900\n  },\n  \n  {\n    name: 'iPhone 11 Pro',\n    price: 35900\n  },\n  \n  {\n    name: 'iPhone 11 ProMax',\n    price: 39900\n  }\n]\n```\n\n可以設一個變數，值給數字 0，讓它使用 for 迴圈去跑加總：\n\n```\nvar totalPrice = 0;\nvar alliphonelength = alliphone11.length;\n\nfor(var i=0; i<alliphonelength; i++) {\n  totalPrice += alliphone11[i].price\n}\n\nconsole.log(totalPrice)  //  100700\n```\n\n最後 3 次的加總得到 100700。\n\n### for 加上判斷式的運用\n\nfor 迴圈也可以加入 if 來判斷，例如想找出價格超過 3 萬的 iPhone 的話，就可以這麼做：\n\n```\nvar alliphonelength = alliphone11.length;\n\nfor(var i=0; i<alliphonelength; i++) {\n  if(alliphone11[i].price > 30000) {\n    console.log(alliphone11[i].name + '的價格超過 3 萬')\n  }\n}\n\n// \"iPhone 11 Pro的價格超過 3 萬\"\n// \"iPhone 11 ProMax的價格超過 3 萬\"\n```\n\n### break 與 continue\n\n如果在迴圈中，想要提早離開或是跳過其中幾項的話，這時候就可以使用 break 或是 continue。\n\n來看看最近熱門的動物森友會範例，今天如果身上一堆大頭菜想賣的話，可以去 [在線等! 動森揪團工具](https://ac-room.cc/) ~~我賣菜都來這裏~~，島主都會打上目前菜價多少，要多少張機票一趟。\n\n```\nvar turnipExchange = [\n  {\n    name: '莫妮卡',\n    sell: 540,\n    tripTicket: 2 \n  },\n  \n  {\n    name: '小潤',\n    sell: 640,\n    tripTicket: 4 \n  },\n  \n  {\n    name: '傑克',\n    sell: 600,\n    tripTicket: 3 \n  },\n  \n  {\n    name: '阿保',\n    sell: 560,\n    tripTicket: 2\n  }\n]\n```\n\n那麼我們可以來設條件，如果找到符合菜價 550 以上，機票 3 張就可以賣，就不用繼續找下去了。\n\n```\nvar teLength = turnipExchange.length;\n\nfor (var i=0; i<teLength; i++) {\n  if(turnipExchange[i].sell >= 550 && turnipExchange[i].tripTicket <=3) {\n    console.log('我要跟' + turnipExchange[i].name + '賣菜')\n    break;\n  }\n}  // \"我要跟傑克賣菜\"\n```\n\n跑完的結果是 - 我要跟傑克賣菜。\n如果沒有加上 `break` 會怎麼樣呢？\n如果沒有加上 `break` 的條件，for 迴圈會一直跑，再繼續找下一個符合條件的並印出來，會是這樣：\n\n\"我要跟傑克賣菜\"\n\"我要跟阿保賣菜\"\n\n~~除非你有很多大頭菜啦，不然找一個島主來賣就夠了。~~\n\n---\n\n而 break 跟 continue 兩者的功能差別：\n\n* break 會直接跳離迴圈。\n* continue 會跳過一次，然後繼續下一次迴圈。\n\n---\n\n看看 continue 的用法：\n\n假設想要出島找居民，以下是我們找的居民：\n\n```\nvar villagers = [\n  {\n    species: 'cat',\n    name: '艷后'\n  },\n  \n  {\n    species: 'deer',\n    name: '彼得'\n  },\n  \n  {\n    species: 'koala',\n    name: '簡培拉'\n  },\n  \n  {\n    species: 'cat',\n    name: '莎莎'\n  },\n  \n  {\n    species: 'chicken',\n    name: '烏骨雞'\n  }\n]\n```\n\n我們鎖定的對象是貓，所以只要考慮貓就好，其他動物就不考慮了，所以可以這麼做：\n\n```\nvar length = villagers.length;\n\nfor (var i=0; i<length; i++) {\n  if(villagers[i].species !== 'cat') {\n    continue;\n  }\n    console.log(villagers[i].name);\n}\n```\n\n最後得到的是艷后跟莎莎。","source":"_posts/JSreview-loop.md","raw":"---\ntitle: JS 基礎回顧 - 迴圈\ntags:\n  - 迴圈\n  - javascript\n  - w3HexSchool\ndate: 2020-05-12 16:56:29\ncategories: JS 基礎回顧\nkeywords:\n- 迴圈\ndecription: 在 JavaScript 中迴圈的使用。\n---\n迴圈 (Loop) 在 JavaScript 中，當遇到需要重複做某件事時，是個非常好用的方法。而迴圈又分為幾種不同的方式，本篇將會介紹如何使用比較常見的作法。\n<!--more-->\n\n## 迴圈\n---\n\n如果一件重要的事，想要說三次的話，可能會這樣表達：\n\n```\nconsole.log('很重要'); // \"很重要\"\nconsole.log('很重要'); // \"很重要\"\nconsole.log('很重要')  // \"很重要\"\n```\n\n但是在 JavaScript 中，可以使用迴圈來幫助我們更省時省力地來處理這件事：\n\n## for 迴圈\n---\n\nfor 迴圈的用法：\n\n```\nvar i;\n\nfor () {}\n```\n\n{ }中，要重複一直做的事情，例如：\n`{console.log('很重要')}`\n\n( )中，要從哪裏開始，到那裏結束，還有每回合會做什麼事情，例如：\n`for (i = 0; i < 3; i++)`\n上面那段的意思是：i 從 0 開始計算；到 3 的時候結束；i + 1\n寫出來就是這樣：\n\n```\nvar i\nfor (i = 0; i < 3; i++) {\n  console.log('很重要')\n}  // \"很重要\" \"很重要\" \"很重要\"\n```\n\n也可以這樣寫：\n\n```\nfor (var i = 0; i < 3; i++) {\n  console.log('很重要')\n}  // \"很重要\" \"很重要\" \"很重要\"\n```\n\n![Image](https://i.imgur.com/BZlPcjz.png)\n\n畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。\n雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。\n\n綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。\n\n藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。\n\n## while 迴圈\n---\n\n使用 while 迴圈做出上面的動作：\n\n```\nvar i = 0;\n\nwhile (i < 3){\n  console.log('很重要');\n  i++\n}\n```\n\n![Image](https://i.imgur.com/JFFQMSs.png)\n\n括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。\n\n要注意的是在迴圈中，如果第三個條件 `i++` 沒寫的話，會發生什麼事呢？\n第一圈 i = 0，第二圈 i 沒有 + 1，所以一樣是 0，以此類推會一直無線迴圈，所以要特別注意。\n\n## for 的運用\n---\n\n因為 for 迴圈比較常用，所以以下的範例將會使用 for 迴圈來做示範。\n\n###  for - 加總\n\n下方有一個陣列，裡面紀錄著 iPhone 11 系列的價錢，如果想要使用 for 迴圈把價錢全部加總的話，該怎麼做呢？\n\n```\nvar alliphone11 = [\n  {\n    name: 'iPhone 11',\n    price: 24900\n  },\n  \n  {\n    name: 'iPhone 11 Pro',\n    price: 35900\n  },\n  \n  {\n    name: 'iPhone 11 ProMax',\n    price: 39900\n  }\n]\n```\n\n可以設一個變數，值給數字 0，讓它使用 for 迴圈去跑加總：\n\n```\nvar totalPrice = 0;\nvar alliphonelength = alliphone11.length;\n\nfor(var i=0; i<alliphonelength; i++) {\n  totalPrice += alliphone11[i].price\n}\n\nconsole.log(totalPrice)  //  100700\n```\n\n最後 3 次的加總得到 100700。\n\n### for 加上判斷式的運用\n\nfor 迴圈也可以加入 if 來判斷，例如想找出價格超過 3 萬的 iPhone 的話，就可以這麼做：\n\n```\nvar alliphonelength = alliphone11.length;\n\nfor(var i=0; i<alliphonelength; i++) {\n  if(alliphone11[i].price > 30000) {\n    console.log(alliphone11[i].name + '的價格超過 3 萬')\n  }\n}\n\n// \"iPhone 11 Pro的價格超過 3 萬\"\n// \"iPhone 11 ProMax的價格超過 3 萬\"\n```\n\n### break 與 continue\n\n如果在迴圈中，想要提早離開或是跳過其中幾項的話，這時候就可以使用 break 或是 continue。\n\n來看看最近熱門的動物森友會範例，今天如果身上一堆大頭菜想賣的話，可以去 [在線等! 動森揪團工具](https://ac-room.cc/) ~~我賣菜都來這裏~~，島主都會打上目前菜價多少，要多少張機票一趟。\n\n```\nvar turnipExchange = [\n  {\n    name: '莫妮卡',\n    sell: 540,\n    tripTicket: 2 \n  },\n  \n  {\n    name: '小潤',\n    sell: 640,\n    tripTicket: 4 \n  },\n  \n  {\n    name: '傑克',\n    sell: 600,\n    tripTicket: 3 \n  },\n  \n  {\n    name: '阿保',\n    sell: 560,\n    tripTicket: 2\n  }\n]\n```\n\n那麼我們可以來設條件，如果找到符合菜價 550 以上，機票 3 張就可以賣，就不用繼續找下去了。\n\n```\nvar teLength = turnipExchange.length;\n\nfor (var i=0; i<teLength; i++) {\n  if(turnipExchange[i].sell >= 550 && turnipExchange[i].tripTicket <=3) {\n    console.log('我要跟' + turnipExchange[i].name + '賣菜')\n    break;\n  }\n}  // \"我要跟傑克賣菜\"\n```\n\n跑完的結果是 - 我要跟傑克賣菜。\n如果沒有加上 `break` 會怎麼樣呢？\n如果沒有加上 `break` 的條件，for 迴圈會一直跑，再繼續找下一個符合條件的並印出來，會是這樣：\n\n\"我要跟傑克賣菜\"\n\"我要跟阿保賣菜\"\n\n~~除非你有很多大頭菜啦，不然找一個島主來賣就夠了。~~\n\n---\n\n而 break 跟 continue 兩者的功能差別：\n\n* break 會直接跳離迴圈。\n* continue 會跳過一次，然後繼續下一次迴圈。\n\n---\n\n看看 continue 的用法：\n\n假設想要出島找居民，以下是我們找的居民：\n\n```\nvar villagers = [\n  {\n    species: 'cat',\n    name: '艷后'\n  },\n  \n  {\n    species: 'deer',\n    name: '彼得'\n  },\n  \n  {\n    species: 'koala',\n    name: '簡培拉'\n  },\n  \n  {\n    species: 'cat',\n    name: '莎莎'\n  },\n  \n  {\n    species: 'chicken',\n    name: '烏骨雞'\n  }\n]\n```\n\n我們鎖定的對象是貓，所以只要考慮貓就好，其他動物就不考慮了，所以可以這麼做：\n\n```\nvar length = villagers.length;\n\nfor (var i=0; i<length; i++) {\n  if(villagers[i].species !== 'cat') {\n    continue;\n  }\n    console.log(villagers[i].name);\n}\n```\n\n最後得到的是艷后跟莎莎。","slug":"JSreview-loop","published":1,"updated":"2020-05-16T03:10:39.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwy40009b6u75igcfywx","content":"<p>迴圈 (Loop) 在 JavaScript 中，當遇到需要重複做某件事時，是個非常好用的方法。而迴圈又分為幾種不同的方式，本篇將會介紹如何使用比較常見的作法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"迴圈\"><a href=\"#迴圈\" class=\"headerlink\" title=\"迴圈\"></a>迴圈</h2><hr>\n<p>如果一件重要的事，想要說三次的話，可能會這樣表達：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;)  &#x2F;&#x2F; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是在 JavaScript 中，可以使用迴圈來幫助我們更省時省力地來處理這件事：</p>\n<h2 id=\"for-迴圈\"><a href=\"#for-迴圈\" class=\"headerlink\" title=\"for 迴圈\"></a>for 迴圈</h2><hr>\n<p>for 迴圈的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i;</span><br><span class=\"line\"></span><br><span class=\"line\">for () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>{ }中，要重複一直做的事情，例如：<br><code>{console.log(&#39;很重要&#39;)}</code></p>\n<p>( )中，要從哪裏開始，到那裏結束，還有每回合會做什麼事情，例如：<br><code>for (i = 0; i &lt; 3; i++)</code><br>上面那段的意思是：i 從 0 開始計算；到 3 的時候結束；i + 1<br>寫出來就是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i</span><br><span class=\"line\">for (i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/BZlPcjz.png\" alt=\"Image\"></p>\n<p>畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。<br>雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。</p>\n<p>綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。</p>\n<h2 id=\"while-迴圈\"><a href=\"#while-迴圈\" class=\"headerlink\" title=\"while 迴圈\"></a>while 迴圈</h2><hr>\n<p>使用 while 迴圈做出上面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">while (i &lt; 3)&#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;);</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/JFFQMSs.png\" alt=\"Image\"></p>\n<p>括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>要注意的是在迴圈中，如果第三個條件 <code>i++</code> 沒寫的話，會發生什麼事呢？<br>第一圈 i = 0，第二圈 i 沒有 + 1，所以一樣是 0，以此類推會一直無線迴圈，所以要特別注意。</p>\n<h2 id=\"for-的運用\"><a href=\"#for-的運用\" class=\"headerlink\" title=\"for 的運用\"></a>for 的運用</h2><hr>\n<p>因為 for 迴圈比較常用，所以以下的範例將會使用 for 迴圈來做示範。</p>\n<h3 id=\"for-加總\"><a href=\"#for-加總\" class=\"headerlink\" title=\"for - 加總\"></a>for - 加總</h3><p>下方有一個陣列，裡面紀錄著 iPhone 11 系列的價錢，如果想要使用 for 迴圈把價錢全部加總的話，該怎麼做呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var alliphone11 &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    price: 24900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    price: 35900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 ProMax&#39;,</span><br><span class=\"line\">    price: 39900</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以設一個變數，值給數字 0，讓它使用 for 迴圈去跑加總：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var totalPrice &#x3D; 0;</span><br><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  totalPrice +&#x3D; alliphone11[i].price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(totalPrice)  &#x2F;&#x2F;  100700</span><br></pre></td></tr></table></figure>\n\n<p>最後 3 次的加總得到 100700。</p>\n<h3 id=\"for-加上判斷式的運用\"><a href=\"#for-加上判斷式的運用\" class=\"headerlink\" title=\"for 加上判斷式的運用\"></a>for 加上判斷式的運用</h3><p>for 迴圈也可以加入 if 來判斷，例如想找出價格超過 3 萬的 iPhone 的話，就可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  if(alliphone11[i].price &gt; 30000) &#123;</span><br><span class=\"line\">    console.log(alliphone11[i].name + &#39;的價格超過 3 萬&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 Pro的價格超過 3 萬&quot;</span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 ProMax的價格超過 3 萬&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-與-continue\"><a href=\"#break-與-continue\" class=\"headerlink\" title=\"break 與 continue\"></a>break 與 continue</h3><p>如果在迴圈中，想要提早離開或是跳過其中幾項的話，這時候就可以使用 break 或是 continue。</p>\n<p>來看看最近熱門的動物森友會範例，今天如果身上一堆大頭菜想賣的話，可以去 <a href=\"https://ac-room.cc/\" target=\"_blank\" rel=\"noopener\">在線等! 動森揪團工具</a> <del>我賣菜都來這裏</del>，島主都會打上目前菜價多少，要多少張機票一趟。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var turnipExchange &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;莫妮卡&#39;,</span><br><span class=\"line\">    sell: 540,</span><br><span class=\"line\">    tripTicket: 2 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;小潤&#39;,</span><br><span class=\"line\">    sell: 640,</span><br><span class=\"line\">    tripTicket: 4 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;傑克&#39;,</span><br><span class=\"line\">    sell: 600,</span><br><span class=\"line\">    tripTicket: 3 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;阿保&#39;,</span><br><span class=\"line\">    sell: 560,</span><br><span class=\"line\">    tripTicket: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>那麼我們可以來設條件，如果找到符合菜價 550 以上，機票 3 張就可以賣，就不用繼續找下去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var teLength &#x3D; turnipExchange.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;teLength; i++) &#123;</span><br><span class=\"line\">  if(turnipExchange[i].sell &gt;&#x3D; 550 &amp;&amp; turnipExchange[i].tripTicket &lt;&#x3D;3) &#123;</span><br><span class=\"line\">    console.log(&#39;我要跟&#39; + turnipExchange[i].name + &#39;賣菜&#39;)</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;我要跟傑克賣菜&quot;</span><br></pre></td></tr></table></figure>\n\n<p>跑完的結果是 - 我要跟傑克賣菜。<br>如果沒有加上 <code>break</code> 會怎麼樣呢？<br>如果沒有加上 <code>break</code> 的條件，for 迴圈會一直跑，再繼續找下一個符合條件的並印出來，會是這樣：</p>\n<p>“我要跟傑克賣菜”<br>“我要跟阿保賣菜”</p>\n<p><del>除非你有很多大頭菜啦，不然找一個島主來賣就夠了。</del></p>\n<hr>\n<p>而 break 跟 continue 兩者的功能差別：</p>\n<ul>\n<li>break 會直接跳離迴圈。</li>\n<li>continue 會跳過一次，然後繼續下一次迴圈。</li>\n</ul>\n<hr>\n<p>看看 continue 的用法：</p>\n<p>假設想要出島找居民，以下是我們找的居民：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var villagers &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;艷后&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;deer&#39;,</span><br><span class=\"line\">    name: &#39;彼得&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;koala&#39;,</span><br><span class=\"line\">    name: &#39;簡培拉&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;莎莎&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;chicken&#39;,</span><br><span class=\"line\">    name: &#39;烏骨雞&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我們鎖定的對象是貓，所以只要考慮貓就好，其他動物就不考慮了，所以可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var length &#x3D; villagers.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class=\"line\">  if(villagers[i].species !&#x3D;&#x3D; &#39;cat&#39;) &#123;</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    console.log(villagers[i].name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的是艷后跟莎莎。</p>\n","site":{"data":{}},"excerpt":"<p>迴圈 (Loop) 在 JavaScript 中，當遇到需要重複做某件事時，是個非常好用的方法。而迴圈又分為幾種不同的方式，本篇將會介紹如何使用比較常見的作法。</p>","more":"<h2 id=\"迴圈\"><a href=\"#迴圈\" class=\"headerlink\" title=\"迴圈\"></a>迴圈</h2><hr>\n<p>如果一件重要的事，想要說三次的話，可能會這樣表達：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;)  &#x2F;&#x2F; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是在 JavaScript 中，可以使用迴圈來幫助我們更省時省力地來處理這件事：</p>\n<h2 id=\"for-迴圈\"><a href=\"#for-迴圈\" class=\"headerlink\" title=\"for 迴圈\"></a>for 迴圈</h2><hr>\n<p>for 迴圈的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i;</span><br><span class=\"line\"></span><br><span class=\"line\">for () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>{ }中，要重複一直做的事情，例如：<br><code>{console.log(&#39;很重要&#39;)}</code></p>\n<p>( )中，要從哪裏開始，到那裏結束，還有每回合會做什麼事情，例如：<br><code>for (i = 0; i &lt; 3; i++)</code><br>上面那段的意思是：i 從 0 開始計算；到 3 的時候結束；i + 1<br>寫出來就是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i</span><br><span class=\"line\">for (i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/BZlPcjz.png\" alt=\"Image\"></p>\n<p>畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。<br>雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。</p>\n<p>綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。</p>\n<h2 id=\"while-迴圈\"><a href=\"#while-迴圈\" class=\"headerlink\" title=\"while 迴圈\"></a>while 迴圈</h2><hr>\n<p>使用 while 迴圈做出上面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">while (i &lt; 3)&#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;);</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/JFFQMSs.png\" alt=\"Image\"></p>\n<p>括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>要注意的是在迴圈中，如果第三個條件 <code>i++</code> 沒寫的話，會發生什麼事呢？<br>第一圈 i = 0，第二圈 i 沒有 + 1，所以一樣是 0，以此類推會一直無線迴圈，所以要特別注意。</p>\n<h2 id=\"for-的運用\"><a href=\"#for-的運用\" class=\"headerlink\" title=\"for 的運用\"></a>for 的運用</h2><hr>\n<p>因為 for 迴圈比較常用，所以以下的範例將會使用 for 迴圈來做示範。</p>\n<h3 id=\"for-加總\"><a href=\"#for-加總\" class=\"headerlink\" title=\"for - 加總\"></a>for - 加總</h3><p>下方有一個陣列，裡面紀錄著 iPhone 11 系列的價錢，如果想要使用 for 迴圈把價錢全部加總的話，該怎麼做呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var alliphone11 &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    price: 24900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    price: 35900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 ProMax&#39;,</span><br><span class=\"line\">    price: 39900</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以設一個變數，值給數字 0，讓它使用 for 迴圈去跑加總：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var totalPrice &#x3D; 0;</span><br><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  totalPrice +&#x3D; alliphone11[i].price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(totalPrice)  &#x2F;&#x2F;  100700</span><br></pre></td></tr></table></figure>\n\n<p>最後 3 次的加總得到 100700。</p>\n<h3 id=\"for-加上判斷式的運用\"><a href=\"#for-加上判斷式的運用\" class=\"headerlink\" title=\"for 加上判斷式的運用\"></a>for 加上判斷式的運用</h3><p>for 迴圈也可以加入 if 來判斷，例如想找出價格超過 3 萬的 iPhone 的話，就可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  if(alliphone11[i].price &gt; 30000) &#123;</span><br><span class=\"line\">    console.log(alliphone11[i].name + &#39;的價格超過 3 萬&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 Pro的價格超過 3 萬&quot;</span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 ProMax的價格超過 3 萬&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-與-continue\"><a href=\"#break-與-continue\" class=\"headerlink\" title=\"break 與 continue\"></a>break 與 continue</h3><p>如果在迴圈中，想要提早離開或是跳過其中幾項的話，這時候就可以使用 break 或是 continue。</p>\n<p>來看看最近熱門的動物森友會範例，今天如果身上一堆大頭菜想賣的話，可以去 <a href=\"https://ac-room.cc/\" target=\"_blank\" rel=\"noopener\">在線等! 動森揪團工具</a> <del>我賣菜都來這裏</del>，島主都會打上目前菜價多少，要多少張機票一趟。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var turnipExchange &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;莫妮卡&#39;,</span><br><span class=\"line\">    sell: 540,</span><br><span class=\"line\">    tripTicket: 2 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;小潤&#39;,</span><br><span class=\"line\">    sell: 640,</span><br><span class=\"line\">    tripTicket: 4 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;傑克&#39;,</span><br><span class=\"line\">    sell: 600,</span><br><span class=\"line\">    tripTicket: 3 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;阿保&#39;,</span><br><span class=\"line\">    sell: 560,</span><br><span class=\"line\">    tripTicket: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>那麼我們可以來設條件，如果找到符合菜價 550 以上，機票 3 張就可以賣，就不用繼續找下去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var teLength &#x3D; turnipExchange.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;teLength; i++) &#123;</span><br><span class=\"line\">  if(turnipExchange[i].sell &gt;&#x3D; 550 &amp;&amp; turnipExchange[i].tripTicket &lt;&#x3D;3) &#123;</span><br><span class=\"line\">    console.log(&#39;我要跟&#39; + turnipExchange[i].name + &#39;賣菜&#39;)</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;我要跟傑克賣菜&quot;</span><br></pre></td></tr></table></figure>\n\n<p>跑完的結果是 - 我要跟傑克賣菜。<br>如果沒有加上 <code>break</code> 會怎麼樣呢？<br>如果沒有加上 <code>break</code> 的條件，for 迴圈會一直跑，再繼續找下一個符合條件的並印出來，會是這樣：</p>\n<p>“我要跟傑克賣菜”<br>“我要跟阿保賣菜”</p>\n<p><del>除非你有很多大頭菜啦，不然找一個島主來賣就夠了。</del></p>\n<hr>\n<p>而 break 跟 continue 兩者的功能差別：</p>\n<ul>\n<li>break 會直接跳離迴圈。</li>\n<li>continue 會跳過一次，然後繼續下一次迴圈。</li>\n</ul>\n<hr>\n<p>看看 continue 的用法：</p>\n<p>假設想要出島找居民，以下是我們找的居民：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var villagers &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;艷后&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;deer&#39;,</span><br><span class=\"line\">    name: &#39;彼得&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;koala&#39;,</span><br><span class=\"line\">    name: &#39;簡培拉&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;莎莎&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;chicken&#39;,</span><br><span class=\"line\">    name: &#39;烏骨雞&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我們鎖定的對象是貓，所以只要考慮貓就好，其他動物就不考慮了，所以可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var length &#x3D; villagers.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class=\"line\">  if(villagers[i].species !&#x3D;&#x3D; &#39;cat&#39;) &#123;</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    console.log(villagers[i].name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的是艷后跟莎莎。</p>"},{"title":"JS 基礎回顧 - function","date":"2020-04-11T03:29:52.000Z","keywords":["function","函式宣告","匿名函式","回傳值"],"decription":"有關 function 中的宣告及運作、回傳值，及匿名函式。","_content":"在看 kuro 大神寫的 [0 陷阱！0 誤解！8 天重新認識 JavaScript！](https://www.tenlong.com.tw/products/9789864344130)（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？\n<!--more-->\n\n## 函式宣告\n---\n\n```\nfunction sayhello() {\n  console.log ('hi')\n}\n\nsayhello()  // 印出'hi'\n```\n\n如上面的例子可以看到，函式的宣告及呼叫的運作。\n\n![Image](https://i.imgur.com/HRVJOZV.png)\n\n一個宣告函式主要會包含三個部份：\n\n* 函式的名稱（或是可能沒有名稱）。\n* 小括號 () 中的部份是參數，可以帶入無限個。\n* 大括號 {} 中的部份，是主要區塊，放重複執行的內容。\n\n再看一個帶入參數的例子，如果想要得到正方形的面積的話，公式是邊長 x 邊長，所以在 function 中可以這樣寫：\n\n```\nfunction getSquareArea (side) {\n  var answer = side * side\n  console.log(answer)\n}\n\ngetSquareArea(50)  // 引數帶入數值 50，答案得到 2500\n```\n\n當呼叫一個需要帶入資料的函式，像上面的例子，在函式名稱後的小括號 () 傳入使用的值，可以是變數或是數值，稱為**引數**。\n\n### 回傳值\n---\n\n在建立 function，如果希望透過呼叫後可以得到回應結果，可以透過 return 來取得回傳值，例如：\n\n```\nfunction isPass (score) {\n  return (score >= 60)     // 回傳是不是 60 分\n}\n\nvar myTest = 59;          \n\nif (isPass(myTest)) {      \n  console.log('及格')      // 如果就印出及格\n} else {\n  console.log('不及格')    // 如果不是就印出不及格，最後結果是不及格\n}\n```\n\n再看一個例子，試著計算三角形的面積，公式是底 x 高 / 2，這次引數以變數方式帶入，所以可以這樣寫：\n\n```\nfunction getTriangleArea (base, height) {\n  return base * height * 0.5\n} \n\n// 用變數帶入底10，高20\nvar b = 10;\nvar h = 20\nconsole.log(getTriangleArea (b, h)) // 得到答案 100\n```\n\n還可以重複使用：\n\n```\nvar area1 = getTriangleArea (50, 60);\nvar area2 = getTriangleArea (90, 200);\n\nconsole.log(area1); // 得到答案 1500\nconsole.log(area2)  // 得到答案 9000\n```\n\n## 匿名函式\n---\n\n在上一個函式中的寫法是：\n\n```\nfunction isPass (score) {\n  return (score >= 60)   \n}\n```\n\n而在另一種的寫法，透過`變數名稱 = function ([參數] {...})`,將一個函式透過 = 指定給某個變數：\n\n```\n// function 後面沒有名稱\nvar isPass = function (score) {\n  return (score >= 60)\n}\n```\n\n因為在變數型別中，除了基本型別以外的都是**物件型別**，所以可以被呼叫，自然也可以透過變數存入。\n\n也由於在這個例子中，function 後面沒有名稱，所以是**匿名函式**。\n\n如果要替它加上名稱也是可以，例如：\n\n```\nvar isPass = function func(score) {\n  return (score >= 60)\n}\n```\n\n但是要注意的是，這個 func 只在**自己函式範圍**有效，看以下的例子：\n\n```\nvar isPass = function func (score) {\n  console.log(typeof func);  // 使用 typeof 可以判斷型別\n  return (score >= 60)\n}\n\nconsole.log(typeof func);\n```\n\n上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。\n\n不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：\n\n```\nvar isPass = function func (score) {\n  console.log(typeof isPass);\n  return (score >= 60)\n}\n\nconsole.log(typeof isPass)\n```\n\n2 個 console.log 結果都會顯示 function。\n","source":"_posts/JS基礎回顧-function.md","raw":"---\ntitle: JS 基礎回顧 - function\ntags:\n  - function\n  - 匿名函式\ndate: 2020-04-11 11:29:52\ncategories: JS 基礎回顧\nkeywords:\n- function\n- 函式宣告\n- 匿名函式\n- 回傳值\ndecription: 有關 function 中的宣告及運作、回傳值，及匿名函式。\n---\n在看 kuro 大神寫的 [0 陷阱！0 誤解！8 天重新認識 JavaScript！](https://www.tenlong.com.tw/products/9789864344130)（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？\n<!--more-->\n\n## 函式宣告\n---\n\n```\nfunction sayhello() {\n  console.log ('hi')\n}\n\nsayhello()  // 印出'hi'\n```\n\n如上面的例子可以看到，函式的宣告及呼叫的運作。\n\n![Image](https://i.imgur.com/HRVJOZV.png)\n\n一個宣告函式主要會包含三個部份：\n\n* 函式的名稱（或是可能沒有名稱）。\n* 小括號 () 中的部份是參數，可以帶入無限個。\n* 大括號 {} 中的部份，是主要區塊，放重複執行的內容。\n\n再看一個帶入參數的例子，如果想要得到正方形的面積的話，公式是邊長 x 邊長，所以在 function 中可以這樣寫：\n\n```\nfunction getSquareArea (side) {\n  var answer = side * side\n  console.log(answer)\n}\n\ngetSquareArea(50)  // 引數帶入數值 50，答案得到 2500\n```\n\n當呼叫一個需要帶入資料的函式，像上面的例子，在函式名稱後的小括號 () 傳入使用的值，可以是變數或是數值，稱為**引數**。\n\n### 回傳值\n---\n\n在建立 function，如果希望透過呼叫後可以得到回應結果，可以透過 return 來取得回傳值，例如：\n\n```\nfunction isPass (score) {\n  return (score >= 60)     // 回傳是不是 60 分\n}\n\nvar myTest = 59;          \n\nif (isPass(myTest)) {      \n  console.log('及格')      // 如果就印出及格\n} else {\n  console.log('不及格')    // 如果不是就印出不及格，最後結果是不及格\n}\n```\n\n再看一個例子，試著計算三角形的面積，公式是底 x 高 / 2，這次引數以變數方式帶入，所以可以這樣寫：\n\n```\nfunction getTriangleArea (base, height) {\n  return base * height * 0.5\n} \n\n// 用變數帶入底10，高20\nvar b = 10;\nvar h = 20\nconsole.log(getTriangleArea (b, h)) // 得到答案 100\n```\n\n還可以重複使用：\n\n```\nvar area1 = getTriangleArea (50, 60);\nvar area2 = getTriangleArea (90, 200);\n\nconsole.log(area1); // 得到答案 1500\nconsole.log(area2)  // 得到答案 9000\n```\n\n## 匿名函式\n---\n\n在上一個函式中的寫法是：\n\n```\nfunction isPass (score) {\n  return (score >= 60)   \n}\n```\n\n而在另一種的寫法，透過`變數名稱 = function ([參數] {...})`,將一個函式透過 = 指定給某個變數：\n\n```\n// function 後面沒有名稱\nvar isPass = function (score) {\n  return (score >= 60)\n}\n```\n\n因為在變數型別中，除了基本型別以外的都是**物件型別**，所以可以被呼叫，自然也可以透過變數存入。\n\n也由於在這個例子中，function 後面沒有名稱，所以是**匿名函式**。\n\n如果要替它加上名稱也是可以，例如：\n\n```\nvar isPass = function func(score) {\n  return (score >= 60)\n}\n```\n\n但是要注意的是，這個 func 只在**自己函式範圍**有效，看以下的例子：\n\n```\nvar isPass = function func (score) {\n  console.log(typeof func);  // 使用 typeof 可以判斷型別\n  return (score >= 60)\n}\n\nconsole.log(typeof func);\n```\n\n上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。\n\n不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：\n\n```\nvar isPass = function func (score) {\n  console.log(typeof isPass);\n  return (score >= 60)\n}\n\nconsole.log(typeof isPass)\n```\n\n2 個 console.log 結果都會顯示 function。\n","slug":"JS基礎回顧-function","published":1,"updated":"2020-04-20T15:41:08.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwy5000ab6u728xcegjs","content":"<p>在看 kuro 大神寫的 <a href=\"https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a>（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayhello() &#123;</span><br><span class=\"line\">  console.log (&#39;hi&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayhello()  &#x2F;&#x2F; 印出&#39;hi&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如上面的例子可以看到，函式的宣告及呼叫的運作。</p>\n<p><img src=\"https://i.imgur.com/HRVJOZV.png\" alt=\"Image\"></p>\n<p>一個宣告函式主要會包含三個部份：</p>\n<ul>\n<li>函式的名稱（或是可能沒有名稱）。</li>\n<li>小括號 () 中的部份是參數，可以帶入無限個。</li>\n<li>大括號 {} 中的部份，是主要區塊，放重複執行的內容。</li>\n</ul>\n<p>再看一個帶入參數的例子，如果想要得到正方形的面積的話，公式是邊長 x 邊長，所以在 function 中可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getSquareArea (side) &#123;</span><br><span class=\"line\">  var answer &#x3D; side * side</span><br><span class=\"line\">  console.log(answer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getSquareArea(50)  &#x2F;&#x2F; 引數帶入數值 50，答案得到 2500</span><br></pre></td></tr></table></figure>\n\n<p>當呼叫一個需要帶入資料的函式，像上面的例子，在函式名稱後的小括號 () 傳入使用的值，可以是變數或是數值，稱為<strong>引數</strong>。</p>\n<h3 id=\"回傳值\"><a href=\"#回傳值\" class=\"headerlink\" title=\"回傳值\"></a>回傳值</h3><hr>\n<p>在建立 function，如果希望透過呼叫後可以得到回應結果，可以透過 return 來取得回傳值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)     &#x2F;&#x2F; 回傳是不是 60 分</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myTest &#x3D; 59;          </span><br><span class=\"line\"></span><br><span class=\"line\">if (isPass(myTest)) &#123;      </span><br><span class=\"line\">  console.log(&#39;及格&#39;)      &#x2F;&#x2F; 如果就印出及格</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;不及格&#39;)    &#x2F;&#x2F; 如果不是就印出不及格，最後結果是不及格</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看一個例子，試著計算三角形的面積，公式是底 x 高 / 2，這次引數以變數方式帶入，所以可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getTriangleArea (base, height) &#123;</span><br><span class=\"line\">  return base * height * 0.5</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 用變數帶入底10，高20</span><br><span class=\"line\">var b &#x3D; 10;</span><br><span class=\"line\">var h &#x3D; 20</span><br><span class=\"line\">console.log(getTriangleArea (b, h)) &#x2F;&#x2F; 得到答案 100</span><br></pre></td></tr></table></figure>\n\n<p>還可以重複使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var area1 &#x3D; getTriangleArea (50, 60);</span><br><span class=\"line\">var area2 &#x3D; getTriangleArea (90, 200);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(area1); &#x2F;&#x2F; 得到答案 1500</span><br><span class=\"line\">console.log(area2)  &#x2F;&#x2F; 得到答案 9000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函式\"><a href=\"#匿名函式\" class=\"headerlink\" title=\"匿名函式\"></a>匿名函式</h2><hr>\n<p>在上一個函式中的寫法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在另一種的寫法，透過<code>變數名稱 = function ([參數] {...})</code>,將一個函式透過 = 指定給某個變數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; function 後面沒有名稱</span><br><span class=\"line\">var isPass &#x3D; function (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為在變數型別中，除了基本型別以外的都是<strong>物件型別</strong>，所以可以被呼叫，自然也可以透過變數存入。</p>\n<p>也由於在這個例子中，function 後面沒有名稱，所以是<strong>匿名函式</strong>。</p>\n<p>如果要替它加上名稱也是可以，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func(score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是要注意的是，這個 func 只在<strong>自己函式範圍</strong>有效，看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof func);  &#x2F;&#x2F; 使用 typeof 可以判斷型別</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof func);</span><br></pre></td></tr></table></figure>\n\n<p>上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。</p>\n<p>不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof isPass);</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof isPass)</span><br></pre></td></tr></table></figure>\n\n<p>2 個 console.log 結果都會顯示 function。</p>\n","site":{"data":{}},"excerpt":"<p>在看 kuro 大神寫的 <a href=\"https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a>（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？</p>","more":"<h2 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayhello() &#123;</span><br><span class=\"line\">  console.log (&#39;hi&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayhello()  &#x2F;&#x2F; 印出&#39;hi&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如上面的例子可以看到，函式的宣告及呼叫的運作。</p>\n<p><img src=\"https://i.imgur.com/HRVJOZV.png\" alt=\"Image\"></p>\n<p>一個宣告函式主要會包含三個部份：</p>\n<ul>\n<li>函式的名稱（或是可能沒有名稱）。</li>\n<li>小括號 () 中的部份是參數，可以帶入無限個。</li>\n<li>大括號 {} 中的部份，是主要區塊，放重複執行的內容。</li>\n</ul>\n<p>再看一個帶入參數的例子，如果想要得到正方形的面積的話，公式是邊長 x 邊長，所以在 function 中可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getSquareArea (side) &#123;</span><br><span class=\"line\">  var answer &#x3D; side * side</span><br><span class=\"line\">  console.log(answer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getSquareArea(50)  &#x2F;&#x2F; 引數帶入數值 50，答案得到 2500</span><br></pre></td></tr></table></figure>\n\n<p>當呼叫一個需要帶入資料的函式，像上面的例子，在函式名稱後的小括號 () 傳入使用的值，可以是變數或是數值，稱為<strong>引數</strong>。</p>\n<h3 id=\"回傳值\"><a href=\"#回傳值\" class=\"headerlink\" title=\"回傳值\"></a>回傳值</h3><hr>\n<p>在建立 function，如果希望透過呼叫後可以得到回應結果，可以透過 return 來取得回傳值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)     &#x2F;&#x2F; 回傳是不是 60 分</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myTest &#x3D; 59;          </span><br><span class=\"line\"></span><br><span class=\"line\">if (isPass(myTest)) &#123;      </span><br><span class=\"line\">  console.log(&#39;及格&#39;)      &#x2F;&#x2F; 如果就印出及格</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;不及格&#39;)    &#x2F;&#x2F; 如果不是就印出不及格，最後結果是不及格</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看一個例子，試著計算三角形的面積，公式是底 x 高 / 2，這次引數以變數方式帶入，所以可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getTriangleArea (base, height) &#123;</span><br><span class=\"line\">  return base * height * 0.5</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 用變數帶入底10，高20</span><br><span class=\"line\">var b &#x3D; 10;</span><br><span class=\"line\">var h &#x3D; 20</span><br><span class=\"line\">console.log(getTriangleArea (b, h)) &#x2F;&#x2F; 得到答案 100</span><br></pre></td></tr></table></figure>\n\n<p>還可以重複使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var area1 &#x3D; getTriangleArea (50, 60);</span><br><span class=\"line\">var area2 &#x3D; getTriangleArea (90, 200);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(area1); &#x2F;&#x2F; 得到答案 1500</span><br><span class=\"line\">console.log(area2)  &#x2F;&#x2F; 得到答案 9000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函式\"><a href=\"#匿名函式\" class=\"headerlink\" title=\"匿名函式\"></a>匿名函式</h2><hr>\n<p>在上一個函式中的寫法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在另一種的寫法，透過<code>變數名稱 = function ([參數] {...})</code>,將一個函式透過 = 指定給某個變數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; function 後面沒有名稱</span><br><span class=\"line\">var isPass &#x3D; function (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為在變數型別中，除了基本型別以外的都是<strong>物件型別</strong>，所以可以被呼叫，自然也可以透過變數存入。</p>\n<p>也由於在這個例子中，function 後面沒有名稱，所以是<strong>匿名函式</strong>。</p>\n<p>如果要替它加上名稱也是可以，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func(score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是要注意的是，這個 func 只在<strong>自己函式範圍</strong>有效，看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof func);  &#x2F;&#x2F; 使用 typeof 可以判斷型別</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof func);</span><br></pre></td></tr></table></figure>\n\n<p>上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。</p>\n<p>不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof isPass);</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof isPass)</span><br></pre></td></tr></table></figure>\n\n<p>2 個 console.log 結果都會顯示 function。</p>"},{"title":"JS notice： 名稱/值配對與物件","keywords":["javascript","JavaScript 全攻略：克服 JS 的奇怪部分","物件"],"decription":"物件在 JavaScript 的意義","_content":"這篇會稍微了解物件在 JavaScript 中的判別。\n<!--more-->\n\n## 名稱/值配對\n---\n\n首先，**名稱/值**的配對，代表一個名稱會對應到唯一的值，例如：\n\n```\nyear = 2020\n```\n\n嗯，就這樣而已，不用想的太複雜。\n\n## 物件\n---\n\n物件在 JavaScript 中也是名稱與值的配對組合，例如：\n\n```\n{\n  dcHero: \"Batman\"\n}\n```\n\n而這個名稱或值甚至可以是多種名稱/值的配對，例如：\n\n```\nvar dcHero = {\n  name: 'Batman',\n  skill: ['有錢', '有高級裝備', '潛行'],\n  location: {\n    place: '高譚市',\n    base: '韋恩豪宅'\n  }\n}\n```\n\n就算是這樣多層的關係，也可以看得出名稱/值的關係，不用想的太複雜。","source":"_posts/JSnotice：值配對與物件.md","raw":"---\ntitle: 'JS notice： 名稱/值配對與物件'\ntags:\n  - javascript\n  - 物件\ncategories: JavaScript 的怪奇物語\nkeywords:\n  - javascript\n  - JavaScript 全攻略：克服 JS 的奇怪部分\n  - 物件\ndecription: 物件在 JavaScript 的意義\n---\n這篇會稍微了解物件在 JavaScript 中的判別。\n<!--more-->\n\n## 名稱/值配對\n---\n\n首先，**名稱/值**的配對，代表一個名稱會對應到唯一的值，例如：\n\n```\nyear = 2020\n```\n\n嗯，就這樣而已，不用想的太複雜。\n\n## 物件\n---\n\n物件在 JavaScript 中也是名稱與值的配對組合，例如：\n\n```\n{\n  dcHero: \"Batman\"\n}\n```\n\n而這個名稱或值甚至可以是多種名稱/值的配對，例如：\n\n```\nvar dcHero = {\n  name: 'Batman',\n  skill: ['有錢', '有高級裝備', '潛行'],\n  location: {\n    place: '高譚市',\n    base: '韋恩豪宅'\n  }\n}\n```\n\n就算是這樣多層的關係，也可以看得出名稱/值的關係，不用想的太複雜。","slug":"JSnotice：值配對與物件","published":1,"date":"2020-04-13T09:33:26.318Z","updated":"2020-04-13T15:30:31.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwy7000db6u7dv6k7rj1","content":"<p>這篇會稍微了解物件在 JavaScript 中的判別。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"名稱-值配對\"><a href=\"#名稱-值配對\" class=\"headerlink\" title=\"名稱/值配對\"></a>名稱/值配對</h2><hr>\n<p>首先，<strong>名稱/值</strong>的配對，代表一個名稱會對應到唯一的值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year &#x3D; 2020</span><br></pre></td></tr></table></figure>\n\n<p>嗯，就這樣而已，不用想的太複雜。</p>\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>物件在 JavaScript 中也是名稱與值的配對組合，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  dcHero: &quot;Batman&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而這個名稱或值甚至可以是多種名稱/值的配對，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dcHero &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;Batman&#39;,</span><br><span class=\"line\">  skill: [&#39;有錢&#39;, &#39;有高級裝備&#39;, &#39;潛行&#39;],</span><br><span class=\"line\">  location: &#123;</span><br><span class=\"line\">    place: &#39;高譚市&#39;,</span><br><span class=\"line\">    base: &#39;韋恩豪宅&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就算是這樣多層的關係，也可以看得出名稱/值的關係，不用想的太複雜。</p>\n","site":{"data":{}},"excerpt":"<p>這篇會稍微了解物件在 JavaScript 中的判別。</p>","more":"<h2 id=\"名稱-值配對\"><a href=\"#名稱-值配對\" class=\"headerlink\" title=\"名稱/值配對\"></a>名稱/值配對</h2><hr>\n<p>首先，<strong>名稱/值</strong>的配對，代表一個名稱會對應到唯一的值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year &#x3D; 2020</span><br></pre></td></tr></table></figure>\n\n<p>嗯，就這樣而已，不用想的太複雜。</p>\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>物件在 JavaScript 中也是名稱與值的配對組合，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  dcHero: &quot;Batman&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而這個名稱或值甚至可以是多種名稱/值的配對，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var dcHero &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;Batman&#39;,</span><br><span class=\"line\">  skill: [&#39;有錢&#39;, &#39;有高級裝備&#39;, &#39;潛行&#39;],</span><br><span class=\"line\">  location: &#123;</span><br><span class=\"line\">    place: &#39;高譚市&#39;,</span><br><span class=\"line\">    base: &#39;韋恩豪宅&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就算是這樣多層的關係，也可以看得出名稱/值的關係，不用想的太複雜。</p>"},{"title":"JS 基礎回顧 - 變數與資料型別","date":"2020-04-10T09:39:39.000Z","keywords":["variable","data-type"],"decription":"about variable and data-type of javascript","_content":"會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。\n第一篇來回顧變數，看如何定義跟指定各種型別的用法。\n<!--more-->\n\n## 變數\n---\n\n![Image](https://i.imgur.com/cPGhwBt.png)\n\n**變數**像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。\n用 JavaScript 的語言來說就是：\n\n```\nvar coca_cola = \"可樂\"\n```\n\n**var = variable 的縮寫**\n**coca_cola = 容器的標籤（變數名稱）**\n**可樂 = 容器裡裝的內容（值）**\n\n## 資料型別\n---\n\n### 基本型別\n\n變數值的型別主要分成**基本型別**跟**物件型別**，這個部份先來討論基本型別：\n\n* number 數字\n* string 字串\n* boolean 布林值\n* undefined \n* null\n\n例如：數字 7、字串 “hello”、布林值 true / false\n\n#### 數字、字串\n\n```\nvar name = \"張無忌\"; // 字串，可用單引號或雙引號把文字包起來\nvar power = 100000; // 數字，不需引號\n```\n\n如果要檢驗型別的話，可以使用 `typeof`\n\n```\nvar num = “123”;\nconsole.log(typeof num) // 會得到 string \n```\n\n#### 布林值\n\n```\nvar n = true;  // 布林值、布林值，不需引號\nconsole.log(n) // a = true，所以結果是 true\n```\n\n#### undefined 跟 null\n\n而 undefined 跟 null 比較特別，看以下的例子：\n\n如果定義了一個叫做 hello 的變數，但沒有指定值，\n這時候 hello 的值是 undefined 狀態\n\n```\nvar hello   // undefined\n```\n\n如果定義 world 這個變數，指定為 null，\n這時 world 的值就是 null 狀態\n\n```\nvar world = null  // \n```\n\n**undefined = 未指定變數的內容，未定義但存在**\n**null = 不存在**\n\n### 如果把不同型別放在一起？\n\n同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：\n\n```\nconsole.log(1 + 1); // 印出 2\nconsole.log(1 + \"1\"); // 印出 11\nconsole.log(\"hello\" + 123); // 印出 hello123\nconsole.log(\"hello\" + true); // 印出 hellotrue\nconsole.log(123 + true); // 印出 124\nconsole.log(123 + false); // 印出 123\nconsole.log(123 + null); // 印出 123\nconsole.log(\"123\" + null); // 印出 123null\nconsole.log(123 + undefined); // 印出 NaN(Not a Number)\nconsole.log(\"123\" + undefined); // 印出 123undefined\n```\n\n### 等號\n\n#### a + 1 = 1 是什麼情況?\n\n```\nvar a = 1;\na = a + 1;\nconsole.log(a);  // 2\n```\n\n= 不是等號，是指定\na = a + 1;是 a + 1 完再指定回 a\n\n接著再看以下的情況：\n\n#### 等號，不一定等於『等於』\n\n```\nvar age = 8;\nif (age = 10) {\n  console.log('yes');\n} else {\n  console.log('no');\n}                     // 結果會是 yes\n```\n\n等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？\n前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。\n\n2 個等號 => 比較內容物是不是一樣。\n3 個等號 => 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。\n在 if (age = 10)中，age = 10 就是指定 age 爲 10\n\n```\nconsole.log(1 == 1);     //  true\nconsole.log(1 == '1');   //  true\nconsole.log(1 === '1');  //  false\n```\n\n所以在判斷的時候，儘量可以的話就用三個等號會比較安全。","source":"_posts/JS基礎回顧-變數與資料型態.md","raw":"---\ntitle: JS 基礎回顧 - 變數與資料型別\ntags:\n  - javascript\ndate: 2020-04-10 17:39:39\ncategories: JS 基礎回顧\nkeywords: \n  - variable\n  - data-type\ndecription: about variable and data-type of javascript\n---\n會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。\n第一篇來回顧變數，看如何定義跟指定各種型別的用法。\n<!--more-->\n\n## 變數\n---\n\n![Image](https://i.imgur.com/cPGhwBt.png)\n\n**變數**像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。\n用 JavaScript 的語言來說就是：\n\n```\nvar coca_cola = \"可樂\"\n```\n\n**var = variable 的縮寫**\n**coca_cola = 容器的標籤（變數名稱）**\n**可樂 = 容器裡裝的內容（值）**\n\n## 資料型別\n---\n\n### 基本型別\n\n變數值的型別主要分成**基本型別**跟**物件型別**，這個部份先來討論基本型別：\n\n* number 數字\n* string 字串\n* boolean 布林值\n* undefined \n* null\n\n例如：數字 7、字串 “hello”、布林值 true / false\n\n#### 數字、字串\n\n```\nvar name = \"張無忌\"; // 字串，可用單引號或雙引號把文字包起來\nvar power = 100000; // 數字，不需引號\n```\n\n如果要檢驗型別的話，可以使用 `typeof`\n\n```\nvar num = “123”;\nconsole.log(typeof num) // 會得到 string \n```\n\n#### 布林值\n\n```\nvar n = true;  // 布林值、布林值，不需引號\nconsole.log(n) // a = true，所以結果是 true\n```\n\n#### undefined 跟 null\n\n而 undefined 跟 null 比較特別，看以下的例子：\n\n如果定義了一個叫做 hello 的變數，但沒有指定值，\n這時候 hello 的值是 undefined 狀態\n\n```\nvar hello   // undefined\n```\n\n如果定義 world 這個變數，指定為 null，\n這時 world 的值就是 null 狀態\n\n```\nvar world = null  // \n```\n\n**undefined = 未指定變數的內容，未定義但存在**\n**null = 不存在**\n\n### 如果把不同型別放在一起？\n\n同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：\n\n```\nconsole.log(1 + 1); // 印出 2\nconsole.log(1 + \"1\"); // 印出 11\nconsole.log(\"hello\" + 123); // 印出 hello123\nconsole.log(\"hello\" + true); // 印出 hellotrue\nconsole.log(123 + true); // 印出 124\nconsole.log(123 + false); // 印出 123\nconsole.log(123 + null); // 印出 123\nconsole.log(\"123\" + null); // 印出 123null\nconsole.log(123 + undefined); // 印出 NaN(Not a Number)\nconsole.log(\"123\" + undefined); // 印出 123undefined\n```\n\n### 等號\n\n#### a + 1 = 1 是什麼情況?\n\n```\nvar a = 1;\na = a + 1;\nconsole.log(a);  // 2\n```\n\n= 不是等號，是指定\na = a + 1;是 a + 1 完再指定回 a\n\n接著再看以下的情況：\n\n#### 等號，不一定等於『等於』\n\n```\nvar age = 8;\nif (age = 10) {\n  console.log('yes');\n} else {\n  console.log('no');\n}                     // 結果會是 yes\n```\n\n等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？\n前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。\n\n2 個等號 => 比較內容物是不是一樣。\n3 個等號 => 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。\n在 if (age = 10)中，age = 10 就是指定 age 爲 10\n\n```\nconsole.log(1 == 1);     //  true\nconsole.log(1 == '1');   //  true\nconsole.log(1 === '1');  //  false\n```\n\n所以在判斷的時候，儘量可以的話就用三個等號會比較安全。","slug":"JS基礎回顧-變數與資料型態","published":1,"updated":"2020-04-10T18:16:40.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwy8000eb6u73w850hoa","content":"<p>會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。<br>第一篇來回顧變數，看如何定義跟指定各種型別的用法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><hr>\n<p><img src=\"https://i.imgur.com/cPGhwBt.png\" alt=\"Image\"></p>\n<p><strong>變數</strong>像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。<br>用 JavaScript 的語言來說就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var coca_cola &#x3D; &quot;可樂&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>var = variable 的縮寫</strong><br><strong>coca_cola = 容器的標籤（變數名稱）</strong><br><strong>可樂 = 容器裡裝的內容（值）</strong></p>\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><hr>\n<h3 id=\"基本型別\"><a href=\"#基本型別\" class=\"headerlink\" title=\"基本型別\"></a>基本型別</h3><p>變數值的型別主要分成<strong>基本型別</strong>跟<strong>物件型別</strong>，這個部份先來討論基本型別：</p>\n<ul>\n<li>number 數字</li>\n<li>string 字串</li>\n<li>boolean 布林值</li>\n<li>undefined </li>\n<li>null</li>\n</ul>\n<p>例如：數字 7、字串 “hello”、布林值 true / false</p>\n<h4 id=\"數字、字串\"><a href=\"#數字、字串\" class=\"headerlink\" title=\"數字、字串\"></a>數字、字串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &quot;張無忌&quot;; &#x2F;&#x2F; 字串，可用單引號或雙引號把文字包起來</span><br><span class=\"line\">var power &#x3D; 100000; &#x2F;&#x2F; 數字，不需引號</span><br></pre></td></tr></table></figure>\n\n<p>如果要檢驗型別的話，可以使用 <code>typeof</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num &#x3D; “123”;</span><br><span class=\"line\">console.log(typeof num) &#x2F;&#x2F; 會得到 string</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布林值\"><a href=\"#布林值\" class=\"headerlink\" title=\"布林值\"></a>布林值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n &#x3D; true;  &#x2F;&#x2F; 布林值、布林值，不需引號</span><br><span class=\"line\">console.log(n) &#x2F;&#x2F; a &#x3D; true，所以結果是 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undefined-跟-null\"><a href=\"#undefined-跟-null\" class=\"headerlink\" title=\"undefined 跟 null\"></a>undefined 跟 null</h4><p>而 undefined 跟 null 比較特別，看以下的例子：</p>\n<p>如果定義了一個叫做 hello 的變數，但沒有指定值，<br>這時候 hello 的值是 undefined 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hello   &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>如果定義 world 這個變數，指定為 null，<br>這時 world 的值就是 null 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world &#x3D; null  &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><strong>undefined = 未指定變數的內容，未定義但存在</strong><br><strong>null = 不存在</strong></p>\n<h3 id=\"如果把不同型別放在一起？\"><a href=\"#如果把不同型別放在一起？\" class=\"headerlink\" title=\"如果把不同型別放在一起？\"></a>如果把不同型別放在一起？</h3><p>同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1 + 1); &#x2F;&#x2F; 印出 2</span><br><span class=\"line\">console.log(1 + &quot;1&quot;); &#x2F;&#x2F; 印出 11</span><br><span class=\"line\">console.log(&quot;hello&quot; + 123); &#x2F;&#x2F; 印出 hello123</span><br><span class=\"line\">console.log(&quot;hello&quot; + true); &#x2F;&#x2F; 印出 hellotrue</span><br><span class=\"line\">console.log(123 + true); &#x2F;&#x2F; 印出 124</span><br><span class=\"line\">console.log(123 + false); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(123 + null); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(&quot;123&quot; + null); &#x2F;&#x2F; 印出 123null</span><br><span class=\"line\">console.log(123 + undefined); &#x2F;&#x2F; 印出 NaN(Not a Number)</span><br><span class=\"line\">console.log(&quot;123&quot; + undefined); &#x2F;&#x2F; 印出 123undefined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等號\"><a href=\"#等號\" class=\"headerlink\" title=\"等號\"></a>等號</h3><h4 id=\"a-1-1-是什麼情況\"><a href=\"#a-1-1-是什麼情況\" class=\"headerlink\" title=\"a + 1 = 1 是什麼情況?\"></a>a + 1 = 1 是什麼情況?</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">a &#x3D; a + 1;</span><br><span class=\"line\">console.log(a);  &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<p>= 不是等號，是指定<br>a = a + 1;是 a + 1 完再指定回 a</p>\n<p>接著再看以下的情況：</p>\n<h4 id=\"等號，不一定等於『等於』\"><a href=\"#等號，不一定等於『等於』\" class=\"headerlink\" title=\"等號，不一定等於『等於』\"></a>等號，不一定等於『等於』</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 8;</span><br><span class=\"line\">if (age &#x3D; 10) &#123;</span><br><span class=\"line\">  console.log(&#39;yes&#39;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;no&#39;);</span><br><span class=\"line\">&#125;                     &#x2F;&#x2F; 結果會是 yes</span><br></pre></td></tr></table></figure>\n\n<p>等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？<br>前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。</p>\n<p>2 個等號 =&gt; 比較內容物是不是一樣。<br>3 個等號 =&gt; 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。<br>在 if (age = 10)中，age = 10 就是指定 age 爲 10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1 &#x3D;&#x3D; 1);     &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D; &#39;1&#39;);   &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D;&#x3D; &#39;1&#39;);  &#x2F;&#x2F;  false</span><br></pre></td></tr></table></figure>\n\n<p>所以在判斷的時候，儘量可以的話就用三個等號會比較安全。</p>\n","site":{"data":{}},"excerpt":"<p>會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。<br>第一篇來回顧變數，看如何定義跟指定各種型別的用法。</p>","more":"<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><hr>\n<p><img src=\"https://i.imgur.com/cPGhwBt.png\" alt=\"Image\"></p>\n<p><strong>變數</strong>像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。<br>用 JavaScript 的語言來說就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var coca_cola &#x3D; &quot;可樂&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>var = variable 的縮寫</strong><br><strong>coca_cola = 容器的標籤（變數名稱）</strong><br><strong>可樂 = 容器裡裝的內容（值）</strong></p>\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><hr>\n<h3 id=\"基本型別\"><a href=\"#基本型別\" class=\"headerlink\" title=\"基本型別\"></a>基本型別</h3><p>變數值的型別主要分成<strong>基本型別</strong>跟<strong>物件型別</strong>，這個部份先來討論基本型別：</p>\n<ul>\n<li>number 數字</li>\n<li>string 字串</li>\n<li>boolean 布林值</li>\n<li>undefined </li>\n<li>null</li>\n</ul>\n<p>例如：數字 7、字串 “hello”、布林值 true / false</p>\n<h4 id=\"數字、字串\"><a href=\"#數字、字串\" class=\"headerlink\" title=\"數字、字串\"></a>數字、字串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &quot;張無忌&quot;; &#x2F;&#x2F; 字串，可用單引號或雙引號把文字包起來</span><br><span class=\"line\">var power &#x3D; 100000; &#x2F;&#x2F; 數字，不需引號</span><br></pre></td></tr></table></figure>\n\n<p>如果要檢驗型別的話，可以使用 <code>typeof</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num &#x3D; “123”;</span><br><span class=\"line\">console.log(typeof num) &#x2F;&#x2F; 會得到 string</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布林值\"><a href=\"#布林值\" class=\"headerlink\" title=\"布林值\"></a>布林值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n &#x3D; true;  &#x2F;&#x2F; 布林值、布林值，不需引號</span><br><span class=\"line\">console.log(n) &#x2F;&#x2F; a &#x3D; true，所以結果是 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undefined-跟-null\"><a href=\"#undefined-跟-null\" class=\"headerlink\" title=\"undefined 跟 null\"></a>undefined 跟 null</h4><p>而 undefined 跟 null 比較特別，看以下的例子：</p>\n<p>如果定義了一個叫做 hello 的變數，但沒有指定值，<br>這時候 hello 的值是 undefined 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hello   &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>如果定義 world 這個變數，指定為 null，<br>這時 world 的值就是 null 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world &#x3D; null  &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><strong>undefined = 未指定變數的內容，未定義但存在</strong><br><strong>null = 不存在</strong></p>\n<h3 id=\"如果把不同型別放在一起？\"><a href=\"#如果把不同型別放在一起？\" class=\"headerlink\" title=\"如果把不同型別放在一起？\"></a>如果把不同型別放在一起？</h3><p>同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1 + 1); &#x2F;&#x2F; 印出 2</span><br><span class=\"line\">console.log(1 + &quot;1&quot;); &#x2F;&#x2F; 印出 11</span><br><span class=\"line\">console.log(&quot;hello&quot; + 123); &#x2F;&#x2F; 印出 hello123</span><br><span class=\"line\">console.log(&quot;hello&quot; + true); &#x2F;&#x2F; 印出 hellotrue</span><br><span class=\"line\">console.log(123 + true); &#x2F;&#x2F; 印出 124</span><br><span class=\"line\">console.log(123 + false); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(123 + null); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(&quot;123&quot; + null); &#x2F;&#x2F; 印出 123null</span><br><span class=\"line\">console.log(123 + undefined); &#x2F;&#x2F; 印出 NaN(Not a Number)</span><br><span class=\"line\">console.log(&quot;123&quot; + undefined); &#x2F;&#x2F; 印出 123undefined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等號\"><a href=\"#等號\" class=\"headerlink\" title=\"等號\"></a>等號</h3><h4 id=\"a-1-1-是什麼情況\"><a href=\"#a-1-1-是什麼情況\" class=\"headerlink\" title=\"a + 1 = 1 是什麼情況?\"></a>a + 1 = 1 是什麼情況?</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">a &#x3D; a + 1;</span><br><span class=\"line\">console.log(a);  &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<p>= 不是等號，是指定<br>a = a + 1;是 a + 1 完再指定回 a</p>\n<p>接著再看以下的情況：</p>\n<h4 id=\"等號，不一定等於『等於』\"><a href=\"#等號，不一定等於『等於』\" class=\"headerlink\" title=\"等號，不一定等於『等於』\"></a>等號，不一定等於『等於』</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 8;</span><br><span class=\"line\">if (age &#x3D; 10) &#123;</span><br><span class=\"line\">  console.log(&#39;yes&#39;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;no&#39;);</span><br><span class=\"line\">&#125;                     &#x2F;&#x2F; 結果會是 yes</span><br></pre></td></tr></table></figure>\n\n<p>等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？<br>前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。</p>\n<p>2 個等號 =&gt; 比較內容物是不是一樣。<br>3 個等號 =&gt; 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。<br>在 if (age = 10)中，age = 10 就是指定 age 爲 10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(1 &#x3D;&#x3D; 1);     &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D; &#39;1&#39;);   &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D;&#x3D; &#39;1&#39;);  &#x2F;&#x2F;  false</span><br></pre></td></tr></table></figure>\n\n<p>所以在判斷的時候，儘量可以的話就用三個等號會比較安全。</p>"},{"title":"JS 基礎回顧 - 物件與陣列","date":"2020-05-01T06:16:34.000Z","keywords":["陣列","array","物件","object"],"decription":"關於物件與陣列的介紹","_content":"在 JavaScript 中，物件與陣列這兩個還滿常搭配使用的，所以這篇就混在一起講吧。~~絕對不是為了要省事。~~\n<!--more-->\n## 陣列 Array\n---\n\n![](https://i.imgur.com/IIHLVfs.jpg)\n\n陣列的概念有點像放藥的盒子，一個蘿蔔一個坑。\n可以是零到多數元素的集合，可以放入資料，例如數字、文字，或是陣列、物件、函式，沒有規定只能放什麼進去。\n\n### 如何建立陣列\n\n可以是空陣列：\n\n```\nvar a = []\n```\n\n如果要建立資料：\n\n```\nvar a = [1, 2, 3, 'aaa', 'bbb']\n```\n\n或是：\n\n```\nvar a = [];\n\na[0] = 123;\na[1] = 456;\na[2] = 'abc'\n```\n\n要注意的是，陣列是有順序的集合，第一筆資料是從 0 開始。\n\n### 取得陣列的長度\n\n`length`，陣列的長度，等於陣列元素的個數，例如：\n\n```\nvar list = [1, 2, 3, 'aa', 'bb', 123];\n\nconsole.log(list.length);   // 會得到6\n```\n\n如果想取用特定某一個元素，假設取第一個：\n\n```\nvar list = [1, 2, 3, 'aa', 'bb', 123];\n\nconsole.log(list[0]);  // 會印出1\nconsole.log(list[1]);  // 會印出2\nconsole.log(list[2]);  // 會印出3\nconsole.log(list[3]);  // 會印出\"aa\"\nconsole.log(list[4]);  // 會印出\"bb\"\nconsole.log(list[5]);  // 會印出123\n```\n\n### 陣列的操作\n\n如果想加入新的元素，可以使用 `push` 或是 `unshift`\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\nheroes.push('蜘蛛人');      // 從後面新增\nheroes.unshift('美國隊長'); // 從前面新增\n\n\nconsole.log(heroes[0]);   // '蜘蛛人'\nconsole.log(heroes[5]);   // '美國隊長'\n```\n\n想移除元素的話，可以使用 `shift` 或是 `pop`\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\nheroes.pop();         // 從後面開始移除\nconsole.log(heroes);  // [\"蝙蝠俠\", \"超人\", \"閃電俠\"]\n\n\nvar badguys = ['小丑', '雷克斯', '企鵝', '班恩'];\n\nbadguys.shift();      // 從前面開始移除\nconsole.log(badguys)  // ['雷克斯', '企鵝', '班恩']\n```\n\n如果想檢查某個物件有沒有在陣列裡，可以使用 `indexOf` 這個語法，例如：\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\n// 想查找閃電俠\nconsole.log(heroes.indexOf('閃電俠'))  // 2\n// 想查找蝙蝠俠\nconsole.log(heroes.indexOf('蝙蝠俠'))  // 0\n// 想查找小丑？\nconsole.log(heroes.indexOf('小丑'))   // -1，因為陣列中沒資料，所以比 0 小，是 -1\n```\n\n## 物件\n---\n\n在 [JS 基礎回顧 - 變數與資料型別](https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/) 有提到變數值的型別分成基本型別跟物件型別。而基本上在 JavaScript 的世界中，除了基本型別以外，絕大部分都可以歸類為物件型別。\n\n那麼物件是什麼呢？它是一種元素的集合，是 key 跟 value 的組合。\n\n### 如何建立物件\n\n那麼該如何建立一個物件？\n最基本的方法，宣告一個變數，加 = 再加 {}，就是一個基本的物件了。\n\n```\nvar batman = {\n\n}\n```\n\n如果試著用 `console.log(batman)` 的話，會顯示是 object。\n\n下面是一個標準的物件：\n\n```\nvar batman = {\n  name: '蝙蝠俠',\n  skills: ['有錢', '潛行', '格鬥技'],\n  age: 35 \n}\n```\n\n### 物件新增屬性\n\n如果要在原本的物件增加屬性的話，可以試著用以下的方法：\n\n1. `變數名稱.新增屬性 = 值`，例如：`batman.tools = '蝙蝠車'` \n2. 使用前面陣列教過的 `push`，例如：`batman.skills.push('解謎能力')`，注意使用 `push` 新增是會從陣列後面擠進去。\n\n```\nvar batman = {\n  name: '蝙蝠俠',\n  skills: ['有錢', '潛行', '格鬥技'],\n  age: 35 \n}\n\nbatman.tools = '蝙蝠車';\nbatman.skills.push('解謎能力');\n\nconsole.log(batman.tools);        // '蝙蝠車'\nconsole.log(batman.skills)        // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n```\n\n### 物件存取屬性\n\n如果要知道剛剛新增的屬性有沒有成功加入，可以試試 `.` 或是 `[]` 來存取：\n\n```\nconsole.log(batman.tools);        // '蝙蝠車'\nconsole.log(batman.skills);       // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n\nconsole.log(batman['tools']);     // '蝙蝠車'\nconsole.log(batman['skills'])     // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n```\n\n### 物件刪除\n\n如果想刪除某個屬性的話，就可以使用 `delete`，例如想刪除掉 age 的話，下面兩種方式都可以：\n\n```\ndelete batman.age;\ndelete batman['age'];\n\nconsole.log(batman)\n```\n\n所以出來的結果，就會只剩下 name 跟 skills\n\n### 如何取得物件的屬性？\n\n如果想取得屬性的話，可以使用 `Object.keys(obj)`，例如：\n\n```\nconsole.log(Object.keys(batman)) // 得到 [\"name\", \"skills\", \"age\"]\n```\n\n### 物件可以怎麼運用？\n\n前面陣列提到，幾乎什麼資料都可以放。\n物件也差不多，能包文字跟數字，還可以包陣列跟物件，像大腸包小腸一樣，所以可以做出以下：\n\n```\nvar tanjirou = {\n  name: '竈門炭治郎',\n  job: '鬼殺隊士',\n  skills: ['超強嗅覺', '疼妹妹', '水之呼吸'],     // 目前只看到動畫第 8 集\n  finalMove: function () {\n    return this.skills[2]                     // this 表示這個物件名稱 tanjirou\n  }\n}\n\nconsole.log(tanjirou.finalMove() + ' 拾之型 生生流轉')  // \"水之呼吸 拾之型 生生流轉\"\n```\n\n### 多組物件放陣列\n\n如果物件有多組資料差不多的話，像是 key 一樣，但是 value 不太一樣的，還可以放在陣列中，來看看實例的操作：\n\n假設想要比較 iPhone 11 系列的所有手機的話，下面有 3 組物件，分別是 iPhone 11、Pro 跟 ProMax：\n\n```\nvar iPhone11 = {\n  name: 'iPhone 11',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 128, 256],\n  display: 6.1,\n  battery: '3110 mAh',\n}\n```\n\n```\nvar iPhone11Pro = {\n  name: 'iPhone 11 Pro',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 256, 512],\n  display: 5.8,\n  battery: '3190 mAh'\n}\n```\n\n```\nvar iPhone11ProMax = {\n  name: 'iPhone 11 Pro Max',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 256, 512],\n  display: 6.5,\n  battery: '3969 mAh'\n}\n```\n\n為了方便管理，就可以把這 3 筆放入陣列中：\n\n```\nvar iPhone11Series = [\n  {\n    name: 'iPhone 11',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 128, 256],\n    display: 6.1,\n    battery: '3110 mAh',\n  },\n  \n  {\n    name: 'iPhone 11 Pro',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 256, 512],\n    display: 5.8,\n    battery: '3190 mAh'\n  },\n  \n  {\n    name: 'iPhone 11 Pro Max',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 256, 512],\n    display: 6.5,\n    battery: '3969 mAh',\n  }\n]\n```\n\n如果想要顯示 3 者的螢幕尺寸：\n\n```\nvar iPhone11Display = iPhone11Series[0].display;\nvar iPhone11ProDisplay = iPhone11Series[1].display;\nvar iPhone11ProMaxDisplay = iPhone11Series[2].display;\n\nconsole.log(\n  'iPhone 11 系列 的顯示器個別是' + \n  iPhone11Display + '吋、' + \n  iPhone11ProDisplay + '吋、' + \n  iPhone11ProMaxDisplay + '吋'\n  )\n```\n\n最後得到的結果是 \"iPhone 11 系列 的顯示器個別是6.1吋、5.8吋、6.5吋\"","source":"_posts/JS基礎回顧-物件與陣列.md","raw":"---\ntitle: JS 基礎回顧 - 物件與陣列\ntags:\n  - 物件\n  - 陣列\n  - javascript\n  - w3HexSchool\ndate: 2020-05-01 14:16:34\ncategories: JS 基礎回顧\nkeywords: \n  - 陣列\n  - array\n  - 物件\n  - object\ndecription: 關於物件與陣列的介紹\n---\n在 JavaScript 中，物件與陣列這兩個還滿常搭配使用的，所以這篇就混在一起講吧。~~絕對不是為了要省事。~~\n<!--more-->\n## 陣列 Array\n---\n\n![](https://i.imgur.com/IIHLVfs.jpg)\n\n陣列的概念有點像放藥的盒子，一個蘿蔔一個坑。\n可以是零到多數元素的集合，可以放入資料，例如數字、文字，或是陣列、物件、函式，沒有規定只能放什麼進去。\n\n### 如何建立陣列\n\n可以是空陣列：\n\n```\nvar a = []\n```\n\n如果要建立資料：\n\n```\nvar a = [1, 2, 3, 'aaa', 'bbb']\n```\n\n或是：\n\n```\nvar a = [];\n\na[0] = 123;\na[1] = 456;\na[2] = 'abc'\n```\n\n要注意的是，陣列是有順序的集合，第一筆資料是從 0 開始。\n\n### 取得陣列的長度\n\n`length`，陣列的長度，等於陣列元素的個數，例如：\n\n```\nvar list = [1, 2, 3, 'aa', 'bb', 123];\n\nconsole.log(list.length);   // 會得到6\n```\n\n如果想取用特定某一個元素，假設取第一個：\n\n```\nvar list = [1, 2, 3, 'aa', 'bb', 123];\n\nconsole.log(list[0]);  // 會印出1\nconsole.log(list[1]);  // 會印出2\nconsole.log(list[2]);  // 會印出3\nconsole.log(list[3]);  // 會印出\"aa\"\nconsole.log(list[4]);  // 會印出\"bb\"\nconsole.log(list[5]);  // 會印出123\n```\n\n### 陣列的操作\n\n如果想加入新的元素，可以使用 `push` 或是 `unshift`\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\nheroes.push('蜘蛛人');      // 從後面新增\nheroes.unshift('美國隊長'); // 從前面新增\n\n\nconsole.log(heroes[0]);   // '蜘蛛人'\nconsole.log(heroes[5]);   // '美國隊長'\n```\n\n想移除元素的話，可以使用 `shift` 或是 `pop`\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\nheroes.pop();         // 從後面開始移除\nconsole.log(heroes);  // [\"蝙蝠俠\", \"超人\", \"閃電俠\"]\n\n\nvar badguys = ['小丑', '雷克斯', '企鵝', '班恩'];\n\nbadguys.shift();      // 從前面開始移除\nconsole.log(badguys)  // ['雷克斯', '企鵝', '班恩']\n```\n\n如果想檢查某個物件有沒有在陣列裡，可以使用 `indexOf` 這個語法，例如：\n\n```\nvar heroes = ['蝙蝠俠', '超人', '閃電俠', '水行俠'];\n\n// 想查找閃電俠\nconsole.log(heroes.indexOf('閃電俠'))  // 2\n// 想查找蝙蝠俠\nconsole.log(heroes.indexOf('蝙蝠俠'))  // 0\n// 想查找小丑？\nconsole.log(heroes.indexOf('小丑'))   // -1，因為陣列中沒資料，所以比 0 小，是 -1\n```\n\n## 物件\n---\n\n在 [JS 基礎回顧 - 變數與資料型別](https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/) 有提到變數值的型別分成基本型別跟物件型別。而基本上在 JavaScript 的世界中，除了基本型別以外，絕大部分都可以歸類為物件型別。\n\n那麼物件是什麼呢？它是一種元素的集合，是 key 跟 value 的組合。\n\n### 如何建立物件\n\n那麼該如何建立一個物件？\n最基本的方法，宣告一個變數，加 = 再加 {}，就是一個基本的物件了。\n\n```\nvar batman = {\n\n}\n```\n\n如果試著用 `console.log(batman)` 的話，會顯示是 object。\n\n下面是一個標準的物件：\n\n```\nvar batman = {\n  name: '蝙蝠俠',\n  skills: ['有錢', '潛行', '格鬥技'],\n  age: 35 \n}\n```\n\n### 物件新增屬性\n\n如果要在原本的物件增加屬性的話，可以試著用以下的方法：\n\n1. `變數名稱.新增屬性 = 值`，例如：`batman.tools = '蝙蝠車'` \n2. 使用前面陣列教過的 `push`，例如：`batman.skills.push('解謎能力')`，注意使用 `push` 新增是會從陣列後面擠進去。\n\n```\nvar batman = {\n  name: '蝙蝠俠',\n  skills: ['有錢', '潛行', '格鬥技'],\n  age: 35 \n}\n\nbatman.tools = '蝙蝠車';\nbatman.skills.push('解謎能力');\n\nconsole.log(batman.tools);        // '蝙蝠車'\nconsole.log(batman.skills)        // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n```\n\n### 物件存取屬性\n\n如果要知道剛剛新增的屬性有沒有成功加入，可以試試 `.` 或是 `[]` 來存取：\n\n```\nconsole.log(batman.tools);        // '蝙蝠車'\nconsole.log(batman.skills);       // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n\nconsole.log(batman['tools']);     // '蝙蝠車'\nconsole.log(batman['skills'])     // [\"有錢\", \"潛行\", \"格鬥技\", \"解謎能力\"]\n```\n\n### 物件刪除\n\n如果想刪除某個屬性的話，就可以使用 `delete`，例如想刪除掉 age 的話，下面兩種方式都可以：\n\n```\ndelete batman.age;\ndelete batman['age'];\n\nconsole.log(batman)\n```\n\n所以出來的結果，就會只剩下 name 跟 skills\n\n### 如何取得物件的屬性？\n\n如果想取得屬性的話，可以使用 `Object.keys(obj)`，例如：\n\n```\nconsole.log(Object.keys(batman)) // 得到 [\"name\", \"skills\", \"age\"]\n```\n\n### 物件可以怎麼運用？\n\n前面陣列提到，幾乎什麼資料都可以放。\n物件也差不多，能包文字跟數字，還可以包陣列跟物件，像大腸包小腸一樣，所以可以做出以下：\n\n```\nvar tanjirou = {\n  name: '竈門炭治郎',\n  job: '鬼殺隊士',\n  skills: ['超強嗅覺', '疼妹妹', '水之呼吸'],     // 目前只看到動畫第 8 集\n  finalMove: function () {\n    return this.skills[2]                     // this 表示這個物件名稱 tanjirou\n  }\n}\n\nconsole.log(tanjirou.finalMove() + ' 拾之型 生生流轉')  // \"水之呼吸 拾之型 生生流轉\"\n```\n\n### 多組物件放陣列\n\n如果物件有多組資料差不多的話，像是 key 一樣，但是 value 不太一樣的，還可以放在陣列中，來看看實例的操作：\n\n假設想要比較 iPhone 11 系列的所有手機的話，下面有 3 組物件，分別是 iPhone 11、Pro 跟 ProMax：\n\n```\nvar iPhone11 = {\n  name: 'iPhone 11',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 128, 256],\n  display: 6.1,\n  battery: '3110 mAh',\n}\n```\n\n```\nvar iPhone11Pro = {\n  name: 'iPhone 11 Pro',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 256, 512],\n  display: 5.8,\n  battery: '3190 mAh'\n}\n```\n\n```\nvar iPhone11ProMax = {\n  name: 'iPhone 11 Pro Max',\n  system: 'iOS 13',\n  memory: '4 GB',\n  storage: [64, 256, 512],\n  display: 6.5,\n  battery: '3969 mAh'\n}\n```\n\n為了方便管理，就可以把這 3 筆放入陣列中：\n\n```\nvar iPhone11Series = [\n  {\n    name: 'iPhone 11',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 128, 256],\n    display: 6.1,\n    battery: '3110 mAh',\n  },\n  \n  {\n    name: 'iPhone 11 Pro',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 256, 512],\n    display: 5.8,\n    battery: '3190 mAh'\n  },\n  \n  {\n    name: 'iPhone 11 Pro Max',\n    system: 'iOS 13',\n    memory: '4 GB',\n    storage: [64, 256, 512],\n    display: 6.5,\n    battery: '3969 mAh',\n  }\n]\n```\n\n如果想要顯示 3 者的螢幕尺寸：\n\n```\nvar iPhone11Display = iPhone11Series[0].display;\nvar iPhone11ProDisplay = iPhone11Series[1].display;\nvar iPhone11ProMaxDisplay = iPhone11Series[2].display;\n\nconsole.log(\n  'iPhone 11 系列 的顯示器個別是' + \n  iPhone11Display + '吋、' + \n  iPhone11ProDisplay + '吋、' + \n  iPhone11ProMaxDisplay + '吋'\n  )\n```\n\n最後得到的結果是 \"iPhone 11 系列 的顯示器個別是6.1吋、5.8吋、6.5吋\"","slug":"JS基礎回顧-物件與陣列","published":1,"updated":"2020-06-03T14:37:24.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyc000ib6u75cmkbtb4","content":"<p>在 JavaScript 中，物件與陣列這兩個還滿常搭配使用的，所以這篇就混在一起講吧。<del>絕對不是為了要省事。</del></p>\n<a id=\"more\"></a>\n<h2 id=\"陣列-Array\"><a href=\"#陣列-Array\" class=\"headerlink\" title=\"陣列 Array\"></a>陣列 Array</h2><hr>\n<p><img src=\"https://i.imgur.com/IIHLVfs.jpg\" alt=\"\"></p>\n<p>陣列的概念有點像放藥的盒子，一個蘿蔔一個坑。<br>可以是零到多數元素的集合，可以放入資料，例如數字、文字，或是陣列、物件、函式，沒有規定只能放什麼進去。</p>\n<h3 id=\"如何建立陣列\"><a href=\"#如何建立陣列\" class=\"headerlink\" title=\"如何建立陣列\"></a>如何建立陣列</h3><p>可以是空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; []</span><br></pre></td></tr></table></figure>\n\n<p>如果要建立資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [1, 2, 3, &#39;aaa&#39;, &#39;bbb&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>或是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">a[0] &#x3D; 123;</span><br><span class=\"line\">a[1] &#x3D; 456;</span><br><span class=\"line\">a[2] &#x3D; &#39;abc&#39;</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，陣列是有順序的集合，第一筆資料是從 0 開始。</p>\n<h3 id=\"取得陣列的長度\"><a href=\"#取得陣列的長度\" class=\"headerlink\" title=\"取得陣列的長度\"></a>取得陣列的長度</h3><p><code>length</code>，陣列的長度，等於陣列元素的個數，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list.length);   &#x2F;&#x2F; 會得到6</span><br></pre></td></tr></table></figure>\n\n<p>如果想取用特定某一個元素，假設取第一個：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list[0]);  &#x2F;&#x2F; 會印出1</span><br><span class=\"line\">console.log(list[1]);  &#x2F;&#x2F; 會印出2</span><br><span class=\"line\">console.log(list[2]);  &#x2F;&#x2F; 會印出3</span><br><span class=\"line\">console.log(list[3]);  &#x2F;&#x2F; 會印出&quot;aa&quot;</span><br><span class=\"line\">console.log(list[4]);  &#x2F;&#x2F; 會印出&quot;bb&quot;</span><br><span class=\"line\">console.log(list[5]);  &#x2F;&#x2F; 會印出123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列的操作\"><a href=\"#陣列的操作\" class=\"headerlink\" title=\"陣列的操作\"></a>陣列的操作</h3><p>如果想加入新的元素，可以使用 <code>push</code> 或是 <code>unshift</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.push(&#39;蜘蛛人&#39;);      &#x2F;&#x2F; 從後面新增</span><br><span class=\"line\">heroes.unshift(&#39;美國隊長&#39;); &#x2F;&#x2F; 從前面新增</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(heroes[0]);   &#x2F;&#x2F; &#39;蜘蛛人&#39;</span><br><span class=\"line\">console.log(heroes[5]);   &#x2F;&#x2F; &#39;美國隊長&#39;</span><br></pre></td></tr></table></figure>\n\n<p>想移除元素的話，可以使用 <code>shift</code> 或是 <code>pop</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.pop();         &#x2F;&#x2F; 從後面開始移除</span><br><span class=\"line\">console.log(heroes);  &#x2F;&#x2F; [&quot;蝙蝠俠&quot;, &quot;超人&quot;, &quot;閃電俠&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var badguys &#x3D; [&#39;小丑&#39;, &#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">badguys.shift();      &#x2F;&#x2F; 從前面開始移除</span><br><span class=\"line\">console.log(badguys)  &#x2F;&#x2F; [&#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>如果想檢查某個物件有沒有在陣列裡，可以使用 <code>indexOf</code> 這個語法，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 想查找閃電俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;閃電俠&#39;))  &#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 想查找蝙蝠俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;蝙蝠俠&#39;))  &#x2F;&#x2F; 0</span><br><span class=\"line\">&#x2F;&#x2F; 想查找小丑？</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;小丑&#39;))   &#x2F;&#x2F; -1，因為陣列中沒資料，所以比 0 小，是 -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/\">JS 基礎回顧 - 變數與資料型別</a> 有提到變數值的型別分成基本型別跟物件型別。而基本上在 JavaScript 的世界中，除了基本型別以外，絕大部分都可以歸類為物件型別。</p>\n<p>那麼物件是什麼呢？它是一種元素的集合，是 key 跟 value 的組合。</p>\n<h3 id=\"如何建立物件\"><a href=\"#如何建立物件\" class=\"headerlink\" title=\"如何建立物件\"></a>如何建立物件</h3><p>那麼該如何建立一個物件？<br>最基本的方法，宣告一個變數，加 = 再加 {}，就是一個基本的物件了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果試著用 <code>console.log(batman)</code> 的話，會顯示是 object。</p>\n<p>下面是一個標準的物件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件新增屬性\"><a href=\"#物件新增屬性\" class=\"headerlink\" title=\"物件新增屬性\"></a>物件新增屬性</h3><p>如果要在原本的物件增加屬性的話，可以試著用以下的方法：</p>\n<ol>\n<li><code>變數名稱.新增屬性 = 值</code>，例如：<code>batman.tools = &#39;蝙蝠車&#39;</code> </li>\n<li>使用前面陣列教過的 <code>push</code>，例如：<code>batman.skills.push(&#39;解謎能力&#39;)</code>，注意使用 <code>push</code> 新增是會從陣列後面擠進去。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">batman.tools &#x3D; &#39;蝙蝠車&#39;;</span><br><span class=\"line\">batman.skills.push(&#39;解謎能力&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills)        &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件存取屬性\"><a href=\"#物件存取屬性\" class=\"headerlink\" title=\"物件存取屬性\"></a>物件存取屬性</h3><p>如果要知道剛剛新增的屬性有沒有成功加入，可以試試 <code>.</code> 或是 <code>[]</code> 來存取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills);       &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman[&#39;tools&#39;]);     &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman[&#39;skills&#39;])     &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件刪除\"><a href=\"#物件刪除\" class=\"headerlink\" title=\"物件刪除\"></a>物件刪除</h3><p>如果想刪除某個屬性的話，就可以使用 <code>delete</code>，例如想刪除掉 age 的話，下面兩種方式都可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete batman.age;</span><br><span class=\"line\">delete batman[&#39;age&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman)</span><br></pre></td></tr></table></figure>\n\n<p>所以出來的結果，就會只剩下 name 跟 skills</p>\n<h3 id=\"如何取得物件的屬性？\"><a href=\"#如何取得物件的屬性？\" class=\"headerlink\" title=\"如何取得物件的屬性？\"></a>如何取得物件的屬性？</h3><p>如果想取得屬性的話，可以使用 <code>Object.keys(obj)</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.keys(batman)) &#x2F;&#x2F; 得到 [&quot;name&quot;, &quot;skills&quot;, &quot;age&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件可以怎麼運用？\"><a href=\"#物件可以怎麼運用？\" class=\"headerlink\" title=\"物件可以怎麼運用？\"></a>物件可以怎麼運用？</h3><p>前面陣列提到，幾乎什麼資料都可以放。<br>物件也差不多，能包文字跟數字，還可以包陣列跟物件，像大腸包小腸一樣，所以可以做出以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjirou &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;竈門炭治郎&#39;,</span><br><span class=\"line\">  job: &#39;鬼殺隊士&#39;,</span><br><span class=\"line\">  skills: [&#39;超強嗅覺&#39;, &#39;疼妹妹&#39;, &#39;水之呼吸&#39;],     &#x2F;&#x2F; 目前只看到動畫第 8 集</span><br><span class=\"line\">  finalMove: function () &#123;</span><br><span class=\"line\">    return this.skills[2]                     &#x2F;&#x2F; this 表示這個物件名稱 tanjirou</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(tanjirou.finalMove() + &#39; 拾之型 生生流轉&#39;)  &#x2F;&#x2F; &quot;水之呼吸 拾之型 生生流轉&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多組物件放陣列\"><a href=\"#多組物件放陣列\" class=\"headerlink\" title=\"多組物件放陣列\"></a>多組物件放陣列</h3><p>如果物件有多組資料差不多的話，像是 key 一樣，但是 value 不太一樣的，還可以放在陣列中，來看看實例的操作：</p>\n<p>假設想要比較 iPhone 11 系列的所有手機的話，下面有 3 組物件，分別是 iPhone 11、Pro 跟 ProMax：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11 &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 128, 256],</span><br><span class=\"line\">  display: 6.1,</span><br><span class=\"line\">  battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Pro &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 5.8,</span><br><span class=\"line\">  battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11ProMax &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 6.5,</span><br><span class=\"line\">  battery: &#39;3969 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>為了方便管理，就可以把這 3 筆放入陣列中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Series &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 128, 256],</span><br><span class=\"line\">    display: 6.1,</span><br><span class=\"line\">    battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 5.8,</span><br><span class=\"line\">    battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 6.5,</span><br><span class=\"line\">    battery: &#39;3969 mAh&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果想要顯示 3 者的螢幕尺寸：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Display &#x3D; iPhone11Series[0].display;</span><br><span class=\"line\">var iPhone11ProDisplay &#x3D; iPhone11Series[1].display;</span><br><span class=\"line\">var iPhone11ProMaxDisplay &#x3D; iPhone11Series[2].display;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(</span><br><span class=\"line\">  &#39;iPhone 11 系列 的顯示器個別是&#39; + </span><br><span class=\"line\">  iPhone11Display + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProDisplay + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProMaxDisplay + &#39;吋&#39;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的結果是 “iPhone 11 系列 的顯示器個別是6.1吋、5.8吋、6.5吋”</p>\n","site":{"data":{}},"excerpt":"<p>在 JavaScript 中，物件與陣列這兩個還滿常搭配使用的，所以這篇就混在一起講吧。<del>絕對不是為了要省事。</del></p>","more":"<h2 id=\"陣列-Array\"><a href=\"#陣列-Array\" class=\"headerlink\" title=\"陣列 Array\"></a>陣列 Array</h2><hr>\n<p><img src=\"https://i.imgur.com/IIHLVfs.jpg\" alt=\"\"></p>\n<p>陣列的概念有點像放藥的盒子，一個蘿蔔一個坑。<br>可以是零到多數元素的集合，可以放入資料，例如數字、文字，或是陣列、物件、函式，沒有規定只能放什麼進去。</p>\n<h3 id=\"如何建立陣列\"><a href=\"#如何建立陣列\" class=\"headerlink\" title=\"如何建立陣列\"></a>如何建立陣列</h3><p>可以是空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; []</span><br></pre></td></tr></table></figure>\n\n<p>如果要建立資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [1, 2, 3, &#39;aaa&#39;, &#39;bbb&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>或是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">a[0] &#x3D; 123;</span><br><span class=\"line\">a[1] &#x3D; 456;</span><br><span class=\"line\">a[2] &#x3D; &#39;abc&#39;</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，陣列是有順序的集合，第一筆資料是從 0 開始。</p>\n<h3 id=\"取得陣列的長度\"><a href=\"#取得陣列的長度\" class=\"headerlink\" title=\"取得陣列的長度\"></a>取得陣列的長度</h3><p><code>length</code>，陣列的長度，等於陣列元素的個數，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list.length);   &#x2F;&#x2F; 會得到6</span><br></pre></td></tr></table></figure>\n\n<p>如果想取用特定某一個元素，假設取第一個：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list[0]);  &#x2F;&#x2F; 會印出1</span><br><span class=\"line\">console.log(list[1]);  &#x2F;&#x2F; 會印出2</span><br><span class=\"line\">console.log(list[2]);  &#x2F;&#x2F; 會印出3</span><br><span class=\"line\">console.log(list[3]);  &#x2F;&#x2F; 會印出&quot;aa&quot;</span><br><span class=\"line\">console.log(list[4]);  &#x2F;&#x2F; 會印出&quot;bb&quot;</span><br><span class=\"line\">console.log(list[5]);  &#x2F;&#x2F; 會印出123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列的操作\"><a href=\"#陣列的操作\" class=\"headerlink\" title=\"陣列的操作\"></a>陣列的操作</h3><p>如果想加入新的元素，可以使用 <code>push</code> 或是 <code>unshift</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.push(&#39;蜘蛛人&#39;);      &#x2F;&#x2F; 從後面新增</span><br><span class=\"line\">heroes.unshift(&#39;美國隊長&#39;); &#x2F;&#x2F; 從前面新增</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(heroes[0]);   &#x2F;&#x2F; &#39;蜘蛛人&#39;</span><br><span class=\"line\">console.log(heroes[5]);   &#x2F;&#x2F; &#39;美國隊長&#39;</span><br></pre></td></tr></table></figure>\n\n<p>想移除元素的話，可以使用 <code>shift</code> 或是 <code>pop</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.pop();         &#x2F;&#x2F; 從後面開始移除</span><br><span class=\"line\">console.log(heroes);  &#x2F;&#x2F; [&quot;蝙蝠俠&quot;, &quot;超人&quot;, &quot;閃電俠&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var badguys &#x3D; [&#39;小丑&#39;, &#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">badguys.shift();      &#x2F;&#x2F; 從前面開始移除</span><br><span class=\"line\">console.log(badguys)  &#x2F;&#x2F; [&#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>如果想檢查某個物件有沒有在陣列裡，可以使用 <code>indexOf</code> 這個語法，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 想查找閃電俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;閃電俠&#39;))  &#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 想查找蝙蝠俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;蝙蝠俠&#39;))  &#x2F;&#x2F; 0</span><br><span class=\"line\">&#x2F;&#x2F; 想查找小丑？</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;小丑&#39;))   &#x2F;&#x2F; -1，因為陣列中沒資料，所以比 0 小，是 -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/\">JS 基礎回顧 - 變數與資料型別</a> 有提到變數值的型別分成基本型別跟物件型別。而基本上在 JavaScript 的世界中，除了基本型別以外，絕大部分都可以歸類為物件型別。</p>\n<p>那麼物件是什麼呢？它是一種元素的集合，是 key 跟 value 的組合。</p>\n<h3 id=\"如何建立物件\"><a href=\"#如何建立物件\" class=\"headerlink\" title=\"如何建立物件\"></a>如何建立物件</h3><p>那麼該如何建立一個物件？<br>最基本的方法，宣告一個變數，加 = 再加 {}，就是一個基本的物件了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果試著用 <code>console.log(batman)</code> 的話，會顯示是 object。</p>\n<p>下面是一個標準的物件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件新增屬性\"><a href=\"#物件新增屬性\" class=\"headerlink\" title=\"物件新增屬性\"></a>物件新增屬性</h3><p>如果要在原本的物件增加屬性的話，可以試著用以下的方法：</p>\n<ol>\n<li><code>變數名稱.新增屬性 = 值</code>，例如：<code>batman.tools = &#39;蝙蝠車&#39;</code> </li>\n<li>使用前面陣列教過的 <code>push</code>，例如：<code>batman.skills.push(&#39;解謎能力&#39;)</code>，注意使用 <code>push</code> 新增是會從陣列後面擠進去。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">batman.tools &#x3D; &#39;蝙蝠車&#39;;</span><br><span class=\"line\">batman.skills.push(&#39;解謎能力&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills)        &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件存取屬性\"><a href=\"#物件存取屬性\" class=\"headerlink\" title=\"物件存取屬性\"></a>物件存取屬性</h3><p>如果要知道剛剛新增的屬性有沒有成功加入，可以試試 <code>.</code> 或是 <code>[]</code> 來存取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills);       &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman[&#39;tools&#39;]);     &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman[&#39;skills&#39;])     &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件刪除\"><a href=\"#物件刪除\" class=\"headerlink\" title=\"物件刪除\"></a>物件刪除</h3><p>如果想刪除某個屬性的話，就可以使用 <code>delete</code>，例如想刪除掉 age 的話，下面兩種方式都可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete batman.age;</span><br><span class=\"line\">delete batman[&#39;age&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman)</span><br></pre></td></tr></table></figure>\n\n<p>所以出來的結果，就會只剩下 name 跟 skills</p>\n<h3 id=\"如何取得物件的屬性？\"><a href=\"#如何取得物件的屬性？\" class=\"headerlink\" title=\"如何取得物件的屬性？\"></a>如何取得物件的屬性？</h3><p>如果想取得屬性的話，可以使用 <code>Object.keys(obj)</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.keys(batman)) &#x2F;&#x2F; 得到 [&quot;name&quot;, &quot;skills&quot;, &quot;age&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件可以怎麼運用？\"><a href=\"#物件可以怎麼運用？\" class=\"headerlink\" title=\"物件可以怎麼運用？\"></a>物件可以怎麼運用？</h3><p>前面陣列提到，幾乎什麼資料都可以放。<br>物件也差不多，能包文字跟數字，還可以包陣列跟物件，像大腸包小腸一樣，所以可以做出以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjirou &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;竈門炭治郎&#39;,</span><br><span class=\"line\">  job: &#39;鬼殺隊士&#39;,</span><br><span class=\"line\">  skills: [&#39;超強嗅覺&#39;, &#39;疼妹妹&#39;, &#39;水之呼吸&#39;],     &#x2F;&#x2F; 目前只看到動畫第 8 集</span><br><span class=\"line\">  finalMove: function () &#123;</span><br><span class=\"line\">    return this.skills[2]                     &#x2F;&#x2F; this 表示這個物件名稱 tanjirou</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(tanjirou.finalMove() + &#39; 拾之型 生生流轉&#39;)  &#x2F;&#x2F; &quot;水之呼吸 拾之型 生生流轉&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多組物件放陣列\"><a href=\"#多組物件放陣列\" class=\"headerlink\" title=\"多組物件放陣列\"></a>多組物件放陣列</h3><p>如果物件有多組資料差不多的話，像是 key 一樣，但是 value 不太一樣的，還可以放在陣列中，來看看實例的操作：</p>\n<p>假設想要比較 iPhone 11 系列的所有手機的話，下面有 3 組物件，分別是 iPhone 11、Pro 跟 ProMax：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11 &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 128, 256],</span><br><span class=\"line\">  display: 6.1,</span><br><span class=\"line\">  battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Pro &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 5.8,</span><br><span class=\"line\">  battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11ProMax &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 6.5,</span><br><span class=\"line\">  battery: &#39;3969 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>為了方便管理，就可以把這 3 筆放入陣列中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Series &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 128, 256],</span><br><span class=\"line\">    display: 6.1,</span><br><span class=\"line\">    battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 5.8,</span><br><span class=\"line\">    battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 6.5,</span><br><span class=\"line\">    battery: &#39;3969 mAh&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果想要顯示 3 者的螢幕尺寸：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iPhone11Display &#x3D; iPhone11Series[0].display;</span><br><span class=\"line\">var iPhone11ProDisplay &#x3D; iPhone11Series[1].display;</span><br><span class=\"line\">var iPhone11ProMaxDisplay &#x3D; iPhone11Series[2].display;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(</span><br><span class=\"line\">  &#39;iPhone 11 系列 的顯示器個別是&#39; + </span><br><span class=\"line\">  iPhone11Display + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProDisplay + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProMaxDisplay + &#39;吋&#39;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的結果是 “iPhone 11 系列 的顯示器個別是6.1吋、5.8吋、6.5吋”</p>"},{"title":"Think first, code later","date":"2020-04-03T14:45:39.000Z","keywords":["先別急著寫 leetcode","pseudo code","如何印出 1-100 的偶數"],"decription":"先別急著寫 leetcode 課程心得","_content":"\n以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -> [從拉麵店的販賣機理解什麼是 API](https://medium.com/@hulitw/ramen-and-api-6238437dc544)\n\n最近作者開了一系列的課 -> [先別急著寫 leetcode](https://lidemy.com/p/alg101-leetcode)。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。\n<!--more-->\n\n## 會寫程式的人與初學者差別在哪？\n---\n\n### 會寫程式的人\n\n1. 先想解法\n2. 如果是有做過或是簡單的，就會直接構思出方法\n3. 如果比較困難或是複雜的問題，就把解法轉換成程式碼\n\n### 初學者\n\n* 邊寫邊想怎麼解\n* 試著套用自己以前學過的語法\n\n這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。\n\n## 在解題會有兩種情況\n---\n\n### 看題目覺得自己解得開\n\n* 有效率的解開\n* 有解開但是時間花較久\n* 最後解不開\n\n### 看題目就覺得看不懂\n\n撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。\n\n## 推薦初學者寫程式的作法\n---\n\n首先看一道題目，然後按照以下的作法，題目是：\n\n如何印出 1-100 之間的偶數？\n\n### 想一下解法，不寫任何程式碼\n\n先不要急著想寫 code，想如何一步一步解決的方法。\n\n1. 如何印出 1-100\n2. 如何判斷偶數\n\n### 把解法寫成 pseudo code\n\n虛擬碼（pseudo code）在維基百科的解釋： \n\n> 更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。\n\n主要是讓自己看得懂的方法，首先要讓如何印出 1-100：\n\n```\n讓 i = 1\n如果 i > 100，結束\n印出 i\n讓 i 可以一直累加\n然後再跳回第 2 步\n```\n\n然後題目是要印出偶數，所以把第 3 步改成判斷式：\n\n```\n讓 i = 1\n如果 i > 100，結束\n如果 i 是偶數，印出 i\n讓 i 可以一直累加\n然後再跳回第 2 步\n```\n\n雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：\n\n```\nlet i = 1\nif i > 100 then exit\nif i % 2 === 0, print i\ni = i + 1\njump to line 2\n```\n\n寫到這邊還可以進一步寫成：\n\n```\nfor (i from 1 to 100) do\n\tif (i % 2 === 0)\n\tprint i\nend for\n```\n\n### 把 pseudo code 翻譯成程式碼\n\n到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：\n\n```\nfor ( let i = 1; i < 100; i ++) {\n\tif(i % 2 === 0) {\n\t\tconsole.log(i)\n\t}\n}\n```","source":"_posts/Think first, code later.md","raw":"---\ntitle: Think first, code later\ntags:\n  - 先別急著寫 leetcode\n  - pseudo code\ndate: 2020-04-03 22:45:39\ncategories: 先別急著寫 leetcode 課程心得\nkeywords: \n- 先別急著寫 leetcode\n- pseudo code\n- 如何印出 1-100 的偶數\ndecription: 先別急著寫 leetcode 課程心得\n---\n\n以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -> [從拉麵店的販賣機理解什麼是 API](https://medium.com/@hulitw/ramen-and-api-6238437dc544)\n\n最近作者開了一系列的課 -> [先別急著寫 leetcode](https://lidemy.com/p/alg101-leetcode)。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。\n<!--more-->\n\n## 會寫程式的人與初學者差別在哪？\n---\n\n### 會寫程式的人\n\n1. 先想解法\n2. 如果是有做過或是簡單的，就會直接構思出方法\n3. 如果比較困難或是複雜的問題，就把解法轉換成程式碼\n\n### 初學者\n\n* 邊寫邊想怎麼解\n* 試著套用自己以前學過的語法\n\n這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。\n\n## 在解題會有兩種情況\n---\n\n### 看題目覺得自己解得開\n\n* 有效率的解開\n* 有解開但是時間花較久\n* 最後解不開\n\n### 看題目就覺得看不懂\n\n撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。\n\n## 推薦初學者寫程式的作法\n---\n\n首先看一道題目，然後按照以下的作法，題目是：\n\n如何印出 1-100 之間的偶數？\n\n### 想一下解法，不寫任何程式碼\n\n先不要急著想寫 code，想如何一步一步解決的方法。\n\n1. 如何印出 1-100\n2. 如何判斷偶數\n\n### 把解法寫成 pseudo code\n\n虛擬碼（pseudo code）在維基百科的解釋： \n\n> 更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。\n\n主要是讓自己看得懂的方法，首先要讓如何印出 1-100：\n\n```\n讓 i = 1\n如果 i > 100，結束\n印出 i\n讓 i 可以一直累加\n然後再跳回第 2 步\n```\n\n然後題目是要印出偶數，所以把第 3 步改成判斷式：\n\n```\n讓 i = 1\n如果 i > 100，結束\n如果 i 是偶數，印出 i\n讓 i 可以一直累加\n然後再跳回第 2 步\n```\n\n雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：\n\n```\nlet i = 1\nif i > 100 then exit\nif i % 2 === 0, print i\ni = i + 1\njump to line 2\n```\n\n寫到這邊還可以進一步寫成：\n\n```\nfor (i from 1 to 100) do\n\tif (i % 2 === 0)\n\tprint i\nend for\n```\n\n### 把 pseudo code 翻譯成程式碼\n\n到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：\n\n```\nfor ( let i = 1; i < 100; i ++) {\n\tif(i % 2 === 0) {\n\t\tconsole.log(i)\n\t}\n}\n```","slug":"Think first, code later","published":1,"updated":"2020-04-18T16:26:39.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwye000kb6u71gj39imn","content":"<p>以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -&gt; <a href=\"https://medium.com/@hulitw/ramen-and-api-6238437dc544\" target=\"_blank\" rel=\"noopener\">從拉麵店的販賣機理解什麼是 API</a></p>\n<p>最近作者開了一系列的課 -&gt; <a href=\"https://lidemy.com/p/alg101-leetcode\" target=\"_blank\" rel=\"noopener\">先別急著寫 leetcode</a>。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"會寫程式的人與初學者差別在哪？\"><a href=\"#會寫程式的人與初學者差別在哪？\" class=\"headerlink\" title=\"會寫程式的人與初學者差別在哪？\"></a>會寫程式的人與初學者差別在哪？</h2><hr>\n<h3 id=\"會寫程式的人\"><a href=\"#會寫程式的人\" class=\"headerlink\" title=\"會寫程式的人\"></a>會寫程式的人</h3><ol>\n<li>先想解法</li>\n<li>如果是有做過或是簡單的，就會直接構思出方法</li>\n<li>如果比較困難或是複雜的問題，就把解法轉換成程式碼</li>\n</ol>\n<h3 id=\"初學者\"><a href=\"#初學者\" class=\"headerlink\" title=\"初學者\"></a>初學者</h3><ul>\n<li>邊寫邊想怎麼解</li>\n<li>試著套用自己以前學過的語法</li>\n</ul>\n<p>這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。</p>\n<h2 id=\"在解題會有兩種情況\"><a href=\"#在解題會有兩種情況\" class=\"headerlink\" title=\"在解題會有兩種情況\"></a>在解題會有兩種情況</h2><hr>\n<h3 id=\"看題目覺得自己解得開\"><a href=\"#看題目覺得自己解得開\" class=\"headerlink\" title=\"看題目覺得自己解得開\"></a>看題目覺得自己解得開</h3><ul>\n<li>有效率的解開</li>\n<li>有解開但是時間花較久</li>\n<li>最後解不開</li>\n</ul>\n<h3 id=\"看題目就覺得看不懂\"><a href=\"#看題目就覺得看不懂\" class=\"headerlink\" title=\"看題目就覺得看不懂\"></a>看題目就覺得看不懂</h3><p>撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。</p>\n<h2 id=\"推薦初學者寫程式的作法\"><a href=\"#推薦初學者寫程式的作法\" class=\"headerlink\" title=\"推薦初學者寫程式的作法\"></a>推薦初學者寫程式的作法</h2><hr>\n<p>首先看一道題目，然後按照以下的作法，題目是：</p>\n<p>如何印出 1-100 之間的偶數？</p>\n<h3 id=\"想一下解法，不寫任何程式碼\"><a href=\"#想一下解法，不寫任何程式碼\" class=\"headerlink\" title=\"想一下解法，不寫任何程式碼\"></a>想一下解法，不寫任何程式碼</h3><p>先不要急著想寫 code，想如何一步一步解決的方法。</p>\n<ol>\n<li>如何印出 1-100</li>\n<li>如何判斷偶數</li>\n</ol>\n<h3 id=\"把解法寫成-pseudo-code\"><a href=\"#把解法寫成-pseudo-code\" class=\"headerlink\" title=\"把解法寫成 pseudo code\"></a>把解法寫成 pseudo code</h3><p>虛擬碼（pseudo code）在維基百科的解釋： </p>\n<blockquote>\n<p>更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。</p>\n</blockquote>\n<p>主要是讓自己看得懂的方法，首先要讓如何印出 1-100：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>然後題目是要印出偶數，所以把第 3 步改成判斷式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">如果 i 是偶數，印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">if i &gt; 100 then exit</span><br><span class=\"line\">if i % 2 &#x3D;&#x3D;&#x3D; 0, print i</span><br><span class=\"line\">i &#x3D; i + 1</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊還可以進一步寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (i from 1 to 100) do</span><br><span class=\"line\">\tif (i % 2 &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">\tprint i</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把-pseudo-code-翻譯成程式碼\"><a href=\"#把-pseudo-code-翻譯成程式碼\" class=\"headerlink\" title=\"把 pseudo code 翻譯成程式碼\"></a>把 pseudo code 翻譯成程式碼</h3><p>到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ( let i &#x3D; 1; i &lt; 100; i ++) &#123;</span><br><span class=\"line\">\tif(i % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">\t\tconsole.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -&gt; <a href=\"https://medium.com/@hulitw/ramen-and-api-6238437dc544\" target=\"_blank\" rel=\"noopener\">從拉麵店的販賣機理解什麼是 API</a></p>\n<p>最近作者開了一系列的課 -&gt; <a href=\"https://lidemy.com/p/alg101-leetcode\" target=\"_blank\" rel=\"noopener\">先別急著寫 leetcode</a>。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。</p>","more":"<h2 id=\"會寫程式的人與初學者差別在哪？\"><a href=\"#會寫程式的人與初學者差別在哪？\" class=\"headerlink\" title=\"會寫程式的人與初學者差別在哪？\"></a>會寫程式的人與初學者差別在哪？</h2><hr>\n<h3 id=\"會寫程式的人\"><a href=\"#會寫程式的人\" class=\"headerlink\" title=\"會寫程式的人\"></a>會寫程式的人</h3><ol>\n<li>先想解法</li>\n<li>如果是有做過或是簡單的，就會直接構思出方法</li>\n<li>如果比較困難或是複雜的問題，就把解法轉換成程式碼</li>\n</ol>\n<h3 id=\"初學者\"><a href=\"#初學者\" class=\"headerlink\" title=\"初學者\"></a>初學者</h3><ul>\n<li>邊寫邊想怎麼解</li>\n<li>試著套用自己以前學過的語法</li>\n</ul>\n<p>這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。</p>\n<h2 id=\"在解題會有兩種情況\"><a href=\"#在解題會有兩種情況\" class=\"headerlink\" title=\"在解題會有兩種情況\"></a>在解題會有兩種情況</h2><hr>\n<h3 id=\"看題目覺得自己解得開\"><a href=\"#看題目覺得自己解得開\" class=\"headerlink\" title=\"看題目覺得自己解得開\"></a>看題目覺得自己解得開</h3><ul>\n<li>有效率的解開</li>\n<li>有解開但是時間花較久</li>\n<li>最後解不開</li>\n</ul>\n<h3 id=\"看題目就覺得看不懂\"><a href=\"#看題目就覺得看不懂\" class=\"headerlink\" title=\"看題目就覺得看不懂\"></a>看題目就覺得看不懂</h3><p>撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。</p>\n<h2 id=\"推薦初學者寫程式的作法\"><a href=\"#推薦初學者寫程式的作法\" class=\"headerlink\" title=\"推薦初學者寫程式的作法\"></a>推薦初學者寫程式的作法</h2><hr>\n<p>首先看一道題目，然後按照以下的作法，題目是：</p>\n<p>如何印出 1-100 之間的偶數？</p>\n<h3 id=\"想一下解法，不寫任何程式碼\"><a href=\"#想一下解法，不寫任何程式碼\" class=\"headerlink\" title=\"想一下解法，不寫任何程式碼\"></a>想一下解法，不寫任何程式碼</h3><p>先不要急著想寫 code，想如何一步一步解決的方法。</p>\n<ol>\n<li>如何印出 1-100</li>\n<li>如何判斷偶數</li>\n</ol>\n<h3 id=\"把解法寫成-pseudo-code\"><a href=\"#把解法寫成-pseudo-code\" class=\"headerlink\" title=\"把解法寫成 pseudo code\"></a>把解法寫成 pseudo code</h3><p>虛擬碼（pseudo code）在維基百科的解釋： </p>\n<blockquote>\n<p>更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。</p>\n</blockquote>\n<p>主要是讓自己看得懂的方法，首先要讓如何印出 1-100：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>然後題目是要印出偶數，所以把第 3 步改成判斷式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">如果 i 是偶數，印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">if i &gt; 100 then exit</span><br><span class=\"line\">if i % 2 &#x3D;&#x3D;&#x3D; 0, print i</span><br><span class=\"line\">i &#x3D; i + 1</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊還可以進一步寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (i from 1 to 100) do</span><br><span class=\"line\">\tif (i % 2 &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">\tprint i</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把-pseudo-code-翻譯成程式碼\"><a href=\"#把-pseudo-code-翻譯成程式碼\" class=\"headerlink\" title=\"把 pseudo code 翻譯成程式碼\"></a>把 pseudo code 翻譯成程式碼</h3><p>到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for ( let i &#x3D; 1; i &lt; 100; i ++) &#123;</span><br><span class=\"line\">\tif(i % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">\t\tconsole.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"執行環境：程式執行","date":"2020-05-19T09:31:40.000Z","keywords":["javascript","JavaScript 全攻略：克服 JS 的奇怪部分"],"decription":"JavaScript 執行程式碼的運作情形。","_content":"\nJavaScript 在產生執行環境時，會有兩個階段。\n\n1. 第一階段是創造，會設定變數和函數到記憶體中。\n2. 第二階段則是執行。\n\n而這篇文章則會提到執行的部份。\n<!--more-->\n\n當在創造階段時，都已經設定好所有東西，到執行這個階段就很單純，只是逐行執行自己寫好的程式碼而已。進行編譯跟轉換後，讓電腦看得懂，這樣就結束了。\n\n不免俗的來看一下程式碼，當執行以下的程式碼後，會如何運作呢？\n\n```\nfunction b() {\n  console.log('Test');\n}\n\nb();            \n\nconsole.log(a);\n\nvar a = 'Hello';\n\nconsole.log(a)\n\n```\n\n首先呼叫 b()，沒有什麼問題，會執行 function 內的程式碼，印出 'Test'。\n\n第一個 `console.log(a)`，由於在創造階段時，先給 a 一個 undefined，然後執行，所以就印出 undefined。\n\n第二個 `console.log(a)`，因為有給 a 一個值，所以執行後，就印出 'Hello'。\n\n再看其他例子，下面 4 個 `console.log` 會個別印出什麼？\n\n```\nvar a;\n\nconsole.log(a);\n\nconsole.log(b);\n\nvar b = 'hello';\n\nconsole.log(b);\n\nconsole.log(c);\n```\n\n1. a 沒有值，所以 undefined。\n2. b 到這行還沒有值，所以一樣先給 undefined。\n3. b 這時候已經有給值了，所以印出 'hello'。\n4. c 並沒有宣告變數，所以在記憶體中找不到 c，所以會是錯誤，c is not defined。","source":"_posts/execution-context-code-execution.md","raw":"---\ntitle: 執行環境：程式執行\ntags:\n  - javascript\n  - 程式執行\ndate: 2020-05-19 17:31:40\ncategories: JavaScript 的怪奇物語\nkeywords:\n- javascript\n- JavaScript 全攻略：克服 JS 的奇怪部分\ndecription: JavaScript 執行程式碼的運作情形。\n---\n\nJavaScript 在產生執行環境時，會有兩個階段。\n\n1. 第一階段是創造，會設定變數和函數到記憶體中。\n2. 第二階段則是執行。\n\n而這篇文章則會提到執行的部份。\n<!--more-->\n\n當在創造階段時，都已經設定好所有東西，到執行這個階段就很單純，只是逐行執行自己寫好的程式碼而已。進行編譯跟轉換後，讓電腦看得懂，這樣就結束了。\n\n不免俗的來看一下程式碼，當執行以下的程式碼後，會如何運作呢？\n\n```\nfunction b() {\n  console.log('Test');\n}\n\nb();            \n\nconsole.log(a);\n\nvar a = 'Hello';\n\nconsole.log(a)\n\n```\n\n首先呼叫 b()，沒有什麼問題，會執行 function 內的程式碼，印出 'Test'。\n\n第一個 `console.log(a)`，由於在創造階段時，先給 a 一個 undefined，然後執行，所以就印出 undefined。\n\n第二個 `console.log(a)`，因為有給 a 一個值，所以執行後，就印出 'Hello'。\n\n再看其他例子，下面 4 個 `console.log` 會個別印出什麼？\n\n```\nvar a;\n\nconsole.log(a);\n\nconsole.log(b);\n\nvar b = 'hello';\n\nconsole.log(b);\n\nconsole.log(c);\n```\n\n1. a 沒有值，所以 undefined。\n2. b 到這行還沒有值，所以一樣先給 undefined。\n3. b 這時候已經有給值了，所以印出 'hello'。\n4. c 並沒有宣告變數，所以在記憶體中找不到 c，所以會是錯誤，c is not defined。","slug":"execution-context-code-execution","published":1,"updated":"2020-05-19T15:04:58.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyh000pb6u76tumgc0f","content":"<p>JavaScript 在產生執行環境時，會有兩個階段。</p>\n<ol>\n<li>第一階段是創造，會設定變數和函數到記憶體中。</li>\n<li>第二階段則是執行。</li>\n</ol>\n<p>而這篇文章則會提到執行的部份。</p>\n<a id=\"more\"></a>\n\n<p>當在創造階段時，都已經設定好所有東西，到執行這個階段就很單純，只是逐行執行自己寫好的程式碼而已。進行編譯跟轉換後，讓電腦看得懂，這樣就結束了。</p>\n<p>不免俗的來看一下程式碼，當執行以下的程式碼後，會如何運作呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b();            </span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n\n<p>首先呼叫 b()，沒有什麼問題，會執行 function 內的程式碼，印出 ‘Test’。</p>\n<p>第一個 <code>console.log(a)</code>，由於在創造階段時，先給 a 一個 undefined，然後執行，所以就印出 undefined。</p>\n<p>第二個 <code>console.log(a)</code>，因為有給 a 一個值，所以執行後，就印出 ‘Hello’。</p>\n<p>再看其他例子，下面 4 個 <code>console.log</code> 會個別印出什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">var b &#x3D; &#39;hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(c);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>a 沒有值，所以 undefined。</li>\n<li>b 到這行還沒有值，所以一樣先給 undefined。</li>\n<li>b 這時候已經有給值了，所以印出 ‘hello’。</li>\n<li>c 並沒有宣告變數，所以在記憶體中找不到 c，所以會是錯誤，c is not defined。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>JavaScript 在產生執行環境時，會有兩個階段。</p>\n<ol>\n<li>第一階段是創造，會設定變數和函數到記憶體中。</li>\n<li>第二階段則是執行。</li>\n</ol>\n<p>而這篇文章則會提到執行的部份。</p>","more":"<p>當在創造階段時，都已經設定好所有東西，到執行這個階段就很單純，只是逐行執行自己寫好的程式碼而已。進行編譯跟轉換後，讓電腦看得懂，這樣就結束了。</p>\n<p>不免俗的來看一下程式碼，當執行以下的程式碼後，會如何運作呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b();            </span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n\n<p>首先呼叫 b()，沒有什麼問題，會執行 function 內的程式碼，印出 ‘Test’。</p>\n<p>第一個 <code>console.log(a)</code>，由於在創造階段時，先給 a 一個 undefined，然後執行，所以就印出 undefined。</p>\n<p>第二個 <code>console.log(a)</code>，因為有給 a 一個值，所以執行後，就印出 ‘Hello’。</p>\n<p>再看其他例子，下面 4 個 <code>console.log</code> 會個別印出什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">var b &#x3D; &#39;hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(c);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>a 沒有值，所以 undefined。</li>\n<li>b 到這行還沒有值，所以一樣先給 undefined。</li>\n<li>b 這時候已經有給值了，所以印出 ‘hello’。</li>\n<li>c 並沒有宣告變數，所以在記憶體中找不到 c，所以會是錯誤，c is not defined。</li>\n</ol>"},{"title":"JS 基礎回顧 - DOM","date":"2020-05-20T09:09:33.000Z","keywords":["DOM"],"decription":"如何使用 DOM，最後做出一個 BMI 計算機。","_content":"想像一下在夾娃娃機中，我們操作著爪子，在機台中抓取我們想要的東西。\n而這樣的概念，有點像是我們要怎麼樣來藉由 JavaScript 操作網頁畫面的 HTML 元素，文件物件模型（Document Object Model, DOM）就可以幫助我們來做這件事。\n<!--more-->\n\n那麼我們有哪些爪子可以使用呢？\n一般常使用的有：\n\n* `getElementById()`\n* `getElmentsByClassName()`\n* `querySelector()`\n* `querySelectorAll()`\n\n下方有兩塊 div，如果想改變它們的文字內容的話，就可以透過 DOM 來操作。\n\n```\n<div class = \"doll\" id = \"doll-1\">娃娃1</div>\n<div class = \"doll\" id = \"doll-2\">娃娃2</div>\n```\n\n來看看個別使用的方法：\n\n## getElementById()\n---\n\n```\ndocument.getElementById('doll-1').textContent = '彌豆子';\n\nvar tanjiro = document.getElementById('doll-2');\ntanjiro.innerHTML = '炭治郎'\n```\n\n可以透過 `document.getElementById('ID名稱')` 再接 `textContent` 或是 `innerHTML` 去變更文字。\n或是宣告一個變數，指定為 `document.getElementById('ID名稱')`，再使用變數接 `textContent` 或是 `innerHTML` 去變更文字。\n\n## getElmentsByClassName()\n---\n\n```\nvar allDolls = document.getElementsByClassName('doll');\nvar length = allDolls.length;\nfor (var i = 0; i < length; i++) {\n  allDolls[i].textContent = '炭治郎'\n}\n```\n\n`getElmentsByClassName()` 的用法就不太一樣，是用在一次改變全部相同的元素。\n\n上面的是比較早期的作法，接下來的兩種方法是比較現代大部分在使用的。\n\n## querySelector()\n---\n\n跟 `getElementById()` 方法類似，只是選取的方式不太一樣，`querySelector()` 在選擇 ID 的時候比較像 CSS 的類別選取器的方式，例如：\n\n```\nvar nezuko = document.querySelector('#doll-1');\nnezuko.textContent = '彌豆子'\n```\n\n像這樣就可以將原本的內容改為想要的文字。\n\n## querySelectorAll()\n---\n\n跟 `getElmentsByClassName()` 差不多的用法，這次把 `<span>` 中改成想要的文字：\n\n```\n<div class = \"doll\" id = \"doll-1\">\n  <span></span>\n</div>\n<div class = \"doll\" id = \"doll-2\">\n  <span></span>\n</div>\n```\n\n```\nvar tanjiro = document.querySelectorAll('.doll span');\n\nfor (var i=0; i<tanjiro.length; i++) {\n  tanjiro[i].textContent = '炭治郎'\n}\n```\n\n就可以把全部同名的 class 改成想要的文字。\n\n如果想透過 `getElmentsByClassName()` 把兩個不同的 class 改成個別不同的內容的話，也是辦得到的，但先來看一下是怎麼做到的。\n\n用 `console.log(tanjiro)` 看一下用 `getElmentsByClassName()` 控制的 DOM 會是什麼內容？\n\n![Image](https://i.imgur.com/lK7RzsV.png)\n\n結果會出現陣列，所以這樣就可以用控制陣列的方式來改變該筆內容：\n\n```\nvar tanjiro = document.querySelectorAll('.doll span');\n\ntanjiro[0].textContent = '竈門';\ntanjiro[1].textContent = '炭治郎'\n```\n\n## 練習用 DOM 來做一個 BMI 計算機\n---\n\n目前已經知道如何使用 DOM 來操作網頁的元素了，那麼就試著做出一個 BMI 計算機。\n下方是做出來的成品：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"BMI 計算機 (DOM 練習)\" src=\"https://codepen.io/bucky0112/embed/xxwBxKV?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/xxwBxKV'>BMI 計算機 (DOM 練習)</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\nHTML 部份：\n\n```\n<h1>BMI 計算機</h1>\n<div class=\"inputData\">\n  <label for=\"bodyHeight\">身高</label>\n  <input type=\"number\" id=\"bodyHeight\" min=\"0\">公分\n  <label for=\"bodyWeight\">體重</label>\n  <input type=\"number\" id=\"bodyWeight\" min=\"0\">公斤\n</div>\n\n<input type=\"submit\" value=\"計算\">\n\n<h2>BMI值：</h2>\n<p id=\"calResult\"></p>\n<span id=\"bmiResult\"></span>\n```\n\n### 綁定輸入欄位\n\n首先思考如何做出當按下計算按鈕時，能夠將輸入的資料給顯示出來。\n\n先在按鈕部份加上一個事件（事件部份之後會再提到），這裏用到的是 `onclick`，並綁定一個 function，可以做呼叫並做裡面的動作：\n\n```\n<input type=\"submit\" value=\"計算\" onclick=\"getBody()\">\n```\n\n接著要讓輸入的資料能夠顯示，先試著讓輸入的資料用 `alert` 顯示看看：\n\n```\nfunction getBody() {\n  var height = document.querySelector(\"#bodyHeight\").value;\n  var weight = document.querySelector(\"#bodyWeight\").value;\n  alert(height + weight)\n}\n```\n\n有顯示資料，但是變成字串相加，所以要讓資料變成數字。\n\n### 個別函式處理資料\n\n再用一個 function 去處理資料，並帶入 BMI 計算公式：\n\n```\nfunction bmiCal(height, weight) {\n  var h = parseInt(height) / 100;  // parseInt() 資料轉成數字\n  var w = parseInt(weight);\n  return (w / (h * h)).toFixed(1); // toFixed(1) 算到小數點第 1 位\n}\n```\n\n接著再 `alert` 一次：\n\n```\nfunction getBody() {\n  var height = document.querySelector(\"#bodyHeight\").value;\n  var weight = document.querySelector(\"#bodyWeight\").value;\n  alert(bmiCal(height, weight))\n}\n```\n\n這次就可以顯示算出的數字了。\n\n### 讓 BMI 值顯示在網頁上\n\n既然可以算出資料，接著就讓資料顯示出來。\n在 `getBody()` 中綁定 DOM，並讓資料透過 `textContent` 顯示：\n\n```\nvar calResult = document.querySelector(\"#calResult\");\ncalResult.textContent = bmiCal(height, weight);\n```\n\n### 加入條件顯示是否正常\n\n都有計算結果就可以在上面做出其他的效果，這邊讓計算結果符合以下條件：\n如果超過 24 就顯示過胖，低於 18.5 顯示過瘦，其他就正常，就可以這樣寫：\n\n```\nvar bmiResult = document.querySelector(\"#bmiResult\");\nif (bmiCal(height, weight) > 24) {\n    bmiResult.textContent = \"過胖\";\n  } else if (bmiCal(height, weight) < 18.5) {\n    bmiResult.textContent = \"過瘦\";\n  } else {\n    bmiResult.textContent = \"正常\";\n  }\n```\n\n### 判斷是否輸入資料\n\n如果沒有輸入資料的話，在這樣計算結果會出錯，所以要加入判斷式，判斷是否有輸入資料：\n\n```\nif (height !== \"\" && weight !== \"\") {\n    calResult.textContent = bmiCal(height, weight);\n  } else {\n    alert(\"請輸入資料\");\n}\n```","source":"_posts/js-review-dom.md","raw":"---\ntitle: JS 基礎回顧 - DOM\ntags:\n  - DOM\n  - javascript\n  - w3HexSchool\ndate: 2020-05-20 17:09:33\ncategories: JS 基礎回顧\nkeywords:\n- DOM\ndecription: 如何使用 DOM，最後做出一個 BMI 計算機。\n---\n想像一下在夾娃娃機中，我們操作著爪子，在機台中抓取我們想要的東西。\n而這樣的概念，有點像是我們要怎麼樣來藉由 JavaScript 操作網頁畫面的 HTML 元素，文件物件模型（Document Object Model, DOM）就可以幫助我們來做這件事。\n<!--more-->\n\n那麼我們有哪些爪子可以使用呢？\n一般常使用的有：\n\n* `getElementById()`\n* `getElmentsByClassName()`\n* `querySelector()`\n* `querySelectorAll()`\n\n下方有兩塊 div，如果想改變它們的文字內容的話，就可以透過 DOM 來操作。\n\n```\n<div class = \"doll\" id = \"doll-1\">娃娃1</div>\n<div class = \"doll\" id = \"doll-2\">娃娃2</div>\n```\n\n來看看個別使用的方法：\n\n## getElementById()\n---\n\n```\ndocument.getElementById('doll-1').textContent = '彌豆子';\n\nvar tanjiro = document.getElementById('doll-2');\ntanjiro.innerHTML = '炭治郎'\n```\n\n可以透過 `document.getElementById('ID名稱')` 再接 `textContent` 或是 `innerHTML` 去變更文字。\n或是宣告一個變數，指定為 `document.getElementById('ID名稱')`，再使用變數接 `textContent` 或是 `innerHTML` 去變更文字。\n\n## getElmentsByClassName()\n---\n\n```\nvar allDolls = document.getElementsByClassName('doll');\nvar length = allDolls.length;\nfor (var i = 0; i < length; i++) {\n  allDolls[i].textContent = '炭治郎'\n}\n```\n\n`getElmentsByClassName()` 的用法就不太一樣，是用在一次改變全部相同的元素。\n\n上面的是比較早期的作法，接下來的兩種方法是比較現代大部分在使用的。\n\n## querySelector()\n---\n\n跟 `getElementById()` 方法類似，只是選取的方式不太一樣，`querySelector()` 在選擇 ID 的時候比較像 CSS 的類別選取器的方式，例如：\n\n```\nvar nezuko = document.querySelector('#doll-1');\nnezuko.textContent = '彌豆子'\n```\n\n像這樣就可以將原本的內容改為想要的文字。\n\n## querySelectorAll()\n---\n\n跟 `getElmentsByClassName()` 差不多的用法，這次把 `<span>` 中改成想要的文字：\n\n```\n<div class = \"doll\" id = \"doll-1\">\n  <span></span>\n</div>\n<div class = \"doll\" id = \"doll-2\">\n  <span></span>\n</div>\n```\n\n```\nvar tanjiro = document.querySelectorAll('.doll span');\n\nfor (var i=0; i<tanjiro.length; i++) {\n  tanjiro[i].textContent = '炭治郎'\n}\n```\n\n就可以把全部同名的 class 改成想要的文字。\n\n如果想透過 `getElmentsByClassName()` 把兩個不同的 class 改成個別不同的內容的話，也是辦得到的，但先來看一下是怎麼做到的。\n\n用 `console.log(tanjiro)` 看一下用 `getElmentsByClassName()` 控制的 DOM 會是什麼內容？\n\n![Image](https://i.imgur.com/lK7RzsV.png)\n\n結果會出現陣列，所以這樣就可以用控制陣列的方式來改變該筆內容：\n\n```\nvar tanjiro = document.querySelectorAll('.doll span');\n\ntanjiro[0].textContent = '竈門';\ntanjiro[1].textContent = '炭治郎'\n```\n\n## 練習用 DOM 來做一個 BMI 計算機\n---\n\n目前已經知道如何使用 DOM 來操作網頁的元素了，那麼就試著做出一個 BMI 計算機。\n下方是做出來的成品：\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"BMI 計算機 (DOM 練習)\" src=\"https://codepen.io/bucky0112/embed/xxwBxKV?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/xxwBxKV'>BMI 計算機 (DOM 練習)</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\nHTML 部份：\n\n```\n<h1>BMI 計算機</h1>\n<div class=\"inputData\">\n  <label for=\"bodyHeight\">身高</label>\n  <input type=\"number\" id=\"bodyHeight\" min=\"0\">公分\n  <label for=\"bodyWeight\">體重</label>\n  <input type=\"number\" id=\"bodyWeight\" min=\"0\">公斤\n</div>\n\n<input type=\"submit\" value=\"計算\">\n\n<h2>BMI值：</h2>\n<p id=\"calResult\"></p>\n<span id=\"bmiResult\"></span>\n```\n\n### 綁定輸入欄位\n\n首先思考如何做出當按下計算按鈕時，能夠將輸入的資料給顯示出來。\n\n先在按鈕部份加上一個事件（事件部份之後會再提到），這裏用到的是 `onclick`，並綁定一個 function，可以做呼叫並做裡面的動作：\n\n```\n<input type=\"submit\" value=\"計算\" onclick=\"getBody()\">\n```\n\n接著要讓輸入的資料能夠顯示，先試著讓輸入的資料用 `alert` 顯示看看：\n\n```\nfunction getBody() {\n  var height = document.querySelector(\"#bodyHeight\").value;\n  var weight = document.querySelector(\"#bodyWeight\").value;\n  alert(height + weight)\n}\n```\n\n有顯示資料，但是變成字串相加，所以要讓資料變成數字。\n\n### 個別函式處理資料\n\n再用一個 function 去處理資料，並帶入 BMI 計算公式：\n\n```\nfunction bmiCal(height, weight) {\n  var h = parseInt(height) / 100;  // parseInt() 資料轉成數字\n  var w = parseInt(weight);\n  return (w / (h * h)).toFixed(1); // toFixed(1) 算到小數點第 1 位\n}\n```\n\n接著再 `alert` 一次：\n\n```\nfunction getBody() {\n  var height = document.querySelector(\"#bodyHeight\").value;\n  var weight = document.querySelector(\"#bodyWeight\").value;\n  alert(bmiCal(height, weight))\n}\n```\n\n這次就可以顯示算出的數字了。\n\n### 讓 BMI 值顯示在網頁上\n\n既然可以算出資料，接著就讓資料顯示出來。\n在 `getBody()` 中綁定 DOM，並讓資料透過 `textContent` 顯示：\n\n```\nvar calResult = document.querySelector(\"#calResult\");\ncalResult.textContent = bmiCal(height, weight);\n```\n\n### 加入條件顯示是否正常\n\n都有計算結果就可以在上面做出其他的效果，這邊讓計算結果符合以下條件：\n如果超過 24 就顯示過胖，低於 18.5 顯示過瘦，其他就正常，就可以這樣寫：\n\n```\nvar bmiResult = document.querySelector(\"#bmiResult\");\nif (bmiCal(height, weight) > 24) {\n    bmiResult.textContent = \"過胖\";\n  } else if (bmiCal(height, weight) < 18.5) {\n    bmiResult.textContent = \"過瘦\";\n  } else {\n    bmiResult.textContent = \"正常\";\n  }\n```\n\n### 判斷是否輸入資料\n\n如果沒有輸入資料的話，在這樣計算結果會出錯，所以要加入判斷式，判斷是否有輸入資料：\n\n```\nif (height !== \"\" && weight !== \"\") {\n    calResult.textContent = bmiCal(height, weight);\n  } else {\n    alert(\"請輸入資料\");\n}\n```","slug":"js-review-dom","published":1,"updated":"2020-05-24T07:09:05.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyi000rb6u727iofbbf","content":"<p>想像一下在夾娃娃機中，我們操作著爪子，在機台中抓取我們想要的東西。<br>而這樣的概念，有點像是我們要怎麼樣來藉由 JavaScript 操作網頁畫面的 HTML 元素，文件物件模型（Document Object Model, DOM）就可以幫助我們來做這件事。</p>\n<a id=\"more\"></a>\n\n<p>那麼我們有哪些爪子可以使用呢？<br>一般常使用的有：</p>\n<ul>\n<li><code>getElementById()</code></li>\n<li><code>getElmentsByClassName()</code></li>\n<li><code>querySelector()</code></li>\n<li><code>querySelectorAll()</code></li>\n</ul>\n<p>下方有兩塊 div，如果想改變它們的文字內容的話，就可以透過 DOM 來操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;娃娃1&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;娃娃2&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>來看看個別使用的方法：</p>\n<h2 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById()\"></a>getElementById()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;doll-1&#39;).textContent &#x3D; &#39;彌豆子&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">var tanjiro &#x3D; document.getElementById(&#39;doll-2&#39;);</span><br><span class=\"line\">tanjiro.innerHTML &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<p>可以透過 <code>document.getElementById(&#39;ID名稱&#39;)</code> 再接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。<br>或是宣告一個變數，指定為 <code>document.getElementById(&#39;ID名稱&#39;)</code>，再使用變數接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。</p>\n<h2 id=\"getElmentsByClassName\"><a href=\"#getElmentsByClassName\" class=\"headerlink\" title=\"getElmentsByClassName()\"></a>getElmentsByClassName()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var allDolls &#x3D; document.getElementsByClassName(&#39;doll&#39;);</span><br><span class=\"line\">var length &#x3D; allDolls.length;</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">  allDolls[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>getElmentsByClassName()</code> 的用法就不太一樣，是用在一次改變全部相同的元素。</p>\n<p>上面的是比較早期的作法，接下來的兩種方法是比較現代大部分在使用的。</p>\n<h2 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector()\"></a>querySelector()</h2><hr>\n<p>跟 <code>getElementById()</code> 方法類似，只是選取的方式不太一樣，<code>querySelector()</code> 在選擇 ID 的時候比較像 CSS 的類別選取器的方式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nezuko &#x3D; document.querySelector(&#39;#doll-1&#39;);</span><br><span class=\"line\">nezuko.textContent &#x3D; &#39;彌豆子&#39;</span><br></pre></td></tr></table></figure>\n\n<p>像這樣就可以將原本的內容改為想要的文字。</p>\n<h2 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll()\"></a>querySelectorAll()</h2><hr>\n<p>跟 <code>getElmentsByClassName()</code> 差不多的用法，這次把 <code>&lt;span&gt;</code> 中改成想要的文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;tanjiro.length; i++) &#123;</span><br><span class=\"line\">  tanjiro[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以把全部同名的 class 改成想要的文字。</p>\n<p>如果想透過 <code>getElmentsByClassName()</code> 把兩個不同的 class 改成個別不同的內容的話，也是辦得到的，但先來看一下是怎麼做到的。</p>\n<p>用 <code>console.log(tanjiro)</code> 看一下用 <code>getElmentsByClassName()</code> 控制的 DOM 會是什麼內容？</p>\n<p><img src=\"https://i.imgur.com/lK7RzsV.png\" alt=\"Image\"></p>\n<p>結果會出現陣列，所以這樣就可以用控制陣列的方式來改變該筆內容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">tanjiro[0].textContent &#x3D; &#39;竈門&#39;;</span><br><span class=\"line\">tanjiro[1].textContent &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"練習用-DOM-來做一個-BMI-計算機\"><a href=\"#練習用-DOM-來做一個-BMI-計算機\" class=\"headerlink\" title=\"練習用 DOM 來做一個 BMI 計算機\"></a>練習用 DOM 來做一個 BMI 計算機</h2><hr>\n<p>目前已經知道如何使用 DOM 來操作網頁的元素了，那麼就試著做出一個 BMI 計算機。<br>下方是做出來的成品：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"BMI 計算機 (DOM 練習)\" src=\"https://codepen.io/bucky0112/embed/xxwBxKV?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/xxwBxKV' target=\"_blank\" rel=\"noopener\">BMI 計算機 (DOM 練習)</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>HTML 部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;BMI 計算機&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;inputData&quot;&gt;</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyHeight&quot;&gt;身高&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyHeight&quot; min&#x3D;&quot;0&quot;&gt;公分</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyWeight&quot;&gt;體重&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyWeight&quot; min&#x3D;&quot;0&quot;&gt;公斤</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;BMI值：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;calResult&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;span id&#x3D;&quot;bmiResult&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"綁定輸入欄位\"><a href=\"#綁定輸入欄位\" class=\"headerlink\" title=\"綁定輸入欄位\"></a>綁定輸入欄位</h3><p>首先思考如何做出當按下計算按鈕時，能夠將輸入的資料給顯示出來。</p>\n<p>先在按鈕部份加上一個事件（事件部份之後會再提到），這裏用到的是 <code>onclick</code>，並綁定一個 function，可以做呼叫並做裡面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot; onclick&#x3D;&quot;getBody()&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接著要讓輸入的資料能夠顯示，先試著讓輸入的資料用 <code>alert</code> 顯示看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(height + weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有顯示資料，但是變成字串相加，所以要讓資料變成數字。</p>\n<h3 id=\"個別函式處理資料\"><a href=\"#個別函式處理資料\" class=\"headerlink\" title=\"個別函式處理資料\"></a>個別函式處理資料</h3><p>再用一個 function 去處理資料，並帶入 BMI 計算公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bmiCal(height, weight) &#123;</span><br><span class=\"line\">  var h &#x3D; parseInt(height) &#x2F; 100;  &#x2F;&#x2F; parseInt() 資料轉成數字</span><br><span class=\"line\">  var w &#x3D; parseInt(weight);</span><br><span class=\"line\">  return (w &#x2F; (h * h)).toFixed(1); &#x2F;&#x2F; toFixed(1) 算到小數點第 1 位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著再 <code>alert</code> 一次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(bmiCal(height, weight))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這次就可以顯示算出的數字了。</p>\n<h3 id=\"讓-BMI-值顯示在網頁上\"><a href=\"#讓-BMI-值顯示在網頁上\" class=\"headerlink\" title=\"讓 BMI 值顯示在網頁上\"></a>讓 BMI 值顯示在網頁上</h3><p>既然可以算出資料，接著就讓資料顯示出來。<br>在 <code>getBody()</code> 中綁定 DOM，並讓資料透過 <code>textContent</code> 顯示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var calResult &#x3D; document.querySelector(&quot;#calResult&quot;);</span><br><span class=\"line\">calResult.textContent &#x3D; bmiCal(height, weight);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加入條件顯示是否正常\"><a href=\"#加入條件顯示是否正常\" class=\"headerlink\" title=\"加入條件顯示是否正常\"></a>加入條件顯示是否正常</h3><p>都有計算結果就可以在上面做出其他的效果，這邊讓計算結果符合以下條件：<br>如果超過 24 就顯示過胖，低於 18.5 顯示過瘦，其他就正常，就可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bmiResult &#x3D; document.querySelector(&quot;#bmiResult&quot;);</span><br><span class=\"line\">if (bmiCal(height, weight) &gt; 24) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過胖&quot;;</span><br><span class=\"line\">  &#125; else if (bmiCal(height, weight) &lt; 18.5) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過瘦&quot;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;正常&quot;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判斷是否輸入資料\"><a href=\"#判斷是否輸入資料\" class=\"headerlink\" title=\"判斷是否輸入資料\"></a>判斷是否輸入資料</h3><p>如果沒有輸入資料的話，在這樣計算結果會出錯，所以要加入判斷式，判斷是否有輸入資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (height !&#x3D;&#x3D; &quot;&quot; &amp;&amp; weight !&#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class=\"line\">    calResult.textContent &#x3D; bmiCal(height, weight);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    alert(&quot;請輸入資料&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>想像一下在夾娃娃機中，我們操作著爪子，在機台中抓取我們想要的東西。<br>而這樣的概念，有點像是我們要怎麼樣來藉由 JavaScript 操作網頁畫面的 HTML 元素，文件物件模型（Document Object Model, DOM）就可以幫助我們來做這件事。</p>","more":"<p>那麼我們有哪些爪子可以使用呢？<br>一般常使用的有：</p>\n<ul>\n<li><code>getElementById()</code></li>\n<li><code>getElmentsByClassName()</code></li>\n<li><code>querySelector()</code></li>\n<li><code>querySelectorAll()</code></li>\n</ul>\n<p>下方有兩塊 div，如果想改變它們的文字內容的話，就可以透過 DOM 來操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;娃娃1&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;娃娃2&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>來看看個別使用的方法：</p>\n<h2 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById()\"></a>getElementById()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;doll-1&#39;).textContent &#x3D; &#39;彌豆子&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">var tanjiro &#x3D; document.getElementById(&#39;doll-2&#39;);</span><br><span class=\"line\">tanjiro.innerHTML &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<p>可以透過 <code>document.getElementById(&#39;ID名稱&#39;)</code> 再接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。<br>或是宣告一個變數，指定為 <code>document.getElementById(&#39;ID名稱&#39;)</code>，再使用變數接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。</p>\n<h2 id=\"getElmentsByClassName\"><a href=\"#getElmentsByClassName\" class=\"headerlink\" title=\"getElmentsByClassName()\"></a>getElmentsByClassName()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var allDolls &#x3D; document.getElementsByClassName(&#39;doll&#39;);</span><br><span class=\"line\">var length &#x3D; allDolls.length;</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">  allDolls[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>getElmentsByClassName()</code> 的用法就不太一樣，是用在一次改變全部相同的元素。</p>\n<p>上面的是比較早期的作法，接下來的兩種方法是比較現代大部分在使用的。</p>\n<h2 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector()\"></a>querySelector()</h2><hr>\n<p>跟 <code>getElementById()</code> 方法類似，只是選取的方式不太一樣，<code>querySelector()</code> 在選擇 ID 的時候比較像 CSS 的類別選取器的方式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nezuko &#x3D; document.querySelector(&#39;#doll-1&#39;);</span><br><span class=\"line\">nezuko.textContent &#x3D; &#39;彌豆子&#39;</span><br></pre></td></tr></table></figure>\n\n<p>像這樣就可以將原本的內容改為想要的文字。</p>\n<h2 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll()\"></a>querySelectorAll()</h2><hr>\n<p>跟 <code>getElmentsByClassName()</code> 差不多的用法，這次把 <code>&lt;span&gt;</code> 中改成想要的文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;tanjiro.length; i++) &#123;</span><br><span class=\"line\">  tanjiro[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以把全部同名的 class 改成想要的文字。</p>\n<p>如果想透過 <code>getElmentsByClassName()</code> 把兩個不同的 class 改成個別不同的內容的話，也是辦得到的，但先來看一下是怎麼做到的。</p>\n<p>用 <code>console.log(tanjiro)</code> 看一下用 <code>getElmentsByClassName()</code> 控制的 DOM 會是什麼內容？</p>\n<p><img src=\"https://i.imgur.com/lK7RzsV.png\" alt=\"Image\"></p>\n<p>結果會出現陣列，所以這樣就可以用控制陣列的方式來改變該筆內容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">tanjiro[0].textContent &#x3D; &#39;竈門&#39;;</span><br><span class=\"line\">tanjiro[1].textContent &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"練習用-DOM-來做一個-BMI-計算機\"><a href=\"#練習用-DOM-來做一個-BMI-計算機\" class=\"headerlink\" title=\"練習用 DOM 來做一個 BMI 計算機\"></a>練習用 DOM 來做一個 BMI 計算機</h2><hr>\n<p>目前已經知道如何使用 DOM 來操作網頁的元素了，那麼就試著做出一個 BMI 計算機。<br>下方是做出來的成品：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"BMI 計算機 (DOM 練習)\" src=\"https://codepen.io/bucky0112/embed/xxwBxKV?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/xxwBxKV' target=\"_blank\" rel=\"noopener\">BMI 計算機 (DOM 練習)</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>HTML 部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;BMI 計算機&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;inputData&quot;&gt;</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyHeight&quot;&gt;身高&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyHeight&quot; min&#x3D;&quot;0&quot;&gt;公分</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyWeight&quot;&gt;體重&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyWeight&quot; min&#x3D;&quot;0&quot;&gt;公斤</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;BMI值：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;calResult&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;span id&#x3D;&quot;bmiResult&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"綁定輸入欄位\"><a href=\"#綁定輸入欄位\" class=\"headerlink\" title=\"綁定輸入欄位\"></a>綁定輸入欄位</h3><p>首先思考如何做出當按下計算按鈕時，能夠將輸入的資料給顯示出來。</p>\n<p>先在按鈕部份加上一個事件（事件部份之後會再提到），這裏用到的是 <code>onclick</code>，並綁定一個 function，可以做呼叫並做裡面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot; onclick&#x3D;&quot;getBody()&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接著要讓輸入的資料能夠顯示，先試著讓輸入的資料用 <code>alert</code> 顯示看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(height + weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有顯示資料，但是變成字串相加，所以要讓資料變成數字。</p>\n<h3 id=\"個別函式處理資料\"><a href=\"#個別函式處理資料\" class=\"headerlink\" title=\"個別函式處理資料\"></a>個別函式處理資料</h3><p>再用一個 function 去處理資料，並帶入 BMI 計算公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bmiCal(height, weight) &#123;</span><br><span class=\"line\">  var h &#x3D; parseInt(height) &#x2F; 100;  &#x2F;&#x2F; parseInt() 資料轉成數字</span><br><span class=\"line\">  var w &#x3D; parseInt(weight);</span><br><span class=\"line\">  return (w &#x2F; (h * h)).toFixed(1); &#x2F;&#x2F; toFixed(1) 算到小數點第 1 位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著再 <code>alert</code> 一次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(bmiCal(height, weight))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這次就可以顯示算出的數字了。</p>\n<h3 id=\"讓-BMI-值顯示在網頁上\"><a href=\"#讓-BMI-值顯示在網頁上\" class=\"headerlink\" title=\"讓 BMI 值顯示在網頁上\"></a>讓 BMI 值顯示在網頁上</h3><p>既然可以算出資料，接著就讓資料顯示出來。<br>在 <code>getBody()</code> 中綁定 DOM，並讓資料透過 <code>textContent</code> 顯示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var calResult &#x3D; document.querySelector(&quot;#calResult&quot;);</span><br><span class=\"line\">calResult.textContent &#x3D; bmiCal(height, weight);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加入條件顯示是否正常\"><a href=\"#加入條件顯示是否正常\" class=\"headerlink\" title=\"加入條件顯示是否正常\"></a>加入條件顯示是否正常</h3><p>都有計算結果就可以在上面做出其他的效果，這邊讓計算結果符合以下條件：<br>如果超過 24 就顯示過胖，低於 18.5 顯示過瘦，其他就正常，就可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var bmiResult &#x3D; document.querySelector(&quot;#bmiResult&quot;);</span><br><span class=\"line\">if (bmiCal(height, weight) &gt; 24) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過胖&quot;;</span><br><span class=\"line\">  &#125; else if (bmiCal(height, weight) &lt; 18.5) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過瘦&quot;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;正常&quot;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判斷是否輸入資料\"><a href=\"#判斷是否輸入資料\" class=\"headerlink\" title=\"判斷是否輸入資料\"></a>判斷是否輸入資料</h3><p>如果沒有輸入資料的話，在這樣計算結果會出錯，所以要加入判斷式，判斷是否有輸入資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (height !&#x3D;&#x3D; &quot;&quot; &amp;&amp; weight !&#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class=\"line\">    calResult.textContent &#x3D; bmiCal(height, weight);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    alert(&quot;請輸入資料&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue.js 的 component 是什麼？","date":"2020-06-01T14:01:07.000Z","keywords":["vue","component","prop","x-template","全局註冊","局部註冊"],"decription":"Learn about what is Component, and how to use it.","_content":"當做完一個專案時，每當想要修改某樣東西時，都要再重新審視程式碼，這時候就會非常痛苦。\n而 Vue.js 中有一個 component 的概念，就不用再害怕維護專案啦。\n<!--more-->\n\n## 元件概念\n---\n\n而什麼是 component 呢？\n\n![Image](https://i.imgur.com/MeHiDbO.png)\n> 圖片來源：[Vue.js 官網](https://cn.vuejs.org/v2/guide/components.html)\n\n它的概念是一個網頁中，一些比較常用的組件，例如：nav bar 或是 side bar 等等區塊。這時候使用 component 來控制一個區塊，這樣就會非常好整理以及修改。\n\n下面有一個點擊的範例，是從 [Components Basics](https://vuejs.org/v2/guide/components.html) 稍微做個修改的範例，讓我們試著改成使用 Component 來看看：\n\n```\n<div id=\"app\">\n  <button-counter>\n    <button @click=\"plus\">\n      我被按了 {{ count }} 下\n    </button>\n  </button-counter>\n</div>\n```\n\n```\nlet vm = new Vue({\n\tel: '#app',\n  data: {\n  \tcount: 0\n  },\n  methods: {\n  \tplus: function() {\n    \tthis.count +=1\n    }\n  }\n})\n```\n\n## 做一個一樣功能的 component\n---\n\n使用方式如下：\n\n1. 為了跟上面區別，所以定義一個名稱為 click-counter 的 component。\n2. 建立 data， 必須是 function，並 return 值。\n3. 建立 template，把原本 HTML 中的 template 放入。\n4. 建立 methods，跟原本的 methods 一樣。\n5. HTML 只要留有跟 component 同名稱的元素就好。\n\n```\nVue.component('click-counter', {\n  data: function() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"plus\">\n      我被按了 {{ count }} 下\n    </button>\n  `,\n  methods: {\n  \tplus: function() {\n    \tthis.count +=1\n    }\n  }\n})\n```\n\n```\n<div id=\"app\">\n  <click-counter></click-counter>\n</div>\n```\n\n這樣的好處是可以讓建立好的 component 可以重複使用，如果你要一次擺 5 個，也是可以的，並且每個都是獨立運行的，想要試玩可以看下方 JSFiddle 建立的範例：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/87/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 透過 prop 傳遞建立 component\n---\n\n如果想要從外層傳遞資料到內層來建立 component 的話，也就是透過原本的 `new Vue()` 建立的資料，而不是在 component 中取得資料的話，就可以透過 `props` 來存取。\n\n1. 建立 `Vue.component('component 名稱', {})`。\n2. 在 component 中建立 `template`。\n3. 在 component 中建立 `props`，並定義它來獲取資料。\n4. 在 HTML 的 component 中綁定 `props` 定義的名稱，並指定給 data 中的資料。\n\n```\n<div id=\"app\">\n  <component-plus \n    :compo-count= 'count'  // prop 綁定 count\n  >\n  </component-plus>\n</div>\n```\n\n```\nVue.component('component-plus', {\n  props: ['compoCount'], // 透過 prop 傳值\n  template: `\n  \t<button @click=\"plus\">  \n    \t我被按了 {{ compoCount }} 下 // template 中都要使用 props 的名稱，而不是原本的名稱\n  \t</button>\n  `,\n  methods: {\n    plus: function() {\n      this.count +=1\n    }\n  }\n})\n\nlet vm = new Vue({\n\tel: '#app',\n  data: {\n    count: 0\n  }\n})\n```\n\n使用效果是一樣的：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/188/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n**注意定義 props 時，命名方式按照官方說明最好使用 camelCase，在 HTML 中則是使用 kebab-case。**\n**並且在定義時，應該盡量詳細，至少指定其類型。雖然這裡例子使用字串組成陣列可以使用，但如果定義詳細一點可以改成以下：**\n\n```\nprops: {\n  \tcompoCount: String\n}\n```\n\n## 使用 x-template 建立 component\n---\n\n在 Vue.js 中，還可以使用另一種方式來建立 component，這邊要介紹的是使用 x-template，這邊使用上面的例子來修改。\n\n1. 建立 `Vue.component('component 名稱', {})`。 \n2. 在 HTML 中建立一個 `<script type=\"text/x-template\" id=\"id名稱\">`，id 將 template 引用過去。\n3. 在 component 中建立 `template: '#id名稱'`，放入 id 名稱。\n4. 在 component 中建立 `props`，並定義它來獲取資料。\n5. 在 HTML 的 component 中綁定 `props` 定義的名稱，並指定給 data 中的資料。\n6. 在 `<script type=\"text/x-template\" id=\"id名稱\">` 中放入要顯示的 template。\n\n```\n<div id=\"app\">\n  <component-plus \n    :compo-count='count'\n  >  \n  </component-plus>\n</div>\n\n<script type=\"text/x-template\" id=\"componentCount\">\n\t<button @click=\"plus\">\n  \t我被按了 {{ compoCount }} 下\n  </button>\n</script>\n```\n\n```\nVue.component('component-plus', {\n\ttemplate: '#componentCount',\n  props: ['compoCount'],\n  methods: {\n  \tplus: function() {\n    \tthis.compoCount +=1\n    }\n  }\n})\n\nlet vm = new Vue({\n\tel: '#app',\n \tdata: {\n    count: 0\n  },\n})\n```\n**有些情況，例如 HTML 沒有辦法正確渲染元素時，等等的例子會提到，就可以使用 `is` 來掛載 template，像下方的例子：**\n\n```\n<div \n  is=\"component-plus\"\n  :compo-count='count'\n>  \n</div>\n```\n\n完成的效果也是一樣：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/202/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 使用 x-template 顯示表格\n---\n\n前面有提到有些情況下，HTML 會需要使用 `is` 來掛載顯示正確的畫面，這裏會使用表格的例子來說明。\n下方有一個表格，接下來要試著使用 x-template 製作 component：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n跟前面提到的使用 x-template 的方法差不多，這邊就不再多做示範，直接上做好的樣子：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/8/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n結果出來的樣子跑版了。\n打開開發者工具看一下，發現結構怪怪的，只有 4 個 `<tr>`。\n\n![Image](https://i.imgur.com/8U0Yl27.png)\n\n原因是 HTML 的特性，在 `<table>` 中只能夠放 `<tr>`，但是這裏卻是放入 component 的模板，所以需要使用 `is` 來掛載。\n\n```\n<tbody>\n  <!-- <slam-dunk\n    v-for=\"(item, key) in data\" \n    :character=\"item\" \n    :key=\"key\"\n  >\n  </slam-dunk> -->\n\n  <!-- 改成用 is 來掛載 tr -->\n\n  <tr\n    is=\"slam-dunk\"\n    v-for=\"(item, key) in data\" \n    :character=\"item\" \n    :key=\"key\"\n  >\n  </tr>\n  \n</tbody>\n```\n\n結構就變正常，資料也可以正確的顯示了。\n\n![Image](https://i.imgur.com/PL2mzwI.png)\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/11/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 全局註冊與局部註冊\n---\n\n### 全局註冊\n\n目前為止，我們都是使用全局註冊來製作 component：\n\n```\nVue.component('component-name', {})\n```\n\n這樣做的話，如果之後有新創建 Vue 根實例 (`new Vue`) 的話，就會一起共用：\n\n```\nVue.component('component-a', {})\nVue.component('component-b', {})\nVue.component('component-c', {})\n\nnew Vue({ el: '#app' })\n```\n\n```\n<div id=\"app\">\n  <component-a></component-a>\n  <component-b></component-b>\n  <component-c></component-c>\n</div>\n```\n\n### 局部註冊\n\n根據[官網](https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C)表示，如果使用全局註冊，假設某個 component 不再使用的話，一樣會保留在最終的建構結果中，這樣會造成用戶無謂的下載 JavaScript 資料。\n所以更好的用法，會是使用局部註冊：\n\n1. 透過一個物件來定義 component：\n\n```\nvar componentA = {}\n```\n\n2. 在 `new Vue` 中建立 `components` 並定義要使用的 component:\n\n```\nnew Vue({\n  el: '#app',\n  components: {\n    'component-a': componentA\n  }\n})\n```\n\n把上面的範例改成局部註冊：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/17/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n要注意的是，**局部註冊的組件在其子組件中是不可用的**。\n如果想要讓 A 組件可以在 B 組件中使用的話，可以這樣寫：\n\n```\nvar componentA = {}\n\nvar componentB = {\n  components: {\n    'component-a': componentA\n  }\n}\n```","source":"_posts/vue-components.md","raw":"---\ntitle: Vue.js 的 component 是什麼？\ntags:\n  - vue\n  - component\n  - w3HexSchool\n  - prop\n  - x-template\ndate: 2020-06-01 22:01:07\ncategories: vue\nkeywords:\n  - vue\n  - component\n  - prop\n  - x-template\n  - 全局註冊\n  - 局部註冊\ndecription: Learn about what is Component, and how to use it.\n---\n當做完一個專案時，每當想要修改某樣東西時，都要再重新審視程式碼，這時候就會非常痛苦。\n而 Vue.js 中有一個 component 的概念，就不用再害怕維護專案啦。\n<!--more-->\n\n## 元件概念\n---\n\n而什麼是 component 呢？\n\n![Image](https://i.imgur.com/MeHiDbO.png)\n> 圖片來源：[Vue.js 官網](https://cn.vuejs.org/v2/guide/components.html)\n\n它的概念是一個網頁中，一些比較常用的組件，例如：nav bar 或是 side bar 等等區塊。這時候使用 component 來控制一個區塊，這樣就會非常好整理以及修改。\n\n下面有一個點擊的範例，是從 [Components Basics](https://vuejs.org/v2/guide/components.html) 稍微做個修改的範例，讓我們試著改成使用 Component 來看看：\n\n```\n<div id=\"app\">\n  <button-counter>\n    <button @click=\"plus\">\n      我被按了 {{ count }} 下\n    </button>\n  </button-counter>\n</div>\n```\n\n```\nlet vm = new Vue({\n\tel: '#app',\n  data: {\n  \tcount: 0\n  },\n  methods: {\n  \tplus: function() {\n    \tthis.count +=1\n    }\n  }\n})\n```\n\n## 做一個一樣功能的 component\n---\n\n使用方式如下：\n\n1. 為了跟上面區別，所以定義一個名稱為 click-counter 的 component。\n2. 建立 data， 必須是 function，並 return 值。\n3. 建立 template，把原本 HTML 中的 template 放入。\n4. 建立 methods，跟原本的 methods 一樣。\n5. HTML 只要留有跟 component 同名稱的元素就好。\n\n```\nVue.component('click-counter', {\n  data: function() {\n    return {\n      count: 0\n    }\n  },\n  template: `\n    <button @click=\"plus\">\n      我被按了 {{ count }} 下\n    </button>\n  `,\n  methods: {\n  \tplus: function() {\n    \tthis.count +=1\n    }\n  }\n})\n```\n\n```\n<div id=\"app\">\n  <click-counter></click-counter>\n</div>\n```\n\n這樣的好處是可以讓建立好的 component 可以重複使用，如果你要一次擺 5 個，也是可以的，並且每個都是獨立運行的，想要試玩可以看下方 JSFiddle 建立的範例：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/87/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 透過 prop 傳遞建立 component\n---\n\n如果想要從外層傳遞資料到內層來建立 component 的話，也就是透過原本的 `new Vue()` 建立的資料，而不是在 component 中取得資料的話，就可以透過 `props` 來存取。\n\n1. 建立 `Vue.component('component 名稱', {})`。\n2. 在 component 中建立 `template`。\n3. 在 component 中建立 `props`，並定義它來獲取資料。\n4. 在 HTML 的 component 中綁定 `props` 定義的名稱，並指定給 data 中的資料。\n\n```\n<div id=\"app\">\n  <component-plus \n    :compo-count= 'count'  // prop 綁定 count\n  >\n  </component-plus>\n</div>\n```\n\n```\nVue.component('component-plus', {\n  props: ['compoCount'], // 透過 prop 傳值\n  template: `\n  \t<button @click=\"plus\">  \n    \t我被按了 {{ compoCount }} 下 // template 中都要使用 props 的名稱，而不是原本的名稱\n  \t</button>\n  `,\n  methods: {\n    plus: function() {\n      this.count +=1\n    }\n  }\n})\n\nlet vm = new Vue({\n\tel: '#app',\n  data: {\n    count: 0\n  }\n})\n```\n\n使用效果是一樣的：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/188/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n**注意定義 props 時，命名方式按照官方說明最好使用 camelCase，在 HTML 中則是使用 kebab-case。**\n**並且在定義時，應該盡量詳細，至少指定其類型。雖然這裡例子使用字串組成陣列可以使用，但如果定義詳細一點可以改成以下：**\n\n```\nprops: {\n  \tcompoCount: String\n}\n```\n\n## 使用 x-template 建立 component\n---\n\n在 Vue.js 中，還可以使用另一種方式來建立 component，這邊要介紹的是使用 x-template，這邊使用上面的例子來修改。\n\n1. 建立 `Vue.component('component 名稱', {})`。 \n2. 在 HTML 中建立一個 `<script type=\"text/x-template\" id=\"id名稱\">`，id 將 template 引用過去。\n3. 在 component 中建立 `template: '#id名稱'`，放入 id 名稱。\n4. 在 component 中建立 `props`，並定義它來獲取資料。\n5. 在 HTML 的 component 中綁定 `props` 定義的名稱，並指定給 data 中的資料。\n6. 在 `<script type=\"text/x-template\" id=\"id名稱\">` 中放入要顯示的 template。\n\n```\n<div id=\"app\">\n  <component-plus \n    :compo-count='count'\n  >  \n  </component-plus>\n</div>\n\n<script type=\"text/x-template\" id=\"componentCount\">\n\t<button @click=\"plus\">\n  \t我被按了 {{ compoCount }} 下\n  </button>\n</script>\n```\n\n```\nVue.component('component-plus', {\n\ttemplate: '#componentCount',\n  props: ['compoCount'],\n  methods: {\n  \tplus: function() {\n    \tthis.compoCount +=1\n    }\n  }\n})\n\nlet vm = new Vue({\n\tel: '#app',\n \tdata: {\n    count: 0\n  },\n})\n```\n**有些情況，例如 HTML 沒有辦法正確渲染元素時，等等的例子會提到，就可以使用 `is` 來掛載 template，像下方的例子：**\n\n```\n<div \n  is=\"component-plus\"\n  :compo-count='count'\n>  \n</div>\n```\n\n完成的效果也是一樣：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/202/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 使用 x-template 顯示表格\n---\n\n前面有提到有些情況下，HTML 會需要使用 `is` 來掛載顯示正確的畫面，這裏會使用表格的例子來說明。\n下方有一個表格，接下來要試著使用 x-template 製作 component：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n跟前面提到的使用 x-template 的方法差不多，這邊就不再多做示範，直接上做好的樣子：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/8/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n結果出來的樣子跑版了。\n打開開發者工具看一下，發現結構怪怪的，只有 4 個 `<tr>`。\n\n![Image](https://i.imgur.com/8U0Yl27.png)\n\n原因是 HTML 的特性，在 `<table>` 中只能夠放 `<tr>`，但是這裏卻是放入 component 的模板，所以需要使用 `is` 來掛載。\n\n```\n<tbody>\n  <!-- <slam-dunk\n    v-for=\"(item, key) in data\" \n    :character=\"item\" \n    :key=\"key\"\n  >\n  </slam-dunk> -->\n\n  <!-- 改成用 is 來掛載 tr -->\n\n  <tr\n    is=\"slam-dunk\"\n    v-for=\"(item, key) in data\" \n    :character=\"item\" \n    :key=\"key\"\n  >\n  </tr>\n  \n</tbody>\n```\n\n結構就變正常，資料也可以正確的顯示了。\n\n![Image](https://i.imgur.com/PL2mzwI.png)\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/11/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 全局註冊與局部註冊\n---\n\n### 全局註冊\n\n目前為止，我們都是使用全局註冊來製作 component：\n\n```\nVue.component('component-name', {})\n```\n\n這樣做的話，如果之後有新創建 Vue 根實例 (`new Vue`) 的話，就會一起共用：\n\n```\nVue.component('component-a', {})\nVue.component('component-b', {})\nVue.component('component-c', {})\n\nnew Vue({ el: '#app' })\n```\n\n```\n<div id=\"app\">\n  <component-a></component-a>\n  <component-b></component-b>\n  <component-c></component-c>\n</div>\n```\n\n### 局部註冊\n\n根據[官網](https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C)表示，如果使用全局註冊，假設某個 component 不再使用的話，一樣會保留在最終的建構結果中，這樣會造成用戶無謂的下載 JavaScript 資料。\n所以更好的用法，會是使用局部註冊：\n\n1. 透過一個物件來定義 component：\n\n```\nvar componentA = {}\n```\n\n2. 在 `new Vue` 中建立 `components` 並定義要使用的 component:\n\n```\nnew Vue({\n  el: '#app',\n  components: {\n    'component-a': componentA\n  }\n})\n```\n\n把上面的範例改成局部註冊：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/17/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n要注意的是，**局部註冊的組件在其子組件中是不可用的**。\n如果想要讓 A 組件可以在 B 組件中使用的話，可以這樣寫：\n\n```\nvar componentA = {}\n\nvar componentB = {\n  components: {\n    'component-a': componentA\n  }\n}\n```","slug":"vue-components","published":1,"updated":"2020-06-03T14:37:45.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyk000vb6u7bv3n1gn4","content":"<p>當做完一個專案時，每當想要修改某樣東西時，都要再重新審視程式碼，這時候就會非常痛苦。<br>而 Vue.js 中有一個 component 的概念，就不用再害怕維護專案啦。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"元件概念\"><a href=\"#元件概念\" class=\"headerlink\" title=\"元件概念\"></a>元件概念</h2><hr>\n<p>而什麼是 component 呢？</p>\n<p><img src=\"https://i.imgur.com/MeHiDbO.png\" alt=\"Image\"></p>\n<blockquote>\n<p>圖片來源：<a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Vue.js 官網</a></p>\n</blockquote>\n<p>它的概念是一個網頁中，一些比較常用的組件，例如：nav bar 或是 side bar 等等區塊。這時候使用 component 來控制一個區塊，這樣就會非常好整理以及修改。</p>\n<p>下面有一個點擊的範例，是從 <a href=\"https://vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Components Basics</a> 稍微做個修改的範例，讓我們試著改成使用 Component 來看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;button-counter&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;&#x2F;button-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \tcount: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"做一個一樣功能的-component\"><a href=\"#做一個一樣功能的-component\" class=\"headerlink\" title=\"做一個一樣功能的 component\"></a>做一個一樣功能的 component</h2><hr>\n<p>使用方式如下：</p>\n<ol>\n<li>為了跟上面區別，所以定義一個名稱為 click-counter 的 component。</li>\n<li>建立 data， 必須是 function，並 return 值。</li>\n<li>建立 template，把原本 HTML 中的 template 放入。</li>\n<li>建立 methods，跟原本的 methods 一樣。</li>\n<li>HTML 只要留有跟 component 同名稱的元素就好。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;click-counter&#39;, &#123;</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;click-counter&gt;&lt;&#x2F;click-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣的好處是可以讓建立好的 component 可以重複使用，如果你要一次擺 5 個，也是可以的，並且每個都是獨立運行的，想要試玩可以看下方 JSFiddle 建立的範例：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/87/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"透過-prop-傳遞建立-component\"><a href=\"#透過-prop-傳遞建立-component\" class=\"headerlink\" title=\"透過 prop 傳遞建立 component\"></a>透過 prop 傳遞建立 component</h2><hr>\n<p>如果想要從外層傳遞資料到內層來建立 component 的話，也就是透過原本的 <code>new Vue()</code> 建立的資料，而不是在 component 中取得資料的話，就可以透過 <code>props</code> 來存取。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。</li>\n<li>在 component 中建立 <code>template</code>。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D; &#39;count&#39;  &#x2F;&#x2F; prop 綁定 count</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">  props: [&#39;compoCount&#39;], &#x2F;&#x2F; 透過 prop 傳值</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">  \t&lt;button @click&#x3D;&quot;plus&quot;&gt;  </span><br><span class=\"line\">    \t我被按了 &#123;&#123; compoCount &#125;&#125; 下 &#x2F;&#x2F; template 中都要使用 props 的名稱，而不是原本的名稱</span><br><span class=\"line\">  \t&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    plus: function() &#123;</span><br><span class=\"line\">      this.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用效果是一樣的：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/188/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p><strong>注意定義 props 時，命名方式按照官方說明最好使用 camelCase，在 HTML 中則是使用 kebab-case。</strong><br><strong>並且在定義時，應該盡量詳細，至少指定其類型。雖然這裡例子使用字串組成陣列可以使用，但如果定義詳細一點可以改成以下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  \tcompoCount: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-x-template-建立-component\"><a href=\"#使用-x-template-建立-component\" class=\"headerlink\" title=\"使用 x-template 建立 component\"></a>使用 x-template 建立 component</h2><hr>\n<p>在 Vue.js 中，還可以使用另一種方式來建立 component，這邊要介紹的是使用 x-template，這邊使用上面的例子來修改。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。 </li>\n<li>在 HTML 中建立一個 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code>，id 將 template 引用過去。</li>\n<li>在 component 中建立 <code>template: &#39;#id名稱&#39;</code>，放入 id 名稱。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n<li>在 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code> 中放入要顯示的 template。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">  &gt;  </span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;componentCount&quot;&gt;</span><br><span class=\"line\">\t&lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">  \t我被按了 &#123;&#123; compoCount &#125;&#125; 下</span><br><span class=\"line\">  &lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">\ttemplate: &#39;#componentCount&#39;,</span><br><span class=\"line\">  props: [&#39;compoCount&#39;],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.compoCount +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\"> \tdata: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>有些情況，例如 HTML 沒有辦法正確渲染元素時，等等的例子會提到，就可以使用 <code>is</code> 來掛載 template，像下方的例子：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div </span><br><span class=\"line\">  is&#x3D;&quot;component-plus&quot;</span><br><span class=\"line\">  :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">&gt;  </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完成的效果也是一樣：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/202/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"使用-x-template-顯示表格\"><a href=\"#使用-x-template-顯示表格\" class=\"headerlink\" title=\"使用 x-template 顯示表格\"></a>使用 x-template 顯示表格</h2><hr>\n<p>前面有提到有些情況下，HTML 會需要使用 <code>is</code> 來掛載顯示正確的畫面，這裏會使用表格的例子來說明。<br>下方有一個表格，接下來要試著使用 x-template 製作 component：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>跟前面提到的使用 x-template 的方法差不多，這邊就不再多做示範，直接上做好的樣子：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/8/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>結果出來的樣子跑版了。<br>打開開發者工具看一下，發現結構怪怪的，只有 4 個 <code>&lt;tr&gt;</code>。</p>\n<p><img src=\"https://i.imgur.com/8U0Yl27.png\" alt=\"Image\"></p>\n<p>原因是 HTML 的特性，在 <code>&lt;table&gt;</code> 中只能夠放 <code>&lt;tr&gt;</code>，但是這裏卻是放入 component 的模板，所以需要使用 <code>is</code> 來掛載。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\">  &lt;!-- &lt;slam-dunk</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;slam-dunk&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 改成用 is 來掛載 tr --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;tr</span><br><span class=\"line\">    is&#x3D;&quot;slam-dunk&quot;</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;tr&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<p>結構就變正常，資料也可以正確的顯示了。</p>\n<p><img src=\"https://i.imgur.com/PL2mzwI.png\" alt=\"Image\"></p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/11/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"全局註冊與局部註冊\"><a href=\"#全局註冊與局部註冊\" class=\"headerlink\" title=\"全局註冊與局部註冊\"></a>全局註冊與局部註冊</h2><hr>\n<h3 id=\"全局註冊\"><a href=\"#全局註冊\" class=\"headerlink\" title=\"全局註冊\"></a>全局註冊</h3><p>目前為止，我們都是使用全局註冊來製作 component：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-name&#39;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣做的話，如果之後有新創建 Vue 根實例 (<code>new Vue</code>) 的話，就會一起共用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-a&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-b&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-c&#39;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123; el: &#39;#app&#39; &#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-a&gt;&lt;&#x2F;component-a&gt;</span><br><span class=\"line\">  &lt;component-b&gt;&lt;&#x2F;component-b&gt;</span><br><span class=\"line\">  &lt;component-c&gt;&lt;&#x2F;component-c&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部註冊\"><a href=\"#局部註冊\" class=\"headerlink\" title=\"局部註冊\"></a>局部註冊</h3><p>根據<a href=\"https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">官網</a>表示，如果使用全局註冊，假設某個 component 不再使用的話，一樣會保留在最終的建構結果中，這樣會造成用戶無謂的下載 JavaScript 資料。<br>所以更好的用法，會是使用局部註冊：</p>\n<ol>\n<li>透過一個物件來定義 component：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 <code>new Vue</code> 中建立 <code>components</code> 並定義要使用的 component:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>把上面的範例改成局部註冊：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/17/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>要注意的是，<strong>局部註冊的組件在其子組件中是不可用的</strong>。<br>如果想要讓 A 組件可以在 B 組件中使用的話，可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var componentB &#x3D; &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>當做完一個專案時，每當想要修改某樣東西時，都要再重新審視程式碼，這時候就會非常痛苦。<br>而 Vue.js 中有一個 component 的概念，就不用再害怕維護專案啦。</p>","more":"<h2 id=\"元件概念\"><a href=\"#元件概念\" class=\"headerlink\" title=\"元件概念\"></a>元件概念</h2><hr>\n<p>而什麼是 component 呢？</p>\n<p><img src=\"https://i.imgur.com/MeHiDbO.png\" alt=\"Image\"></p>\n<blockquote>\n<p>圖片來源：<a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Vue.js 官網</a></p>\n</blockquote>\n<p>它的概念是一個網頁中，一些比較常用的組件，例如：nav bar 或是 side bar 等等區塊。這時候使用 component 來控制一個區塊，這樣就會非常好整理以及修改。</p>\n<p>下面有一個點擊的範例，是從 <a href=\"https://vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Components Basics</a> 稍微做個修改的範例，讓我們試著改成使用 Component 來看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;button-counter&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;&#x2F;button-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \tcount: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"做一個一樣功能的-component\"><a href=\"#做一個一樣功能的-component\" class=\"headerlink\" title=\"做一個一樣功能的 component\"></a>做一個一樣功能的 component</h2><hr>\n<p>使用方式如下：</p>\n<ol>\n<li>為了跟上面區別，所以定義一個名稱為 click-counter 的 component。</li>\n<li>建立 data， 必須是 function，並 return 值。</li>\n<li>建立 template，把原本 HTML 中的 template 放入。</li>\n<li>建立 methods，跟原本的 methods 一樣。</li>\n<li>HTML 只要留有跟 component 同名稱的元素就好。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;click-counter&#39;, &#123;</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;click-counter&gt;&lt;&#x2F;click-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣的好處是可以讓建立好的 component 可以重複使用，如果你要一次擺 5 個，也是可以的，並且每個都是獨立運行的，想要試玩可以看下方 JSFiddle 建立的範例：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/87/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"透過-prop-傳遞建立-component\"><a href=\"#透過-prop-傳遞建立-component\" class=\"headerlink\" title=\"透過 prop 傳遞建立 component\"></a>透過 prop 傳遞建立 component</h2><hr>\n<p>如果想要從外層傳遞資料到內層來建立 component 的話，也就是透過原本的 <code>new Vue()</code> 建立的資料，而不是在 component 中取得資料的話，就可以透過 <code>props</code> 來存取。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。</li>\n<li>在 component 中建立 <code>template</code>。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D; &#39;count&#39;  &#x2F;&#x2F; prop 綁定 count</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">  props: [&#39;compoCount&#39;], &#x2F;&#x2F; 透過 prop 傳值</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">  \t&lt;button @click&#x3D;&quot;plus&quot;&gt;  </span><br><span class=\"line\">    \t我被按了 &#123;&#123; compoCount &#125;&#125; 下 &#x2F;&#x2F; template 中都要使用 props 的名稱，而不是原本的名稱</span><br><span class=\"line\">  \t&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    plus: function() &#123;</span><br><span class=\"line\">      this.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用效果是一樣的：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/188/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p><strong>注意定義 props 時，命名方式按照官方說明最好使用 camelCase，在 HTML 中則是使用 kebab-case。</strong><br><strong>並且在定義時，應該盡量詳細，至少指定其類型。雖然這裡例子使用字串組成陣列可以使用，但如果定義詳細一點可以改成以下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  \tcompoCount: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-x-template-建立-component\"><a href=\"#使用-x-template-建立-component\" class=\"headerlink\" title=\"使用 x-template 建立 component\"></a>使用 x-template 建立 component</h2><hr>\n<p>在 Vue.js 中，還可以使用另一種方式來建立 component，這邊要介紹的是使用 x-template，這邊使用上面的例子來修改。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。 </li>\n<li>在 HTML 中建立一個 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code>，id 將 template 引用過去。</li>\n<li>在 component 中建立 <code>template: &#39;#id名稱&#39;</code>，放入 id 名稱。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n<li>在 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code> 中放入要顯示的 template。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">  &gt;  </span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;componentCount&quot;&gt;</span><br><span class=\"line\">\t&lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">  \t我被按了 &#123;&#123; compoCount &#125;&#125; 下</span><br><span class=\"line\">  &lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">\ttemplate: &#39;#componentCount&#39;,</span><br><span class=\"line\">  props: [&#39;compoCount&#39;],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.compoCount +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\"> \tdata: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>有些情況，例如 HTML 沒有辦法正確渲染元素時，等等的例子會提到，就可以使用 <code>is</code> 來掛載 template，像下方的例子：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div </span><br><span class=\"line\">  is&#x3D;&quot;component-plus&quot;</span><br><span class=\"line\">  :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">&gt;  </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完成的效果也是一樣：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/202/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"使用-x-template-顯示表格\"><a href=\"#使用-x-template-顯示表格\" class=\"headerlink\" title=\"使用 x-template 顯示表格\"></a>使用 x-template 顯示表格</h2><hr>\n<p>前面有提到有些情況下，HTML 會需要使用 <code>is</code> 來掛載顯示正確的畫面，這裏會使用表格的例子來說明。<br>下方有一個表格，接下來要試著使用 x-template 製作 component：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>跟前面提到的使用 x-template 的方法差不多，這邊就不再多做示範，直接上做好的樣子：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/8/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>結果出來的樣子跑版了。<br>打開開發者工具看一下，發現結構怪怪的，只有 4 個 <code>&lt;tr&gt;</code>。</p>\n<p><img src=\"https://i.imgur.com/8U0Yl27.png\" alt=\"Image\"></p>\n<p>原因是 HTML 的特性，在 <code>&lt;table&gt;</code> 中只能夠放 <code>&lt;tr&gt;</code>，但是這裏卻是放入 component 的模板，所以需要使用 <code>is</code> 來掛載。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\">  &lt;!-- &lt;slam-dunk</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;slam-dunk&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 改成用 is 來掛載 tr --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;tr</span><br><span class=\"line\">    is&#x3D;&quot;slam-dunk&quot;</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;tr&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<p>結構就變正常，資料也可以正確的顯示了。</p>\n<p><img src=\"https://i.imgur.com/PL2mzwI.png\" alt=\"Image\"></p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/11/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"全局註冊與局部註冊\"><a href=\"#全局註冊與局部註冊\" class=\"headerlink\" title=\"全局註冊與局部註冊\"></a>全局註冊與局部註冊</h2><hr>\n<h3 id=\"全局註冊\"><a href=\"#全局註冊\" class=\"headerlink\" title=\"全局註冊\"></a>全局註冊</h3><p>目前為止，我們都是使用全局註冊來製作 component：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-name&#39;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣做的話，如果之後有新創建 Vue 根實例 (<code>new Vue</code>) 的話，就會一起共用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-a&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-b&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-c&#39;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123; el: &#39;#app&#39; &#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-a&gt;&lt;&#x2F;component-a&gt;</span><br><span class=\"line\">  &lt;component-b&gt;&lt;&#x2F;component-b&gt;</span><br><span class=\"line\">  &lt;component-c&gt;&lt;&#x2F;component-c&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部註冊\"><a href=\"#局部註冊\" class=\"headerlink\" title=\"局部註冊\"></a>局部註冊</h3><p>根據<a href=\"https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">官網</a>表示，如果使用全局註冊，假設某個 component 不再使用的話，一樣會保留在最終的建構結果中，這樣會造成用戶無謂的下載 JavaScript 資料。<br>所以更好的用法，會是使用局部註冊：</p>\n<ol>\n<li>透過一個物件來定義 component：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 <code>new Vue</code> 中建立 <code>components</code> 並定義要使用的 component:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>把上面的範例改成局部註冊：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/17/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>要注意的是，<strong>局部註冊的組件在其子組件中是不可用的</strong>。<br>如果想要讓 A 組件可以在 B 組件中使用的話，可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var componentB &#x3D; &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"如何使用 Vue CLI 建置專案","date":"2020-05-18T14:01:47.000Z","keywords":["vue cli","node.js"],"decription":"Vue CLI 介紹與環境建置，以及建置專案。","_content":"Vue CLI 介紹與環境建置，以及建置專案。\n<!--more-->\n\n## Vue CLI 是什麼？\n---\n\n之前所用到的 Vue.js 都是使用 CDN 載入的模式來開發，而 Vue CLI 有什麼不同呢？\n它有以下幾點特色：\n\n1. 基於 Webpack 所建置的開發工具。\n2. 便於使用各種第三方套件 (Bootstrap, Vue Router...)。\n3. 可運行 Sass、Bebal 等編譯工具。\n4. 便於開發 SPA 的網頁工具。\n5. 簡單設定，就能搭建開發常用環境。\n\n缺點：\n\n* 不便開發非 SPA 的網頁（改用 CDN 模式開發）。\n\n了解以上 Vue CLI 的優缺點後，就可以來試著安裝了，但是首先首要條件要先安裝 Node.js。\n\n## 安裝 nvm (Node Version Manager)\n\n由於 JavaScript 只能在瀏覽器中運行，所以為了要讓 Vue CLI 能夠在電腦本地端運行，就需要 Node.js，所以先來安裝 Node.js。\n而安裝 Node.js 最推薦的是採用 nvm 的方法，這樣之後可以方便切換不同版本。\n\n* 在終端機執行指令安裝：\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n```\n\n安裝完後執行 `nvm --version` ，如果成功的話，就會顯示版本。\n因為 nvm 可以控管 Node.js 的版本，所以可以執行指令觀看版本：\n\n```\nnvm ls\n```\n\n## 安裝 Node.js\n---\n\n![顯示目前版本跟可以安裝的版本](https://i.imgur.com/slUd39w.png)\n\n如果沒有要安裝特定版本的話，直接安裝最新穩定版本的 Node.js：\n\n```\nnvm install stable\n```\n\n安裝完後，執行指令，確定是否安裝成功：\n\n```\nnode -v\n```\n\n## 安裝 Vue CLI\n---\n\nnvm 及 Node.js 都沒問題後，接著就使用 Node.js 的 npm 繼續安裝 Vue CLI。\n\n```\nnpm install -g @vue/cli\n```\n\n安裝完後，檢查是否安裝成功，執行：\n\n```\nvue -V\n```\n\n成功的話，會顯示版本，目前最新版本為 4.3.1。\n\n## 使用 Vue CLI\n---\n\n當安裝成功後，可以輸入 `vue`，會秀出可以輸入的指令。\n\n![Image](https://i.imgur.com/qHXcEIX.png)\n\n### 建製專案\n\n因為接下來要建置專案，所以先 cd 到想建置的資料夾中，然後執行 `vue create <project name>`\n\n### 專案設定\n\n建置並命名完專案後，就要接著設定，會有兩個選項可以選，分別有：\n\n* default - 安裝基本套件。\n* Manually - 按照需求選擇所需套件。（這邊選擇 Manually）\n\n![Image](https://i.imgur.com/IJZucYW.png)\n\n選擇 Manually 後，就可以選擇想要裝的套件，接著就開始安裝了。\n\n![Image](https://i.imgur.com/M2Q71Y0.png)\n\n安裝一段時間後，出現以下的畫面，就代表安裝成功了。\n\n![Image](https://i.imgur.com/9Wu4bru.png)\n\n接著照著它的指示，cd 到該資料夾中，執行 `npm run serve` 後，連到它提供的 localhost 網址，在瀏覽器看到下面的畫面，就代表專案建置成功了。\n\n![Image](https://i.imgur.com/kfUEdi2.png)","source":"_posts/vue-cli.md","raw":"---\ntitle: 如何使用 Vue CLI 建置專案\ntags:\n  - vue\n  - vue cli\n  - node.js\n  - w3HexSchool\ndate: 2020-05-18 22:01:47\ncategories: vue\nkeywords:\n  - vue cli\n  - node.js\ndecription: Vue CLI 介紹與環境建置，以及建置專案。\n---\nVue CLI 介紹與環境建置，以及建置專案。\n<!--more-->\n\n## Vue CLI 是什麼？\n---\n\n之前所用到的 Vue.js 都是使用 CDN 載入的模式來開發，而 Vue CLI 有什麼不同呢？\n它有以下幾點特色：\n\n1. 基於 Webpack 所建置的開發工具。\n2. 便於使用各種第三方套件 (Bootstrap, Vue Router...)。\n3. 可運行 Sass、Bebal 等編譯工具。\n4. 便於開發 SPA 的網頁工具。\n5. 簡單設定，就能搭建開發常用環境。\n\n缺點：\n\n* 不便開發非 SPA 的網頁（改用 CDN 模式開發）。\n\n了解以上 Vue CLI 的優缺點後，就可以來試著安裝了，但是首先首要條件要先安裝 Node.js。\n\n## 安裝 nvm (Node Version Manager)\n\n由於 JavaScript 只能在瀏覽器中運行，所以為了要讓 Vue CLI 能夠在電腦本地端運行，就需要 Node.js，所以先來安裝 Node.js。\n而安裝 Node.js 最推薦的是採用 nvm 的方法，這樣之後可以方便切換不同版本。\n\n* 在終端機執行指令安裝：\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n```\n\n安裝完後執行 `nvm --version` ，如果成功的話，就會顯示版本。\n因為 nvm 可以控管 Node.js 的版本，所以可以執行指令觀看版本：\n\n```\nnvm ls\n```\n\n## 安裝 Node.js\n---\n\n![顯示目前版本跟可以安裝的版本](https://i.imgur.com/slUd39w.png)\n\n如果沒有要安裝特定版本的話，直接安裝最新穩定版本的 Node.js：\n\n```\nnvm install stable\n```\n\n安裝完後，執行指令，確定是否安裝成功：\n\n```\nnode -v\n```\n\n## 安裝 Vue CLI\n---\n\nnvm 及 Node.js 都沒問題後，接著就使用 Node.js 的 npm 繼續安裝 Vue CLI。\n\n```\nnpm install -g @vue/cli\n```\n\n安裝完後，檢查是否安裝成功，執行：\n\n```\nvue -V\n```\n\n成功的話，會顯示版本，目前最新版本為 4.3.1。\n\n## 使用 Vue CLI\n---\n\n當安裝成功後，可以輸入 `vue`，會秀出可以輸入的指令。\n\n![Image](https://i.imgur.com/qHXcEIX.png)\n\n### 建製專案\n\n因為接下來要建置專案，所以先 cd 到想建置的資料夾中，然後執行 `vue create <project name>`\n\n### 專案設定\n\n建置並命名完專案後，就要接著設定，會有兩個選項可以選，分別有：\n\n* default - 安裝基本套件。\n* Manually - 按照需求選擇所需套件。（這邊選擇 Manually）\n\n![Image](https://i.imgur.com/IJZucYW.png)\n\n選擇 Manually 後，就可以選擇想要裝的套件，接著就開始安裝了。\n\n![Image](https://i.imgur.com/M2Q71Y0.png)\n\n安裝一段時間後，出現以下的畫面，就代表安裝成功了。\n\n![Image](https://i.imgur.com/9Wu4bru.png)\n\n接著照著它的指示，cd 到該資料夾中，執行 `npm run serve` 後，連到它提供的 localhost 網址，在瀏覽器看到下面的畫面，就代表專案建置成功了。\n\n![Image](https://i.imgur.com/kfUEdi2.png)","slug":"vue-cli","published":1,"updated":"2020-05-26T15:34:38.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyl000xb6u76ttb8x5i","content":"<p>Vue CLI 介紹與環境建置，以及建置專案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Vue-CLI-是什麼？\"><a href=\"#Vue-CLI-是什麼？\" class=\"headerlink\" title=\"Vue CLI 是什麼？\"></a>Vue CLI 是什麼？</h2><hr>\n<p>之前所用到的 Vue.js 都是使用 CDN 載入的模式來開發，而 Vue CLI 有什麼不同呢？<br>它有以下幾點特色：</p>\n<ol>\n<li>基於 Webpack 所建置的開發工具。</li>\n<li>便於使用各種第三方套件 (Bootstrap, Vue Router…)。</li>\n<li>可運行 Sass、Bebal 等編譯工具。</li>\n<li>便於開發 SPA 的網頁工具。</li>\n<li>簡單設定，就能搭建開發常用環境。</li>\n</ol>\n<p>缺點：</p>\n<ul>\n<li>不便開發非 SPA 的網頁（改用 CDN 模式開發）。</li>\n</ul>\n<p>了解以上 Vue CLI 的優缺點後，就可以來試著安裝了，但是首先首要條件要先安裝 Node.js。</p>\n<h2 id=\"安裝-nvm-Node-Version-Manager\"><a href=\"#安裝-nvm-Node-Version-Manager\" class=\"headerlink\" title=\"安裝 nvm (Node Version Manager)\"></a>安裝 nvm (Node Version Manager)</h2><p>由於 JavaScript 只能在瀏覽器中運行，所以為了要讓 Vue CLI 能夠在電腦本地端運行，就需要 Node.js，所以先來安裝 Node.js。<br>而安裝 Node.js 最推薦的是採用 nvm 的方法，這樣之後可以方便切換不同版本。</p>\n<ul>\n<li>在終端機執行指令安裝：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.3&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後執行 <code>nvm --version</code> ，如果成功的話，就會顯示版本。<br>因為 nvm 可以控管 Node.js 的版本，所以可以執行指令觀看版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js\"></a>安裝 Node.js</h2><hr>\n<p><img src=\"https://i.imgur.com/slUd39w.png\" alt=\"顯示目前版本跟可以安裝的版本\"></p>\n<p>如果沒有要安裝特定版本的話，直接安裝最新穩定版本的 Node.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，執行指令，確定是否安裝成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Vue-CLI\"><a href=\"#安裝-Vue-CLI\" class=\"headerlink\" title=\"安裝 Vue CLI\"></a>安裝 Vue CLI</h2><hr>\n<p>nvm 及 Node.js 都沒問題後，接著就使用 Node.js 的 npm 繼續安裝 Vue CLI。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，檢查是否安裝成功，執行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue -V</span><br></pre></td></tr></table></figure>\n\n<p>成功的話，會顯示版本，目前最新版本為 4.3.1。</p>\n<h2 id=\"使用-Vue-CLI\"><a href=\"#使用-Vue-CLI\" class=\"headerlink\" title=\"使用 Vue CLI\"></a>使用 Vue CLI</h2><hr>\n<p>當安裝成功後，可以輸入 <code>vue</code>，會秀出可以輸入的指令。</p>\n<p><img src=\"https://i.imgur.com/qHXcEIX.png\" alt=\"Image\"></p>\n<h3 id=\"建製專案\"><a href=\"#建製專案\" class=\"headerlink\" title=\"建製專案\"></a>建製專案</h3><p>因為接下來要建置專案，所以先 cd 到想建置的資料夾中，然後執行 <code>vue create &lt;project name&gt;</code></p>\n<h3 id=\"專案設定\"><a href=\"#專案設定\" class=\"headerlink\" title=\"專案設定\"></a>專案設定</h3><p>建置並命名完專案後，就要接著設定，會有兩個選項可以選，分別有：</p>\n<ul>\n<li>default - 安裝基本套件。</li>\n<li>Manually - 按照需求選擇所需套件。（這邊選擇 Manually）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/IJZucYW.png\" alt=\"Image\"></p>\n<p>選擇 Manually 後，就可以選擇想要裝的套件，接著就開始安裝了。</p>\n<p><img src=\"https://i.imgur.com/M2Q71Y0.png\" alt=\"Image\"></p>\n<p>安裝一段時間後，出現以下的畫面，就代表安裝成功了。</p>\n<p><img src=\"https://i.imgur.com/9Wu4bru.png\" alt=\"Image\"></p>\n<p>接著照著它的指示，cd 到該資料夾中，執行 <code>npm run serve</code> 後，連到它提供的 localhost 網址，在瀏覽器看到下面的畫面，就代表專案建置成功了。</p>\n<p><img src=\"https://i.imgur.com/kfUEdi2.png\" alt=\"Image\"></p>\n","site":{"data":{}},"excerpt":"<p>Vue CLI 介紹與環境建置，以及建置專案。</p>","more":"<h2 id=\"Vue-CLI-是什麼？\"><a href=\"#Vue-CLI-是什麼？\" class=\"headerlink\" title=\"Vue CLI 是什麼？\"></a>Vue CLI 是什麼？</h2><hr>\n<p>之前所用到的 Vue.js 都是使用 CDN 載入的模式來開發，而 Vue CLI 有什麼不同呢？<br>它有以下幾點特色：</p>\n<ol>\n<li>基於 Webpack 所建置的開發工具。</li>\n<li>便於使用各種第三方套件 (Bootstrap, Vue Router…)。</li>\n<li>可運行 Sass、Bebal 等編譯工具。</li>\n<li>便於開發 SPA 的網頁工具。</li>\n<li>簡單設定，就能搭建開發常用環境。</li>\n</ol>\n<p>缺點：</p>\n<ul>\n<li>不便開發非 SPA 的網頁（改用 CDN 模式開發）。</li>\n</ul>\n<p>了解以上 Vue CLI 的優缺點後，就可以來試著安裝了，但是首先首要條件要先安裝 Node.js。</p>\n<h2 id=\"安裝-nvm-Node-Version-Manager\"><a href=\"#安裝-nvm-Node-Version-Manager\" class=\"headerlink\" title=\"安裝 nvm (Node Version Manager)\"></a>安裝 nvm (Node Version Manager)</h2><p>由於 JavaScript 只能在瀏覽器中運行，所以為了要讓 Vue CLI 能夠在電腦本地端運行，就需要 Node.js，所以先來安裝 Node.js。<br>而安裝 Node.js 最推薦的是採用 nvm 的方法，這樣之後可以方便切換不同版本。</p>\n<ul>\n<li>在終端機執行指令安裝：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.3&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後執行 <code>nvm --version</code> ，如果成功的話，就會顯示版本。<br>因為 nvm 可以控管 Node.js 的版本，所以可以執行指令觀看版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js\"></a>安裝 Node.js</h2><hr>\n<p><img src=\"https://i.imgur.com/slUd39w.png\" alt=\"顯示目前版本跟可以安裝的版本\"></p>\n<p>如果沒有要安裝特定版本的話，直接安裝最新穩定版本的 Node.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，執行指令，確定是否安裝成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Vue-CLI\"><a href=\"#安裝-Vue-CLI\" class=\"headerlink\" title=\"安裝 Vue CLI\"></a>安裝 Vue CLI</h2><hr>\n<p>nvm 及 Node.js 都沒問題後，接著就使用 Node.js 的 npm 繼續安裝 Vue CLI。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，檢查是否安裝成功，執行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue -V</span><br></pre></td></tr></table></figure>\n\n<p>成功的話，會顯示版本，目前最新版本為 4.3.1。</p>\n<h2 id=\"使用-Vue-CLI\"><a href=\"#使用-Vue-CLI\" class=\"headerlink\" title=\"使用 Vue CLI\"></a>使用 Vue CLI</h2><hr>\n<p>當安裝成功後，可以輸入 <code>vue</code>，會秀出可以輸入的指令。</p>\n<p><img src=\"https://i.imgur.com/qHXcEIX.png\" alt=\"Image\"></p>\n<h3 id=\"建製專案\"><a href=\"#建製專案\" class=\"headerlink\" title=\"建製專案\"></a>建製專案</h3><p>因為接下來要建置專案，所以先 cd 到想建置的資料夾中，然後執行 <code>vue create &lt;project name&gt;</code></p>\n<h3 id=\"專案設定\"><a href=\"#專案設定\" class=\"headerlink\" title=\"專案設定\"></a>專案設定</h3><p>建置並命名完專案後，就要接著設定，會有兩個選項可以選，分別有：</p>\n<ul>\n<li>default - 安裝基本套件。</li>\n<li>Manually - 按照需求選擇所需套件。（這邊選擇 Manually）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/IJZucYW.png\" alt=\"Image\"></p>\n<p>選擇 Manually 後，就可以選擇想要裝的套件，接著就開始安裝了。</p>\n<p><img src=\"https://i.imgur.com/M2Q71Y0.png\" alt=\"Image\"></p>\n<p>安裝一段時間後，出現以下的畫面，就代表安裝成功了。</p>\n<p><img src=\"https://i.imgur.com/9Wu4bru.png\" alt=\"Image\"></p>\n<p>接著照著它的指示，cd 到該資料夾中，執行 <code>npm run serve</code> 後，連到它提供的 localhost 網址，在瀏覽器看到下面的畫面，就代表專案建置成功了。</p>\n<p><img src=\"https://i.imgur.com/kfUEdi2.png\" alt=\"Image\"></p>"},{"title":"用 Vue.js 做一個 TodoList","date":"2020-05-09T05:11:35.000Z","keywords":["vue","todolist","v-model","v-if","v-for","methods","computed","filters","watch"],"decription":"使用 Vue 做出一個簡易的 TodoList","_content":"很多教學都會試著做出 TodoList 來驗收自己學習的成果，這篇文章也不免俗的將會運用目前學到的 Vue 技術，做出一個簡易的 TodoList。 \n<!--more-->\n\n使用 Vue 來做 TodoList 真的蠻方便的，以前我覺得做這個好麻煩，用了 Vue 來做快上不少。\n話不多說，先看成果：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/dcg2jzs4/5/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 建立 Vue 環境\n---\n\n首先在 HTML 頁面上建置一個 Vue 的環境，讓資料可以透過 Vue 渲染到 HTML。\n\n```\n<div id=\"app\">\n  <h1>{{ title }}</h1>\n</div>\n```\n\n資料部份：\n\n```\nlet vm = new Vue ({\n\tel: '#app',\n  data: {\n  \ttitle: 'Simple TodoList',\n  }\n})\n```\n\n## 輸入欄位雙向綁定\n---\n\n1. 新增一個 input 欄位，讓輸入的文字可以用 `v-model` 雙向綁定在 `inputNewTodo` 中，在 Vue 的資料中是一個空字串，讓輸入的文字可以塞入：\n\n```\ndata: {\n  title: 'Simple TodoList',\n  inputNewTodo: ''\n}\n```\n\n```\n<label>輸入待辦事項：\n  <input type=\"text\"\n    name=\"inputNewTodo\"\n    placeholder=\"請輸入事項\"\n    v-model=\"inputNewTodo\"\n  >\n</label>\n```\n\n2. 將輸入的文字可以即時顯示，加上 `v-if` 跟 `v-else` 的判斷條件，可以顯示不同狀態的文字：\n\n```\n<div class=\"showNewTodo\">\n  <p v-if=\"inputNewTodo!=''\">  // 如果有東西就顯示\n    你新增的待辦事項：{{ inputNewTodo }}  // 即時連動輸入的文字\n  </p>\n      \n  <p v-else>  // 如果是空字串就顯示\n    尚未新增待辦事項。\n  </p>\n</div>\n```\n\n### 待辦事項\n\n輸入一些待辦事項，首先用一些事項用 checkbox 看看：\n\n```\n<div class=\"todos\">\n  <h2>待辦事項：</h2>\n  <label>\n    <input type=\"checkbox\">\n    洗車\n  </label>\n    \n  <label>\n    <input type=\"checkbox\">\n    洗衣服\n  </label>\n    \n  <label>\n    <input type=\"checkbox\">\n    玩森友會\n  </label>\n</div>\n```\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"QWjZyVJ\" src=\"https://codepen.io/bucky0112/embed/QWjZyVJ?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/QWjZyVJ'>QWjZyVJ</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n雖然資料有顯示出來，但是如果資料的部分用在 Vue 的 data 中會比較好管理，所以 HTML 的部份改成：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">  // 前面不一定要叫 item，todos 是資料來源\n    <input \n      type=\"checkbox\"\n      :value=\"item\" \n    >\n    {{item}}\n  </label>\n</div>\n```\n\n讓資料由 Vue 去做管理，新增一個 todos，讓 `v-for` 從裡面擷取資料：\n\n```\ntodos: ['洗車', '洗衣服', '玩森友會']\n```\n\n### 已完成事項\n\n前面做完待辦事項的資料，接著要做出如果打勾 checkbox 後，讓已勾選的資料可以渲染到已完成的空陣列。\n\n首先做一個空陣列：\n\n```\ndoneList: [],\n```\n\n然後要在待辦事項設置一個 `v-model`，讓點選的資料即時進入：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">\n    <input \n      type=\"checkbox\"\n      :value=\"item\"    // 注意這邊要使用 v-bind 綁定 value\n      v-model=\"doneList\"\n    >\n    {{item}}\n  </label>\n</div>\n```\n\n在 template 的部份：\n\n```\n<div class=\"showDoneList\">\n  <h2>已完成事項：</h2>\n  <p v-if=\"doneList!=''\">已辦完：{{ doneList }}</p>\n  <p v-else>尚未完成任何事項</p>\n</div>\n```\n\n## 讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中\n---\n\n在 Vue 的資料中新增一個 `methods`，然後加入點擊新增資料的動作：\n\n```\nmethods: {\n  addNewList: function() {\n    this.todos.push(this.inputNewTodo)\n  }\n}\n```\n\n接著在 button 加上 `@click` 綁定 addNewList：\n\n```\n<button @click=\"addNewList\">新增</button>\n```\n\n這樣輸入新資料，然後點擊按鈕就可以將新資料帶入 todos 的陣列中了。\n如果想做出輸入完資料，按 Enter 鍵也有一樣效果的話，就在輸入待辦事項的 input 欄位加入：\n\n```\n<label>輸入待辦事項：\n  <input type=\"text\" \n    name=\"inputNewTodo\" \n    placeholder=\"請輸入事項\"\n    v-model=\"inputNewTodo\"\n    @keyup.enter=\"addNewList\"\n  >\n</label>\n```\n\n## 運用 computed 將已完成事項的 array 重新組裝字串\n---\n\n雖然點選待辦事項的 checkbox 可以將待辦事項加入到 doneList 的空陣列中，而且已完成事項也可以顯示資料。\n但是顯示出來的不是想要的效果，如果只想要顯示陣列中的字串而已的話，該怎麼做呢？\n這裡就可以使用 `computed`，在 Vue 的資料中加入：\n\n```\ncomputed: {\n  doneListToString: function() {\n    return this.doneList.join(', ')\n  }\n}\n```\n\n在 template 部份，把原本已辦完 `已辦完：{{ doneList }}` 改成 computed 的函式名稱：\n\n```\n<div class=\"showDoneList\">\n  <h2>已完成事項：</h2>\n  <p \n    v-if=\"doneList!=''\"\n    class=\"done\"\n  >已辦完：{{ doneListToString }}</p>\n  <p v-else>尚未完成任何事項</p>\n</div>\n```\n\n就可以將選取的資料以字串加上 `,` 顯示。\n\n## 運用 filters\n---\n\n`filters` 可以將文字做成需要的格式處理，例如想要把待辦事項的各個事項前後加上 `|`。\n先在 Vue 資料中加入：\n\n```\nfilters: {\n  doneListFormat: function(str) {\n    return `| ${str} |`\n  }\n}\n```\n\n然後在 template 部份，在原本 todos 中跑出 item 的後面加上 `filters` 的名稱：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">\n  <input \n    type=\"checkbox\"\n    :value=\"item\"\n    v-model=\"doneList\"\n  >\n    {{ item | doneListFormat }}\n  </label>\n</div>\n```\n\n## watch\n---\n\n`watch` 這個功能可以即時的監聽某個值，如果發生變動就可以做某些事情。\n例如當新增待辦事項時，可以跳出 alert，並表示已新增事項：\n\n```\nwatch: {\n  todos: function() {\n    alert('已新增事項')\n  }\n}\n```\n\n這樣當新增事項到 todos 中時，由於 todos 的資料變動，所以就會做出我們給的指令。\n*注意不要監聽 inputNewTodo，如果每輸入一個字就會一直跳 alert*\n\n這邊還可以做一個運用，如果輸入待辦事項是空字串的話，就會跳 alert，例如：\n\n```\nwatch: {\n  todos: function() {\n    if(this.inputNewTodo === '') {\n      alert ('請輸入文字')\n    }\n  }\n}\n```\n\n這樣當輸入的是空字串的話，就會跳 alert 提示請輸入文字。\n\n## 加入一些其他功能\n---\n\n### 判斷輸入文字才能新增待辦事項\n\n接著修改一些小 bug，由於新增待辦事項，如果沒輸入文字，直接按新增或是按 Enter 都可以新增到 todos 中，所以要在 addNewList 加入判斷，需要加入文字才能夠新增。\n\n還有加入新增事項後，將輸入欄位清空。\n\n```\naddNewList: function() {\n  if(this.inputNewTodo === '') {\n    alert('請輸入文字')  // 如果輸入空字串就跳提示\n  } else {\n    this.todos.push(this.inputNewTodo);\n    this.inputNewTodo = ''  // 清空輸入欄位\n  }\n}\n```\n\n### 刪除所有事項\n\n最後如果想刪除所有事項的話，我再加入一個刪除的按鈕，並在 `methods` 新增並綁定它，就完成了。\n\n```\ndeleteAllTodos: function() {\n  this.todos = [];\n  this.doneList = []\n}\n```\n## 後記\n---\n\n其他一些東西還有再做一些修改，有微調或是去掉，例如：`watch`。\n新增事項成功就跳 alert 有點惱人，後來改成監聽如果完成，好像也不太適合，於是就關掉 `watch` 了。\n\n其他如果有想到其他東西可以再想辦法加進去，例如 localStorage。\n","source":"_posts/makeTodolistByVue.md","raw":"---\ntitle: 用 Vue.js 做一個 TodoList\ntags:\n  - vue\n  - todolist\n  - w3HexSchool\ndate: 2020-05-09 13:11:35\ncategories: vue\nkeywords:\n  - vue\n  - todolist\n  - v-model\n  - v-if\n  - v-for\n  - methods\n  - computed\n  - filters\n  - watch\ndecription: 使用 Vue 做出一個簡易的 TodoList\n---\n很多教學都會試著做出 TodoList 來驗收自己學習的成果，這篇文章也不免俗的將會運用目前學到的 Vue 技術，做出一個簡易的 TodoList。 \n<!--more-->\n\n使用 Vue 來做 TodoList 真的蠻方便的，以前我覺得做這個好麻煩，用了 Vue 來做快上不少。\n話不多說，先看成果：\n\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/dcg2jzs4/5/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n## 建立 Vue 環境\n---\n\n首先在 HTML 頁面上建置一個 Vue 的環境，讓資料可以透過 Vue 渲染到 HTML。\n\n```\n<div id=\"app\">\n  <h1>{{ title }}</h1>\n</div>\n```\n\n資料部份：\n\n```\nlet vm = new Vue ({\n\tel: '#app',\n  data: {\n  \ttitle: 'Simple TodoList',\n  }\n})\n```\n\n## 輸入欄位雙向綁定\n---\n\n1. 新增一個 input 欄位，讓輸入的文字可以用 `v-model` 雙向綁定在 `inputNewTodo` 中，在 Vue 的資料中是一個空字串，讓輸入的文字可以塞入：\n\n```\ndata: {\n  title: 'Simple TodoList',\n  inputNewTodo: ''\n}\n```\n\n```\n<label>輸入待辦事項：\n  <input type=\"text\"\n    name=\"inputNewTodo\"\n    placeholder=\"請輸入事項\"\n    v-model=\"inputNewTodo\"\n  >\n</label>\n```\n\n2. 將輸入的文字可以即時顯示，加上 `v-if` 跟 `v-else` 的判斷條件，可以顯示不同狀態的文字：\n\n```\n<div class=\"showNewTodo\">\n  <p v-if=\"inputNewTodo!=''\">  // 如果有東西就顯示\n    你新增的待辦事項：{{ inputNewTodo }}  // 即時連動輸入的文字\n  </p>\n      \n  <p v-else>  // 如果是空字串就顯示\n    尚未新增待辦事項。\n  </p>\n</div>\n```\n\n### 待辦事項\n\n輸入一些待辦事項，首先用一些事項用 checkbox 看看：\n\n```\n<div class=\"todos\">\n  <h2>待辦事項：</h2>\n  <label>\n    <input type=\"checkbox\">\n    洗車\n  </label>\n    \n  <label>\n    <input type=\"checkbox\">\n    洗衣服\n  </label>\n    \n  <label>\n    <input type=\"checkbox\">\n    玩森友會\n  </label>\n</div>\n```\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"QWjZyVJ\" src=\"https://codepen.io/bucky0112/embed/QWjZyVJ?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/QWjZyVJ'>QWjZyVJ</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n雖然資料有顯示出來，但是如果資料的部分用在 Vue 的 data 中會比較好管理，所以 HTML 的部份改成：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">  // 前面不一定要叫 item，todos 是資料來源\n    <input \n      type=\"checkbox\"\n      :value=\"item\" \n    >\n    {{item}}\n  </label>\n</div>\n```\n\n讓資料由 Vue 去做管理，新增一個 todos，讓 `v-for` 從裡面擷取資料：\n\n```\ntodos: ['洗車', '洗衣服', '玩森友會']\n```\n\n### 已完成事項\n\n前面做完待辦事項的資料，接著要做出如果打勾 checkbox 後，讓已勾選的資料可以渲染到已完成的空陣列。\n\n首先做一個空陣列：\n\n```\ndoneList: [],\n```\n\n然後要在待辦事項設置一個 `v-model`，讓點選的資料即時進入：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">\n    <input \n      type=\"checkbox\"\n      :value=\"item\"    // 注意這邊要使用 v-bind 綁定 value\n      v-model=\"doneList\"\n    >\n    {{item}}\n  </label>\n</div>\n```\n\n在 template 的部份：\n\n```\n<div class=\"showDoneList\">\n  <h2>已完成事項：</h2>\n  <p v-if=\"doneList!=''\">已辦完：{{ doneList }}</p>\n  <p v-else>尚未完成任何事項</p>\n</div>\n```\n\n## 讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中\n---\n\n在 Vue 的資料中新增一個 `methods`，然後加入點擊新增資料的動作：\n\n```\nmethods: {\n  addNewList: function() {\n    this.todos.push(this.inputNewTodo)\n  }\n}\n```\n\n接著在 button 加上 `@click` 綁定 addNewList：\n\n```\n<button @click=\"addNewList\">新增</button>\n```\n\n這樣輸入新資料，然後點擊按鈕就可以將新資料帶入 todos 的陣列中了。\n如果想做出輸入完資料，按 Enter 鍵也有一樣效果的話，就在輸入待辦事項的 input 欄位加入：\n\n```\n<label>輸入待辦事項：\n  <input type=\"text\" \n    name=\"inputNewTodo\" \n    placeholder=\"請輸入事項\"\n    v-model=\"inputNewTodo\"\n    @keyup.enter=\"addNewList\"\n  >\n</label>\n```\n\n## 運用 computed 將已完成事項的 array 重新組裝字串\n---\n\n雖然點選待辦事項的 checkbox 可以將待辦事項加入到 doneList 的空陣列中，而且已完成事項也可以顯示資料。\n但是顯示出來的不是想要的效果，如果只想要顯示陣列中的字串而已的話，該怎麼做呢？\n這裡就可以使用 `computed`，在 Vue 的資料中加入：\n\n```\ncomputed: {\n  doneListToString: function() {\n    return this.doneList.join(', ')\n  }\n}\n```\n\n在 template 部份，把原本已辦完 `已辦完：{{ doneList }}` 改成 computed 的函式名稱：\n\n```\n<div class=\"showDoneList\">\n  <h2>已完成事項：</h2>\n  <p \n    v-if=\"doneList!=''\"\n    class=\"done\"\n  >已辦完：{{ doneListToString }}</p>\n  <p v-else>尚未完成任何事項</p>\n</div>\n```\n\n就可以將選取的資料以字串加上 `,` 顯示。\n\n## 運用 filters\n---\n\n`filters` 可以將文字做成需要的格式處理，例如想要把待辦事項的各個事項前後加上 `|`。\n先在 Vue 資料中加入：\n\n```\nfilters: {\n  doneListFormat: function(str) {\n    return `| ${str} |`\n  }\n}\n```\n\n然後在 template 部份，在原本 todos 中跑出 item 的後面加上 `filters` 的名稱：\n\n```\n<div class=\"showTodos\">\n  <h2>待辦事項：</h2>\n  <label v-for=\"item in todos\">\n  <input \n    type=\"checkbox\"\n    :value=\"item\"\n    v-model=\"doneList\"\n  >\n    {{ item | doneListFormat }}\n  </label>\n</div>\n```\n\n## watch\n---\n\n`watch` 這個功能可以即時的監聽某個值，如果發生變動就可以做某些事情。\n例如當新增待辦事項時，可以跳出 alert，並表示已新增事項：\n\n```\nwatch: {\n  todos: function() {\n    alert('已新增事項')\n  }\n}\n```\n\n這樣當新增事項到 todos 中時，由於 todos 的資料變動，所以就會做出我們給的指令。\n*注意不要監聽 inputNewTodo，如果每輸入一個字就會一直跳 alert*\n\n這邊還可以做一個運用，如果輸入待辦事項是空字串的話，就會跳 alert，例如：\n\n```\nwatch: {\n  todos: function() {\n    if(this.inputNewTodo === '') {\n      alert ('請輸入文字')\n    }\n  }\n}\n```\n\n這樣當輸入的是空字串的話，就會跳 alert 提示請輸入文字。\n\n## 加入一些其他功能\n---\n\n### 判斷輸入文字才能新增待辦事項\n\n接著修改一些小 bug，由於新增待辦事項，如果沒輸入文字，直接按新增或是按 Enter 都可以新增到 todos 中，所以要在 addNewList 加入判斷，需要加入文字才能夠新增。\n\n還有加入新增事項後，將輸入欄位清空。\n\n```\naddNewList: function() {\n  if(this.inputNewTodo === '') {\n    alert('請輸入文字')  // 如果輸入空字串就跳提示\n  } else {\n    this.todos.push(this.inputNewTodo);\n    this.inputNewTodo = ''  // 清空輸入欄位\n  }\n}\n```\n\n### 刪除所有事項\n\n最後如果想刪除所有事項的話，我再加入一個刪除的按鈕，並在 `methods` 新增並綁定它，就完成了。\n\n```\ndeleteAllTodos: function() {\n  this.todos = [];\n  this.doneList = []\n}\n```\n## 後記\n---\n\n其他一些東西還有再做一些修改，有微調或是去掉，例如：`watch`。\n新增事項成功就跳 alert 有點惱人，後來改成監聽如果完成，好像也不太適合，於是就關掉 `watch` 了。\n\n其他如果有想到其他東西可以再想辦法加進去，例如 localStorage。\n","slug":"makeTodolistByVue","published":1,"updated":"2020-05-16T09:26:28.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyn0011b6u7dgve58lr","content":"<p>很多教學都會試著做出 TodoList 來驗收自己學習的成果，這篇文章也不免俗的將會運用目前學到的 Vue 技術，做出一個簡易的 TodoList。 </p>\n<a id=\"more\"></a>\n\n<p>使用 Vue 來做 TodoList 真的蠻方便的，以前我覺得做這個好麻煩，用了 Vue 來做快上不少。<br>話不多說，先看成果：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/dcg2jzs4/5/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"建立-Vue-環境\"><a href=\"#建立-Vue-環境\" class=\"headerlink\" title=\"建立 Vue 環境\"></a>建立 Vue 環境</h2><hr>\n<p>首先在 HTML 頁面上建置一個 Vue 的環境，讓資料可以透過 Vue 渲染到 HTML。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>資料部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue (&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \ttitle: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"輸入欄位雙向綁定\"><a href=\"#輸入欄位雙向綁定\" class=\"headerlink\" title=\"輸入欄位雙向綁定\"></a>輸入欄位雙向綁定</h2><hr>\n<ol>\n<li>新增一個 input 欄位，讓輸入的文字可以用 <code>v-model</code> 雙向綁定在 <code>inputNewTodo</code> 中，在 Vue 的資料中是一個空字串，讓輸入的文字可以塞入：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  title: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  inputNewTodo: &#39;&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot;</span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>將輸入的文字可以即時顯示，加上 <code>v-if</code> 跟 <code>v-else</code> 的判斷條件，可以顯示不同狀態的文字：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showNewTodo&quot;&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;inputNewTodo!&#x3D;&#39;&#39;&quot;&gt;  &#x2F;&#x2F; 如果有東西就顯示</span><br><span class=\"line\">    你新增的待辦事項：&#123;&#123; inputNewTodo &#125;&#125;  &#x2F;&#x2F; 即時連動輸入的文字</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">  &lt;p v-else&gt;  &#x2F;&#x2F; 如果是空字串就顯示</span><br><span class=\"line\">    尚未新增待辦事項。</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"待辦事項\"><a href=\"#待辦事項\" class=\"headerlink\" title=\"待辦事項\"></a>待辦事項</h3><p>輸入一些待辦事項，首先用一些事項用 checkbox 看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;todos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗車</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗衣服</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    玩森友會</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"QWjZyVJ\" src=\"https://codepen.io/bucky0112/embed/QWjZyVJ?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/QWjZyVJ' target=\"_blank\" rel=\"noopener\">QWjZyVJ</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>雖然資料有顯示出來，但是如果資料的部分用在 Vue 的 data 中會比較好管理，所以 HTML 的部份改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;  &#x2F;&#x2F; 前面不一定要叫 item，todos 是資料來源</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot; </span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>讓資料由 Vue 去做管理，新增一個 todos，讓 <code>v-for</code> 從裡面擷取資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos: [&#39;洗車&#39;, &#39;洗衣服&#39;, &#39;玩森友會&#39;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"已完成事項\"><a href=\"#已完成事項\" class=\"headerlink\" title=\"已完成事項\"></a>已完成事項</h3><p>前面做完待辦事項的資料，接著要做出如果打勾 checkbox 後，讓已勾選的資料可以渲染到已完成的空陣列。</p>\n<p>首先做一個空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doneList: [],</span><br></pre></td></tr></table></figure>\n\n<p>然後要在待辦事項設置一個 <code>v-model</code>，讓點選的資料即時進入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot;    &#x2F;&#x2F; 注意這邊要使用 v-bind 綁定 value</span><br><span class=\"line\">      v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 的部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;&gt;已辦完：&#123;&#123; doneList &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\"><a href=\"#讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\" class=\"headerlink\" title=\"讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中\"></a>讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中</h2><hr>\n<p>在 Vue 的資料中新增一個 <code>methods</code>，然後加入點擊新增資料的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addNewList: function() &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著在 button 加上 <code>@click</code> 綁定 addNewList：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click&#x3D;&quot;addNewList&quot;&gt;新增&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣輸入新資料，然後點擊按鈕就可以將新資料帶入 todos 的陣列中了。<br>如果想做出輸入完資料，按 Enter 鍵也有一樣效果的話，就在輸入待辦事項的 input 欄位加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; </span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot; </span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    @keyup.enter&#x3D;&quot;addNewList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"運用-computed-將已完成事項的-array-重新組裝字串\"><a href=\"#運用-computed-將已完成事項的-array-重新組裝字串\" class=\"headerlink\" title=\"運用 computed 將已完成事項的 array 重新組裝字串\"></a>運用 computed 將已完成事項的 array 重新組裝字串</h2><hr>\n<p>雖然點選待辦事項的 checkbox 可以將待辦事項加入到 doneList 的空陣列中，而且已完成事項也可以顯示資料。<br>但是顯示出來的不是想要的效果，如果只想要顯示陣列中的字串而已的話，該怎麼做呢？<br>這裡就可以使用 <code>computed</code>，在 Vue 的資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneListToString: function() &#123;</span><br><span class=\"line\">    return this.doneList.join(&#39;, &#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 部份，把原本已辦完 <code>已辦完：</code> 改成 computed 的函式名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p </span><br><span class=\"line\">    v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;</span><br><span class=\"line\">    class&#x3D;&quot;done&quot;</span><br><span class=\"line\">  &gt;已辦完：&#123;&#123; doneListToString &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>就可以將選取的資料以字串加上 <code>,</code> 顯示。</p>\n<h2 id=\"運用-filters\"><a href=\"#運用-filters\" class=\"headerlink\" title=\"運用 filters\"></a>運用 filters</h2><hr>\n<p><code>filters</code> 可以將文字做成需要的格式處理，例如想要把待辦事項的各個事項前後加上 <code>|</code>。<br>先在 Vue 資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  doneListFormat: function(str) &#123;</span><br><span class=\"line\">    return &#96;| $&#123;str&#125; |&#96;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後在 template 部份，在原本 todos 中跑出 item 的後面加上 <code>filters</code> 的名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">  &lt;input </span><br><span class=\"line\">    type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">    :value&#x3D;&quot;item&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &#123;&#123; item | doneListFormat &#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><hr>\n<p><code>watch</code> 這個功能可以即時的監聽某個值，如果發生變動就可以做某些事情。<br>例如當新增待辦事項時，可以跳出 alert，並表示已新增事項：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    alert(&#39;已新增事項&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當新增事項到 todos 中時，由於 todos 的資料變動，所以就會做出我們給的指令。<br><em>注意不要監聽 inputNewTodo，如果每輸入一個字就會一直跳 alert</em></p>\n<p>這邊還可以做一個運用，如果輸入待辦事項是空字串的話，就會跳 alert，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      alert (&#39;請輸入文字&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當輸入的是空字串的話，就會跳 alert 提示請輸入文字。</p>\n<h2 id=\"加入一些其他功能\"><a href=\"#加入一些其他功能\" class=\"headerlink\" title=\"加入一些其他功能\"></a>加入一些其他功能</h2><hr>\n<h3 id=\"判斷輸入文字才能新增待辦事項\"><a href=\"#判斷輸入文字才能新增待辦事項\" class=\"headerlink\" title=\"判斷輸入文字才能新增待辦事項\"></a>判斷輸入文字才能新增待辦事項</h3><p>接著修改一些小 bug，由於新增待辦事項，如果沒輸入文字，直接按新增或是按 Enter 都可以新增到 todos 中，所以要在 addNewList 加入判斷，需要加入文字才能夠新增。</p>\n<p>還有加入新增事項後，將輸入欄位清空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addNewList: function() &#123;</span><br><span class=\"line\">  if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">    alert(&#39;請輸入文字&#39;)  &#x2F;&#x2F; 如果輸入空字串就跳提示</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo);</span><br><span class=\"line\">    this.inputNewTodo &#x3D; &#39;&#39;  &#x2F;&#x2F; 清空輸入欄位</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刪除所有事項\"><a href=\"#刪除所有事項\" class=\"headerlink\" title=\"刪除所有事項\"></a>刪除所有事項</h3><p>最後如果想刪除所有事項的話，我再加入一個刪除的按鈕，並在 <code>methods</code> 新增並綁定它，就完成了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteAllTodos: function() &#123;</span><br><span class=\"line\">  this.todos &#x3D; [];</span><br><span class=\"line\">  this.doneList &#x3D; []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><hr>\n<p>其他一些東西還有再做一些修改，有微調或是去掉，例如：<code>watch</code>。<br>新增事項成功就跳 alert 有點惱人，後來改成監聽如果完成，好像也不太適合，於是就關掉 <code>watch</code> 了。</p>\n<p>其他如果有想到其他東西可以再想辦法加進去，例如 localStorage。</p>\n","site":{"data":{}},"excerpt":"<p>很多教學都會試著做出 TodoList 來驗收自己學習的成果，這篇文章也不免俗的將會運用目前學到的 Vue 技術，做出一個簡易的 TodoList。 </p>","more":"<p>使用 Vue 來做 TodoList 真的蠻方便的，以前我覺得做這個好麻煩，用了 Vue 來做快上不少。<br>話不多說，先看成果：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/dcg2jzs4/5/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"建立-Vue-環境\"><a href=\"#建立-Vue-環境\" class=\"headerlink\" title=\"建立 Vue 環境\"></a>建立 Vue 環境</h2><hr>\n<p>首先在 HTML 頁面上建置一個 Vue 的環境，讓資料可以透過 Vue 渲染到 HTML。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>資料部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue (&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \ttitle: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"輸入欄位雙向綁定\"><a href=\"#輸入欄位雙向綁定\" class=\"headerlink\" title=\"輸入欄位雙向綁定\"></a>輸入欄位雙向綁定</h2><hr>\n<ol>\n<li>新增一個 input 欄位，讓輸入的文字可以用 <code>v-model</code> 雙向綁定在 <code>inputNewTodo</code> 中，在 Vue 的資料中是一個空字串，讓輸入的文字可以塞入：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  title: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  inputNewTodo: &#39;&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot;</span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>將輸入的文字可以即時顯示，加上 <code>v-if</code> 跟 <code>v-else</code> 的判斷條件，可以顯示不同狀態的文字：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showNewTodo&quot;&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;inputNewTodo!&#x3D;&#39;&#39;&quot;&gt;  &#x2F;&#x2F; 如果有東西就顯示</span><br><span class=\"line\">    你新增的待辦事項：&#123;&#123; inputNewTodo &#125;&#125;  &#x2F;&#x2F; 即時連動輸入的文字</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">  &lt;p v-else&gt;  &#x2F;&#x2F; 如果是空字串就顯示</span><br><span class=\"line\">    尚未新增待辦事項。</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"待辦事項\"><a href=\"#待辦事項\" class=\"headerlink\" title=\"待辦事項\"></a>待辦事項</h3><p>輸入一些待辦事項，首先用一些事項用 checkbox 看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;todos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗車</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗衣服</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    玩森友會</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"QWjZyVJ\" src=\"https://codepen.io/bucky0112/embed/QWjZyVJ?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/QWjZyVJ' target=\"_blank\" rel=\"noopener\">QWjZyVJ</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>雖然資料有顯示出來，但是如果資料的部分用在 Vue 的 data 中會比較好管理，所以 HTML 的部份改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;  &#x2F;&#x2F; 前面不一定要叫 item，todos 是資料來源</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot; </span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>讓資料由 Vue 去做管理，新增一個 todos，讓 <code>v-for</code> 從裡面擷取資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos: [&#39;洗車&#39;, &#39;洗衣服&#39;, &#39;玩森友會&#39;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"已完成事項\"><a href=\"#已完成事項\" class=\"headerlink\" title=\"已完成事項\"></a>已完成事項</h3><p>前面做完待辦事項的資料，接著要做出如果打勾 checkbox 後，讓已勾選的資料可以渲染到已完成的空陣列。</p>\n<p>首先做一個空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doneList: [],</span><br></pre></td></tr></table></figure>\n\n<p>然後要在待辦事項設置一個 <code>v-model</code>，讓點選的資料即時進入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot;    &#x2F;&#x2F; 注意這邊要使用 v-bind 綁定 value</span><br><span class=\"line\">      v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 的部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;&gt;已辦完：&#123;&#123; doneList &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\"><a href=\"#讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\" class=\"headerlink\" title=\"讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中\"></a>讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中</h2><hr>\n<p>在 Vue 的資料中新增一個 <code>methods</code>，然後加入點擊新增資料的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addNewList: function() &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著在 button 加上 <code>@click</code> 綁定 addNewList：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button @click&#x3D;&quot;addNewList&quot;&gt;新增&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣輸入新資料，然後點擊按鈕就可以將新資料帶入 todos 的陣列中了。<br>如果想做出輸入完資料，按 Enter 鍵也有一樣效果的話，就在輸入待辦事項的 input 欄位加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; </span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot; </span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    @keyup.enter&#x3D;&quot;addNewList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"運用-computed-將已完成事項的-array-重新組裝字串\"><a href=\"#運用-computed-將已完成事項的-array-重新組裝字串\" class=\"headerlink\" title=\"運用 computed 將已完成事項的 array 重新組裝字串\"></a>運用 computed 將已完成事項的 array 重新組裝字串</h2><hr>\n<p>雖然點選待辦事項的 checkbox 可以將待辦事項加入到 doneList 的空陣列中，而且已完成事項也可以顯示資料。<br>但是顯示出來的不是想要的效果，如果只想要顯示陣列中的字串而已的話，該怎麼做呢？<br>這裡就可以使用 <code>computed</code>，在 Vue 的資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneListToString: function() &#123;</span><br><span class=\"line\">    return this.doneList.join(&#39;, &#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 部份，把原本已辦完 <code>已辦完：</code> 改成 computed 的函式名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p </span><br><span class=\"line\">    v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;</span><br><span class=\"line\">    class&#x3D;&quot;done&quot;</span><br><span class=\"line\">  &gt;已辦完：&#123;&#123; doneListToString &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>就可以將選取的資料以字串加上 <code>,</code> 顯示。</p>\n<h2 id=\"運用-filters\"><a href=\"#運用-filters\" class=\"headerlink\" title=\"運用 filters\"></a>運用 filters</h2><hr>\n<p><code>filters</code> 可以將文字做成需要的格式處理，例如想要把待辦事項的各個事項前後加上 <code>|</code>。<br>先在 Vue 資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  doneListFormat: function(str) &#123;</span><br><span class=\"line\">    return &#96;| $&#123;str&#125; |&#96;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後在 template 部份，在原本 todos 中跑出 item 的後面加上 <code>filters</code> 的名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">  &lt;input </span><br><span class=\"line\">    type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">    :value&#x3D;&quot;item&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &#123;&#123; item | doneListFormat &#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><hr>\n<p><code>watch</code> 這個功能可以即時的監聽某個值，如果發生變動就可以做某些事情。<br>例如當新增待辦事項時，可以跳出 alert，並表示已新增事項：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    alert(&#39;已新增事項&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當新增事項到 todos 中時，由於 todos 的資料變動，所以就會做出我們給的指令。<br><em>注意不要監聽 inputNewTodo，如果每輸入一個字就會一直跳 alert</em></p>\n<p>這邊還可以做一個運用，如果輸入待辦事項是空字串的話，就會跳 alert，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      alert (&#39;請輸入文字&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當輸入的是空字串的話，就會跳 alert 提示請輸入文字。</p>\n<h2 id=\"加入一些其他功能\"><a href=\"#加入一些其他功能\" class=\"headerlink\" title=\"加入一些其他功能\"></a>加入一些其他功能</h2><hr>\n<h3 id=\"判斷輸入文字才能新增待辦事項\"><a href=\"#判斷輸入文字才能新增待辦事項\" class=\"headerlink\" title=\"判斷輸入文字才能新增待辦事項\"></a>判斷輸入文字才能新增待辦事項</h3><p>接著修改一些小 bug，由於新增待辦事項，如果沒輸入文字，直接按新增或是按 Enter 都可以新增到 todos 中，所以要在 addNewList 加入判斷，需要加入文字才能夠新增。</p>\n<p>還有加入新增事項後，將輸入欄位清空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addNewList: function() &#123;</span><br><span class=\"line\">  if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">    alert(&#39;請輸入文字&#39;)  &#x2F;&#x2F; 如果輸入空字串就跳提示</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo);</span><br><span class=\"line\">    this.inputNewTodo &#x3D; &#39;&#39;  &#x2F;&#x2F; 清空輸入欄位</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刪除所有事項\"><a href=\"#刪除所有事項\" class=\"headerlink\" title=\"刪除所有事項\"></a>刪除所有事項</h3><p>最後如果想刪除所有事項的話，我再加入一個刪除的按鈕，並在 <code>methods</code> 新增並綁定它，就完成了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteAllTodos: function() &#123;</span><br><span class=\"line\">  this.todos &#x3D; [];</span><br><span class=\"line\">  this.doneList &#x3D; []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><hr>\n<p>其他一些東西還有再做一些修改，有微調或是去掉，例如：<code>watch</code>。<br>新增事項成功就跳 alert 有點惱人，後來改成監聽如果完成，好像也不太適合，於是就關掉 <code>watch</code> 了。</p>\n<p>其他如果有想到其他東西可以再想辦法加進去，例如 localStorage。</p>"},{"title":"使用 Hexo 在 GitHub 部署 Blog","date":"2020-03-28T06:55:52.000Z","keywords":["hexo","next","github","blog"],"decription":null,"_content":"\n本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。\n\n剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！\n<!--more-->\n\n## 前置作業\n---\n\n**安裝需求**\n\n需要安裝：\n\n* Node.js\n* Git\n\n> 以下方式為 Mac 使用者方法，其他作業系統請詳閱[官網](https://hexo.io/docs/index.html)\n\n1. 安裝 Xcode\n\n首先到 App Store 安裝 Xcode，安裝完成後，\n開啟它並前往 Preferences -> Download -> Command Line Tools -> Install 安裝命令列工具。\n\n2. 安裝 node.js\n\n使用 NVM，或是直接用 HomeBrew 安裝：\n\n```\n$ brew install node\n```\n\n3. 安裝 Hexo：\n\n```\n$ npm install -g hexo-cli\n```\n\n4. 完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：\n\n```\n$ hexo version\n```\n\n我的版本是：\n\nhexo: 4.2.0\nhexo-cli: 3.1.0\n\n## 建立專案\n---\n\n在指定資料夾建立檔案：\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n完成後會建立以下資料：\n\n![](https://i.imgur.com/1eucaEQ.png)\n\n## 更改主題與其他設定\n---\n\n主題選用的是 [Next](https://github.com/theme-next/hexo-theme-next)，更改步驟如下：\n\n1. 把 next 這個主題 clone 下來：\n\n```\n   $ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n2. 找到 /_config.yml，打開修改：\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next    // 改為 next\n```\n\n3. 網站設定：\n\n```\n# Site\ntitle: 標題\nsubtitle: 副標題\ndescription: 網站描述\nkeywords: 網站關鍵字\nauthor: 作者名\nlanguage: zh-TW\ntimezone: 時區\n```\n\n其他一些細部設定就可以自己慢慢摸索。\n\n如果要先看看網站的樣式，可以啟動本地端的 server：\n\n```\n$ hexo server\n```\n\n## 寫作\n---\n\n接下來，大概設定完就可以開始建立文章了。\n\n指令是：\n\n```\n$ hexo new [layout] <title>\n```\n\nLayout 有 3 種，分別是：post、page(頁面)、draft(草稿)，\n\n假設要發一篇檔名為 Hello-World 草稿的話：`hexo new draft Hello-World`\n\n如果要將 draft 發布為 post 的話，就鍵入：\n\n```\n$ hexo publish [layout] <title>\n```\n\n## 把網站部署到 GitHub\n---\n\n既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。\n\n1. 新增名為 `<username>.github.io` 的 repo，例如：`bucky0112.github.io`\n\n2. 安裝 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 這個插件：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n3. 修改 /_config.yml：\n\n```\nurl: https://username.github.io\nroot: /repo.github.io/\n\ndeploy:\n  type: git\n  repo: <repository url> #新增repo的網址\n  branch: master\n```\n\n4. 上傳網站，執行：\n\n```\n$ hexo deploy\n```\n\n5. 接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。\n\n```\nhttps://username.github.io/repo.github.io\n```\n\n## Hexo 常用指令\n---\n\n以下是之後再使用 Hexo 發佈文章時常用的指令：\n\n```\n$ hexo generate      #產生靜態檔案 / hexo g\n$ hexo deploy        #部署網站 \n$ hexo server        #啟動本地端伺服器 / hexo s\n$ hexo new <post>    #新增文章\n$ hexo clean         #清除快取檔案和已產生的靜態檔案\n```","source":"_posts/使用Hexo在GitHub部署Blog.md","raw":"---\ntitle: 使用 Hexo 在 GitHub 部署 Blog\ndate: 2020-03-28 14:55:52\ntags:\n- hexo\n- next\ncategories: Hexo\nkeywords:   \n- hexo\n- next\n- github\n- blog\ndecription: #文章敘述\n---\n\n本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。\n\n剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！\n<!--more-->\n\n## 前置作業\n---\n\n**安裝需求**\n\n需要安裝：\n\n* Node.js\n* Git\n\n> 以下方式為 Mac 使用者方法，其他作業系統請詳閱[官網](https://hexo.io/docs/index.html)\n\n1. 安裝 Xcode\n\n首先到 App Store 安裝 Xcode，安裝完成後，\n開啟它並前往 Preferences -> Download -> Command Line Tools -> Install 安裝命令列工具。\n\n2. 安裝 node.js\n\n使用 NVM，或是直接用 HomeBrew 安裝：\n\n```\n$ brew install node\n```\n\n3. 安裝 Hexo：\n\n```\n$ npm install -g hexo-cli\n```\n\n4. 完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：\n\n```\n$ hexo version\n```\n\n我的版本是：\n\nhexo: 4.2.0\nhexo-cli: 3.1.0\n\n## 建立專案\n---\n\n在指定資料夾建立檔案：\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n完成後會建立以下資料：\n\n![](https://i.imgur.com/1eucaEQ.png)\n\n## 更改主題與其他設定\n---\n\n主題選用的是 [Next](https://github.com/theme-next/hexo-theme-next)，更改步驟如下：\n\n1. 把 next 這個主題 clone 下來：\n\n```\n   $ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n\n2. 找到 /_config.yml，打開修改：\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next    // 改為 next\n```\n\n3. 網站設定：\n\n```\n# Site\ntitle: 標題\nsubtitle: 副標題\ndescription: 網站描述\nkeywords: 網站關鍵字\nauthor: 作者名\nlanguage: zh-TW\ntimezone: 時區\n```\n\n其他一些細部設定就可以自己慢慢摸索。\n\n如果要先看看網站的樣式，可以啟動本地端的 server：\n\n```\n$ hexo server\n```\n\n## 寫作\n---\n\n接下來，大概設定完就可以開始建立文章了。\n\n指令是：\n\n```\n$ hexo new [layout] <title>\n```\n\nLayout 有 3 種，分別是：post、page(頁面)、draft(草稿)，\n\n假設要發一篇檔名為 Hello-World 草稿的話：`hexo new draft Hello-World`\n\n如果要將 draft 發布為 post 的話，就鍵入：\n\n```\n$ hexo publish [layout] <title>\n```\n\n## 把網站部署到 GitHub\n---\n\n既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。\n\n1. 新增名為 `<username>.github.io` 的 repo，例如：`bucky0112.github.io`\n\n2. 安裝 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 這個插件：\n\n```\n$ npm install hexo-deployer-git --save\n```\n\n3. 修改 /_config.yml：\n\n```\nurl: https://username.github.io\nroot: /repo.github.io/\n\ndeploy:\n  type: git\n  repo: <repository url> #新增repo的網址\n  branch: master\n```\n\n4. 上傳網站，執行：\n\n```\n$ hexo deploy\n```\n\n5. 接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。\n\n```\nhttps://username.github.io/repo.github.io\n```\n\n## Hexo 常用指令\n---\n\n以下是之後再使用 Hexo 發佈文章時常用的指令：\n\n```\n$ hexo generate      #產生靜態檔案 / hexo g\n$ hexo deploy        #部署網站 \n$ hexo server        #啟動本地端伺服器 / hexo s\n$ hexo new <post>    #新增文章\n$ hexo clean         #清除快取檔案和已產生的靜態檔案\n```","slug":"使用Hexo在GitHub部署Blog","published":1,"updated":"2020-04-06T08:32:11.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyp0014b6u70c7d79jr","content":"<p>本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。</p>\n<p>剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><hr>\n<p><strong>安裝需求</strong></p>\n<p>需要安裝：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<blockquote>\n<p>以下方式為 Mac 使用者方法，其他作業系統請詳閱<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官網</a></p>\n</blockquote>\n<ol>\n<li>安裝 Xcode</li>\n</ol>\n<p>首先到 App Store 安裝 Xcode，安裝完成後，<br>開啟它並前往 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。</p>\n<ol start=\"2\">\n<li>安裝 node.js</li>\n</ol>\n<p>使用 NVM，或是直接用 HomeBrew 安裝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安裝 Hexo：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>我的版本是：</p>\n<p>hexo: 4.2.0<br>hexo-cli: 3.1.0</p>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><hr>\n<p>在指定資料夾建立檔案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成後會建立以下資料：</p>\n<p><img src=\"https://i.imgur.com/1eucaEQ.png\" alt=\"\"></p>\n<h2 id=\"更改主題與其他設定\"><a href=\"#更改主題與其他設定\" class=\"headerlink\" title=\"更改主題與其他設定\"></a>更改主題與其他設定</h2><hr>\n<p>主題選用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，更改步驟如下：</p>\n<ol>\n<li>把 next 這個主題 clone 下來：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>找到 /_config.yml，打開修改：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next    &#x2F;&#x2F; 改為 next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>網站設定：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: 標題</span><br><span class=\"line\">subtitle: 副標題</span><br><span class=\"line\">description: 網站描述</span><br><span class=\"line\">keywords: 網站關鍵字</span><br><span class=\"line\">author: 作者名</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">timezone: 時區</span><br></pre></td></tr></table></figure>\n\n<p>其他一些細部設定就可以自己慢慢摸索。</p>\n<p>如果要先看看網站的樣式，可以啟動本地端的 server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寫作\"><a href=\"#寫作\" class=\"headerlink\" title=\"寫作\"></a>寫作</h2><hr>\n<p>接下來，大概設定完就可以開始建立文章了。</p>\n<p>指令是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Layout 有 3 種，分別是：post、page(頁面)、draft(草稿)，</p>\n<p>假設要發一篇檔名為 Hello-World 草稿的話：<code>hexo new draft Hello-World</code></p>\n<p>如果要將 draft 發布為 post 的話，就鍵入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把網站部署到-GitHub\"><a href=\"#把網站部署到-GitHub\" class=\"headerlink\" title=\"把網站部署到 GitHub\"></a>把網站部署到 GitHub</h2><hr>\n<p>既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。</p>\n<ol>\n<li><p>新增名為 <code>&lt;username&gt;.github.io</code> 的 repo，例如：<code>bucky0112.github.io</code></p>\n</li>\n<li><p>安裝 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 這個插件：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 /_config.yml：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https:&#x2F;&#x2F;username.github.io</span><br><span class=\"line\">root: &#x2F;repo.github.io&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; #新增repo的網址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>上傳網站，執行：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;username.github.io&#x2F;repo.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-常用指令\"><a href=\"#Hexo-常用指令\" class=\"headerlink\" title=\"Hexo 常用指令\"></a>Hexo 常用指令</h2><hr>\n<p>以下是之後再使用 Hexo 發佈文章時常用的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate      #產生靜態檔案 &#x2F; hexo g</span><br><span class=\"line\">$ hexo deploy        #部署網站 </span><br><span class=\"line\">$ hexo server        #啟動本地端伺服器 &#x2F; hexo s</span><br><span class=\"line\">$ hexo new &lt;post&gt;    #新增文章</span><br><span class=\"line\">$ hexo clean         #清除快取檔案和已產生的靜態檔案</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。</p>\n<p>剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！</p>","more":"<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><hr>\n<p><strong>安裝需求</strong></p>\n<p>需要安裝：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<blockquote>\n<p>以下方式為 Mac 使用者方法，其他作業系統請詳閱<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官網</a></p>\n</blockquote>\n<ol>\n<li>安裝 Xcode</li>\n</ol>\n<p>首先到 App Store 安裝 Xcode，安裝完成後，<br>開啟它並前往 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。</p>\n<ol start=\"2\">\n<li>安裝 node.js</li>\n</ol>\n<p>使用 NVM，或是直接用 HomeBrew 安裝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安裝 Hexo：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>我的版本是：</p>\n<p>hexo: 4.2.0<br>hexo-cli: 3.1.0</p>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><hr>\n<p>在指定資料夾建立檔案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成後會建立以下資料：</p>\n<p><img src=\"https://i.imgur.com/1eucaEQ.png\" alt=\"\"></p>\n<h2 id=\"更改主題與其他設定\"><a href=\"#更改主題與其他設定\" class=\"headerlink\" title=\"更改主題與其他設定\"></a>更改主題與其他設定</h2><hr>\n<p>主題選用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，更改步驟如下：</p>\n<ol>\n<li>把 next 這個主題 clone 下來：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>找到 /_config.yml，打開修改：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next    &#x2F;&#x2F; 改為 next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>網站設定：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: 標題</span><br><span class=\"line\">subtitle: 副標題</span><br><span class=\"line\">description: 網站描述</span><br><span class=\"line\">keywords: 網站關鍵字</span><br><span class=\"line\">author: 作者名</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">timezone: 時區</span><br></pre></td></tr></table></figure>\n\n<p>其他一些細部設定就可以自己慢慢摸索。</p>\n<p>如果要先看看網站的樣式，可以啟動本地端的 server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寫作\"><a href=\"#寫作\" class=\"headerlink\" title=\"寫作\"></a>寫作</h2><hr>\n<p>接下來，大概設定完就可以開始建立文章了。</p>\n<p>指令是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Layout 有 3 種，分別是：post、page(頁面)、draft(草稿)，</p>\n<p>假設要發一篇檔名為 Hello-World 草稿的話：<code>hexo new draft Hello-World</code></p>\n<p>如果要將 draft 發布為 post 的話，就鍵入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把網站部署到-GitHub\"><a href=\"#把網站部署到-GitHub\" class=\"headerlink\" title=\"把網站部署到 GitHub\"></a>把網站部署到 GitHub</h2><hr>\n<p>既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。</p>\n<ol>\n<li><p>新增名為 <code>&lt;username&gt;.github.io</code> 的 repo，例如：<code>bucky0112.github.io</code></p>\n</li>\n<li><p>安裝 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 這個插件：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 /_config.yml：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https:&#x2F;&#x2F;username.github.io</span><br><span class=\"line\">root: &#x2F;repo.github.io&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; #新增repo的網址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>上傳網站，執行：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;username.github.io&#x2F;repo.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-常用指令\"><a href=\"#Hexo-常用指令\" class=\"headerlink\" title=\"Hexo 常用指令\"></a>Hexo 常用指令</h2><hr>\n<p>以下是之後再使用 Hexo 發佈文章時常用的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate      #產生靜態檔案 &#x2F; hexo g</span><br><span class=\"line\">$ hexo deploy        #部署網站 </span><br><span class=\"line\">$ hexo server        #啟動本地端伺服器 &#x2F; hexo s</span><br><span class=\"line\">$ hexo new &lt;post&gt;    #新增文章</span><br><span class=\"line\">$ hexo clean         #清除快取檔案和已產生的靜態檔案</span><br></pre></td></tr></table></figure>"},{"title":"全域環境與全域物件","keywords":["javascript","JavaScript 全攻略：克服 JS 的奇怪部分","全域環境","全域物件"],"decription":"全域環境與全域物件在 JavaScript 的意義","_content":"這一篇文章會提到全域環境與全域物件在瀏覽器中的執行。\n<!--more-->\n\n## 全域環境\n---\n\n首先來執行個 JavaScript 檔案看看：\n\n```\n\n```\n\n等等，這是空的耶！沒寫任何東西也能執行嗎？\n\n首先在執行 JavaScript 時，會先創造**全域執行環境**，所謂的**全域**代表可以在任何地方取用它。\n\n而全域環境會創造 2 樣東西：\n\n1. 全域物件\n2. 特殊變數 - this\n\n## 全域物件\n---\n\n我們試著打開瀏覽器開發者工具的 console，雖然看起來沒東西\n\n![Image](https://i.imgur.com/RmUrC0K.png)\n\n但是輸入 `this` 看看，可以發現明明沒有輸入任何程式碼，卻出現了 **Window** 這個物件\n\n![](https://i.imgur.com/5hdiDvJ.png)\n\n而這個 window 物件，就是瀏覽器裡這個頁面的全域物件。\n\n**this** 代表的是這個分頁，如果開另一份分頁，會有另一個全域物件。\n\n每一個視窗都會有自己的執行環境，和自己的全域物件。\n\n來看以下的範例，建立一個變數，並給它一個值：\n\n```\nvar a = \"hello\"\n```\n\n這時候再打開 console ，輸入 `window` 看看。\n可以看到裡面多了一個物件，名稱是 a，值是 \"hello\"。\n\n![](https://i.imgur.com/iFQrtzH.png)\n\n由於創造變數時，變數不是在函式中，所以變數會和全域物件連結，這時的 a 就是全域物件。\n\n如果在瀏覽器運行，全域物件就是 window，還會得到一個特殊變數 this ，在使用瀏覽器的情況下， **window = this**。\n\n所以如果要找出 a 的話，就可以使用 `this.a`、`window.a`，或是直接輸入 `a`：\n\n![Image](https://i.imgur.com/lcxigiR.png)","source":"_posts/全域環境與全域物件.md","raw":"---\ntitle: 全域環境與全域物件\ntags:\n  - javascript\n  - 全域環境\n  - 全域物件\ncategories: JavaScript 的怪奇物語\nkeywords:\n  - javascript\n  - JavaScript 全攻略：克服 JS 的奇怪部分\n  - 全域環境\n  - 全域物件\ndecription: 全域環境與全域物件在 JavaScript 的意義\n---\n這一篇文章會提到全域環境與全域物件在瀏覽器中的執行。\n<!--more-->\n\n## 全域環境\n---\n\n首先來執行個 JavaScript 檔案看看：\n\n```\n\n```\n\n等等，這是空的耶！沒寫任何東西也能執行嗎？\n\n首先在執行 JavaScript 時，會先創造**全域執行環境**，所謂的**全域**代表可以在任何地方取用它。\n\n而全域環境會創造 2 樣東西：\n\n1. 全域物件\n2. 特殊變數 - this\n\n## 全域物件\n---\n\n我們試著打開瀏覽器開發者工具的 console，雖然看起來沒東西\n\n![Image](https://i.imgur.com/RmUrC0K.png)\n\n但是輸入 `this` 看看，可以發現明明沒有輸入任何程式碼，卻出現了 **Window** 這個物件\n\n![](https://i.imgur.com/5hdiDvJ.png)\n\n而這個 window 物件，就是瀏覽器裡這個頁面的全域物件。\n\n**this** 代表的是這個分頁，如果開另一份分頁，會有另一個全域物件。\n\n每一個視窗都會有自己的執行環境，和自己的全域物件。\n\n來看以下的範例，建立一個變數，並給它一個值：\n\n```\nvar a = \"hello\"\n```\n\n這時候再打開 console ，輸入 `window` 看看。\n可以看到裡面多了一個物件，名稱是 a，值是 \"hello\"。\n\n![](https://i.imgur.com/iFQrtzH.png)\n\n由於創造變數時，變數不是在函式中，所以變數會和全域物件連結，這時的 a 就是全域物件。\n\n如果在瀏覽器運行，全域物件就是 window，還會得到一個特殊變數 this ，在使用瀏覽器的情況下， **window = this**。\n\n所以如果要找出 a 的話，就可以使用 `this.a`、`window.a`，或是直接輸入 `a`：\n\n![Image](https://i.imgur.com/lcxigiR.png)","slug":"全域環境與全域物件","published":1,"date":"2020-04-16T09:40:15.000Z","updated":"2020-04-16T09:40:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyr0017b6u7h1u5garj","content":"<p>這一篇文章會提到全域環境與全域物件在瀏覽器中的執行。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"全域環境\"><a href=\"#全域環境\" class=\"headerlink\" title=\"全域環境\"></a>全域環境</h2><hr>\n<p>首先來執行個 JavaScript 檔案看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>等等，這是空的耶！沒寫任何東西也能執行嗎？</p>\n<p>首先在執行 JavaScript 時，會先創造<strong>全域執行環境</strong>，所謂的<strong>全域</strong>代表可以在任何地方取用它。</p>\n<p>而全域環境會創造 2 樣東西：</p>\n<ol>\n<li>全域物件</li>\n<li>特殊變數 - this</li>\n</ol>\n<h2 id=\"全域物件\"><a href=\"#全域物件\" class=\"headerlink\" title=\"全域物件\"></a>全域物件</h2><hr>\n<p>我們試著打開瀏覽器開發者工具的 console，雖然看起來沒東西</p>\n<p><img src=\"https://i.imgur.com/RmUrC0K.png\" alt=\"Image\"></p>\n<p>但是輸入 <code>this</code> 看看，可以發現明明沒有輸入任何程式碼，卻出現了 <strong>Window</strong> 這個物件</p>\n<p><img src=\"https://i.imgur.com/5hdiDvJ.png\" alt=\"\"></p>\n<p>而這個 window 物件，就是瀏覽器裡這個頁面的全域物件。</p>\n<p><strong>this</strong> 代表的是這個分頁，如果開另一份分頁，會有另一個全域物件。</p>\n<p>每一個視窗都會有自己的執行環境，和自己的全域物件。</p>\n<p>來看以下的範例，建立一個變數，並給它一個值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;hello&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這時候再打開 console ，輸入 <code>window</code> 看看。<br>可以看到裡面多了一個物件，名稱是 a，值是 “hello”。</p>\n<p><img src=\"https://i.imgur.com/iFQrtzH.png\" alt=\"\"></p>\n<p>由於創造變數時，變數不是在函式中，所以變數會和全域物件連結，這時的 a 就是全域物件。</p>\n<p>如果在瀏覽器運行，全域物件就是 window，還會得到一個特殊變數 this ，在使用瀏覽器的情況下， <strong>window = this</strong>。</p>\n<p>所以如果要找出 a 的話，就可以使用 <code>this.a</code>、<code>window.a</code>，或是直接輸入 <code>a</code>：</p>\n<p><img src=\"https://i.imgur.com/lcxigiR.png\" alt=\"Image\"></p>\n","site":{"data":{}},"excerpt":"<p>這一篇文章會提到全域環境與全域物件在瀏覽器中的執行。</p>","more":"<h2 id=\"全域環境\"><a href=\"#全域環境\" class=\"headerlink\" title=\"全域環境\"></a>全域環境</h2><hr>\n<p>首先來執行個 JavaScript 檔案看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>等等，這是空的耶！沒寫任何東西也能執行嗎？</p>\n<p>首先在執行 JavaScript 時，會先創造<strong>全域執行環境</strong>，所謂的<strong>全域</strong>代表可以在任何地方取用它。</p>\n<p>而全域環境會創造 2 樣東西：</p>\n<ol>\n<li>全域物件</li>\n<li>特殊變數 - this</li>\n</ol>\n<h2 id=\"全域物件\"><a href=\"#全域物件\" class=\"headerlink\" title=\"全域物件\"></a>全域物件</h2><hr>\n<p>我們試著打開瀏覽器開發者工具的 console，雖然看起來沒東西</p>\n<p><img src=\"https://i.imgur.com/RmUrC0K.png\" alt=\"Image\"></p>\n<p>但是輸入 <code>this</code> 看看，可以發現明明沒有輸入任何程式碼，卻出現了 <strong>Window</strong> 這個物件</p>\n<p><img src=\"https://i.imgur.com/5hdiDvJ.png\" alt=\"\"></p>\n<p>而這個 window 物件，就是瀏覽器裡這個頁面的全域物件。</p>\n<p><strong>this</strong> 代表的是這個分頁，如果開另一份分頁，會有另一個全域物件。</p>\n<p>每一個視窗都會有自己的執行環境，和自己的全域物件。</p>\n<p>來看以下的範例，建立一個變數，並給它一個值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;hello&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這時候再打開 console ，輸入 <code>window</code> 看看。<br>可以看到裡面多了一個物件，名稱是 a，值是 “hello”。</p>\n<p><img src=\"https://i.imgur.com/iFQrtzH.png\" alt=\"\"></p>\n<p>由於創造變數時，變數不是在函式中，所以變數會和全域物件連結，這時的 a 就是全域物件。</p>\n<p>如果在瀏覽器運行，全域物件就是 window，還會得到一個特殊變數 this ，在使用瀏覽器的情況下， <strong>window = this</strong>。</p>\n<p>所以如果要找出 a 的話，就可以使用 <code>this.a</code>、<code>window.a</code>，或是直接輸入 <code>a</code>：</p>\n<p><img src=\"https://i.imgur.com/lcxigiR.png\" alt=\"Image\"></p>"},{"title":"基礎 Vue.js(中)","date":"2020-03-30T08:52:44.000Z","keywords":["vue","javascript","前端框架"],"decription":"Basic use about Vue.","_content":"\n此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。\n<!--more-->\n\n## MVVM 的概念\n---\n\n首先要先提到傳統 MVC 的概念，\n\n在 Web 應用程式的劃分分為：\n\n- 模型（Model）\n- 視圖（View）\n- 控制器（Controller）\n\n![](https://i.imgur.com/lmb7P7R.png)\n> 圖片來自 TechTerms.com\n\n使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。\n\n### 那麼 MVVM 又是什麼概念？\n\nView 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。\n\n![](https://i.imgur.com/hYs0zLQ.png)\n> 圖片來自維基百科\n\n### 所以 Vue.js 跟 一般 JavaScript 有什麼不同？\n\n一般 JavaScript 在處理畫面上是直接操作 Dom 元素\n\n而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。\n\n## v-bind 動態屬性指令\n---\n\n上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：\n\n`<img v-bind:src=\"imageSrc\">`\n\n縮寫\n\n`<img :src=\"imageSrc\">`\n\n以下範例：\n\n```\n<div id='app'>\n  <!-- 綁定一個屬性src -->\n  <img v-bind:src=\"imgSrc\"> \n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app', \n    data: {\n    \timgSrc: 'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1576&q=80'\n    }\n  })\n</scripy>\n```\n\n這樣就可以讓圖片顯示出來了\n\n{% iframe https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result %}\n\n\n不過圖片似乎太大，所以還可以改小一點\n\n這邊使用 Bootstrap 的 `.img-fluid` ，讓圖片設定為響應式。\n\n```\n<div id='app'>\n  <!-- 多綁定一個屬性class -->\n  <img v-bind:src=\"imgSrc\" v-bind:class=\"className\"> \n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app', \n    data: {\n    \timgSrc: 'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1576&q=80',\n    \tclassName: 'img-fluid'\n    }\n  })\n</scripy> \n```\n\n{% iframe https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result %}\n\n## v-if 及 v-for\n---\n\n這邊的 data 中有一組陣列屬於 JSON 格式，要運用 `v-for` 讓它顯示在畫面上\n\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    list: [\n      {\n        name: \"小明\",\n        age: 16\n      },\n      {\n        name: \"媽媽\",\n        age: 38\n      },\n      {\n        name: \"漂亮阿姨\",\n        age: 24\n      }\n    ]\n  }\n});\n```\n\n這邊有一個語法 `<pre></pre>`，可以讓內容先在頁面上顯示出來，以方便開發者觀看。\n\n```\n<div id=\"app\">\n  <pre>{{list}}</pre>\n</div>\n```\n\n如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 `v-for`\n\n```\n<div id=\"app\">\n  <ul>\n    <!-- item可以使用任意名稱 -->\n    <li v-for=\"item in list\">\n      {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n會顯示\n\n- 小明的年齡是 16\n- 媽媽的年齡是 38\n- 漂亮阿姨的年齡是 24\n\n如果想要顯示每一個 `li` 在陣列中索引是第幾個\n\n```\n<div id=\"app\">\n  <ul>\n      <!-- (陣列的值, 陣列的索引) -->\n    <li v-for=\"(item, index) in list\">\n      <!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 -->\n      {{index + 1}} - {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n如果要顯示大於 24 的資料的話，可以使用判斷式 `v-if`\n\n```\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, index) in list\" v-if=\"item.age > 24\">\n      {{index + 1}} - {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n{% iframe https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result %}\n\n## 利用 v-on 來操作行為\n---\n\n在 jQuery 中，如果要操作行為的話，會使用 \n\n```\n$(selector).on(events, function () {\n        \n});\n```\n\n而在 Vue 中，方法差不多，採用的是 `v-on`，範例如下：\n\n```\n<!-- v-on:click 可以使用縮寫成 @click -->\n<button v-on:click=\"doThis\"></button>\n```\n\n這邊做一個反轉文字的練習\n\n```\n<div id=\"app\">\n  <!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function -->\n  <input type=\"text\" v-model=\"text\" v-on:keyup.enter=\"reverseText\">\n  <!-- 用v-on:click綁定點擊事件到reverseText這個function -->\n  <button v-on:click=\"reverseText\">Reverse Text</button>\n  <div class=\"showText\">\n    {{newText}}\n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\",\n    \tnewText: \"\"\n    },\n    methods: {\n    \treverseText: function() {\n        // 反轉文字的語法 split(\"\").reverse().join(\"\")\n    \t\t// 當點擊按鈕後啟動function，this.newText顯示內容\n    \t  this.newText = this.text.split(\"\").reverse().join(\"\");\n    \t}\n    }\n  });\n</script>\n```\n\n> 重點 1：這邊控制資料要加上 \"this\"，像是 \"this.newText\"，沒有的話就不會顯示。\n\n> 重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤\n\n{% iframe https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result %}","source":"_posts/基礎Vue-js-2.md","raw":"---\ntitle: 基礎 Vue.js(中)\ntags:\n  - vue\n  - javascript\ndate: 2020-03-30 16:52:44\ncategories: vue\nkeywords: \n- vue\n- javascript\n- 前端框架\ndecription: Basic use about Vue.\n---\n\n此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。\n<!--more-->\n\n## MVVM 的概念\n---\n\n首先要先提到傳統 MVC 的概念，\n\n在 Web 應用程式的劃分分為：\n\n- 模型（Model）\n- 視圖（View）\n- 控制器（Controller）\n\n![](https://i.imgur.com/lmb7P7R.png)\n> 圖片來自 TechTerms.com\n\n使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。\n\n### 那麼 MVVM 又是什麼概念？\n\nView 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。\n\n![](https://i.imgur.com/hYs0zLQ.png)\n> 圖片來自維基百科\n\n### 所以 Vue.js 跟 一般 JavaScript 有什麼不同？\n\n一般 JavaScript 在處理畫面上是直接操作 Dom 元素\n\n而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。\n\n## v-bind 動態屬性指令\n---\n\n上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：\n\n`<img v-bind:src=\"imageSrc\">`\n\n縮寫\n\n`<img :src=\"imageSrc\">`\n\n以下範例：\n\n```\n<div id='app'>\n  <!-- 綁定一個屬性src -->\n  <img v-bind:src=\"imgSrc\"> \n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app', \n    data: {\n    \timgSrc: 'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1576&q=80'\n    }\n  })\n</scripy>\n```\n\n這樣就可以讓圖片顯示出來了\n\n{% iframe https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result %}\n\n\n不過圖片似乎太大，所以還可以改小一點\n\n這邊使用 Bootstrap 的 `.img-fluid` ，讓圖片設定為響應式。\n\n```\n<div id='app'>\n  <!-- 多綁定一個屬性class -->\n  <img v-bind:src=\"imgSrc\" v-bind:class=\"className\"> \n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app', \n    data: {\n    \timgSrc: 'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1576&q=80',\n    \tclassName: 'img-fluid'\n    }\n  })\n</scripy> \n```\n\n{% iframe https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result %}\n\n## v-if 及 v-for\n---\n\n這邊的 data 中有一組陣列屬於 JSON 格式，要運用 `v-for` 讓它顯示在畫面上\n\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    list: [\n      {\n        name: \"小明\",\n        age: 16\n      },\n      {\n        name: \"媽媽\",\n        age: 38\n      },\n      {\n        name: \"漂亮阿姨\",\n        age: 24\n      }\n    ]\n  }\n});\n```\n\n這邊有一個語法 `<pre></pre>`，可以讓內容先在頁面上顯示出來，以方便開發者觀看。\n\n```\n<div id=\"app\">\n  <pre>{{list}}</pre>\n</div>\n```\n\n如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 `v-for`\n\n```\n<div id=\"app\">\n  <ul>\n    <!-- item可以使用任意名稱 -->\n    <li v-for=\"item in list\">\n      {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n會顯示\n\n- 小明的年齡是 16\n- 媽媽的年齡是 38\n- 漂亮阿姨的年齡是 24\n\n如果想要顯示每一個 `li` 在陣列中索引是第幾個\n\n```\n<div id=\"app\">\n  <ul>\n      <!-- (陣列的值, 陣列的索引) -->\n    <li v-for=\"(item, index) in list\">\n      <!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 -->\n      {{index + 1}} - {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n如果要顯示大於 24 的資料的話，可以使用判斷式 `v-if`\n\n```\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item, index) in list\" v-if=\"item.age > 24\">\n      {{index + 1}} - {{item.name}}的年齡是 {{item.age}}\n    </li>\n  </ul>\n</div>\n```\n\n{% iframe https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result %}\n\n## 利用 v-on 來操作行為\n---\n\n在 jQuery 中，如果要操作行為的話，會使用 \n\n```\n$(selector).on(events, function () {\n        \n});\n```\n\n而在 Vue 中，方法差不多，採用的是 `v-on`，範例如下：\n\n```\n<!-- v-on:click 可以使用縮寫成 @click -->\n<button v-on:click=\"doThis\"></button>\n```\n\n這邊做一個反轉文字的練習\n\n```\n<div id=\"app\">\n  <!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function -->\n  <input type=\"text\" v-model=\"text\" v-on:keyup.enter=\"reverseText\">\n  <!-- 用v-on:click綁定點擊事件到reverseText這個function -->\n  <button v-on:click=\"reverseText\">Reverse Text</button>\n  <div class=\"showText\">\n    {{newText}}\n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\",\n    \tnewText: \"\"\n    },\n    methods: {\n    \treverseText: function() {\n        // 反轉文字的語法 split(\"\").reverse().join(\"\")\n    \t\t// 當點擊按鈕後啟動function，this.newText顯示內容\n    \t  this.newText = this.text.split(\"\").reverse().join(\"\");\n    \t}\n    }\n  });\n</script>\n```\n\n> 重點 1：這邊控制資料要加上 \"this\"，像是 \"this.newText\"，沒有的話就不會顯示。\n\n> 重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤\n\n{% iframe https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result %}","slug":"基礎Vue-js-2","published":1,"updated":"2020-03-30T13:36:34.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwys001ab6u78dcv2ubp","content":"<p>此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"MVVM-的概念\"><a href=\"#MVVM-的概念\" class=\"headerlink\" title=\"MVVM 的概念\"></a>MVVM 的概念</h2><hr>\n<p>首先要先提到傳統 MVC 的概念，</p>\n<p>在 Web 應用程式的劃分分為：</p>\n<ul>\n<li>模型（Model）</li>\n<li>視圖（View）</li>\n<li>控制器（Controller）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lmb7P7R.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自 TechTerms.com</p>\n</blockquote>\n<p>使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。</p>\n<h3 id=\"那麼-MVVM-又是什麼概念？\"><a href=\"#那麼-MVVM-又是什麼概念？\" class=\"headerlink\" title=\"那麼 MVVM 又是什麼概念？\"></a>那麼 MVVM 又是什麼概念？</h3><p>View 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。</p>\n<p><img src=\"https://i.imgur.com/hYs0zLQ.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自維基百科</p>\n</blockquote>\n<h3 id=\"所以-Vue-js-跟-一般-JavaScript-有什麼不同？\"><a href=\"#所以-Vue-js-跟-一般-JavaScript-有什麼不同？\" class=\"headerlink\" title=\"所以 Vue.js 跟 一般 JavaScript 有什麼不同？\"></a>所以 Vue.js 跟 一般 JavaScript 有什麼不同？</h3><p>一般 JavaScript 在處理畫面上是直接操作 Dom 元素</p>\n<p>而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。</p>\n<h2 id=\"v-bind-動態屬性指令\"><a href=\"#v-bind-動態屬性指令\" class=\"headerlink\" title=\"v-bind 動態屬性指令\"></a>v-bind 動態屬性指令</h2><hr>\n<p>上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：</p>\n<p><code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code></p>\n<p>縮寫</p>\n<p><code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></p>\n<p>以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 綁定一個屬性src --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以讓圖片顯示出來了</p>\n<iframe src=\"https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n\n<p>不過圖片似乎太大，所以還可以改小一點</p>\n<p>這邊使用 Bootstrap 的 <code>.img-fluid</code> ，讓圖片設定為響應式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 多綁定一個屬性class --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot; v-bind:class&#x3D;&quot;className&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;,</span><br><span class=\"line\">    \tclassName: &#39;img-fluid&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"v-if-及-v-for\"><a href=\"#v-if-及-v-for\" class=\"headerlink\" title=\"v-if 及 v-for\"></a>v-if 及 v-for</h2><hr>\n<p>這邊的 data 中有一組陣列屬於 JSON 格式，要運用 <code>v-for</code> 讓它顯示在畫面上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    list: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;小明&quot;,</span><br><span class=\"line\">        age: 16</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;媽媽&quot;,</span><br><span class=\"line\">        age: 38</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;漂亮阿姨&quot;,</span><br><span class=\"line\">        age: 24</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這邊有一個語法 <code>&lt;pre&gt;&lt;/pre&gt;</code>，可以讓內容先在頁面上顯示出來，以方便開發者觀看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;&#x2F;pre&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 <code>v-for</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;!-- item可以使用任意名稱 --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;item in list&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>會顯示</p>\n<ul>\n<li>小明的年齡是 16</li>\n<li>媽媽的年齡是 38</li>\n<li>漂亮阿姨的年齡是 24</li>\n</ul>\n<p>如果想要顯示每一個 <code>li</code> 在陣列中索引是第幾個</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">      &lt;!-- (陣列的值, 陣列的索引) --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 --&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要顯示大於 24 的資料的話，可以使用判斷式 <code>v-if</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot; v-if&#x3D;&quot;item.age &gt; 24&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"利用-v-on-來操作行為\"><a href=\"#利用-v-on-來操作行為\" class=\"headerlink\" title=\"利用 v-on 來操作行為\"></a>利用 v-on 來操作行為</h2><hr>\n<p>在 jQuery 中，如果要操作行為的話，會使用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).on(events, function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而在 Vue 中，方法差不多，採用的是 <code>v-on</code>，範例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- v-on:click 可以使用縮寫成 @click --&gt;</span><br><span class=\"line\">&lt;button v-on:click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這邊做一個反轉文字的練習</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;reverseText&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:click綁定點擊事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 反轉文字的語法 split(&quot;&quot;).reverse().join(&quot;&quot;)</span><br><span class=\"line\">    \t\t&#x2F;&#x2F; 當點擊按鈕後啟動function，this.newText顯示內容</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重點 1：這邊控制資料要加上 “this”，像是 “this.newText”，沒有的話就不會顯示。</p>\n</blockquote>\n<blockquote>\n<p>重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤</p>\n</blockquote>\n<iframe src=\"https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"<p>此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。</p>","more":"<h2 id=\"MVVM-的概念\"><a href=\"#MVVM-的概念\" class=\"headerlink\" title=\"MVVM 的概念\"></a>MVVM 的概念</h2><hr>\n<p>首先要先提到傳統 MVC 的概念，</p>\n<p>在 Web 應用程式的劃分分為：</p>\n<ul>\n<li>模型（Model）</li>\n<li>視圖（View）</li>\n<li>控制器（Controller）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lmb7P7R.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自 TechTerms.com</p>\n</blockquote>\n<p>使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。</p>\n<h3 id=\"那麼-MVVM-又是什麼概念？\"><a href=\"#那麼-MVVM-又是什麼概念？\" class=\"headerlink\" title=\"那麼 MVVM 又是什麼概念？\"></a>那麼 MVVM 又是什麼概念？</h3><p>View 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。</p>\n<p><img src=\"https://i.imgur.com/hYs0zLQ.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自維基百科</p>\n</blockquote>\n<h3 id=\"所以-Vue-js-跟-一般-JavaScript-有什麼不同？\"><a href=\"#所以-Vue-js-跟-一般-JavaScript-有什麼不同？\" class=\"headerlink\" title=\"所以 Vue.js 跟 一般 JavaScript 有什麼不同？\"></a>所以 Vue.js 跟 一般 JavaScript 有什麼不同？</h3><p>一般 JavaScript 在處理畫面上是直接操作 Dom 元素</p>\n<p>而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。</p>\n<h2 id=\"v-bind-動態屬性指令\"><a href=\"#v-bind-動態屬性指令\" class=\"headerlink\" title=\"v-bind 動態屬性指令\"></a>v-bind 動態屬性指令</h2><hr>\n<p>上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：</p>\n<p><code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code></p>\n<p>縮寫</p>\n<p><code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></p>\n<p>以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 綁定一個屬性src --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以讓圖片顯示出來了</p>\n<iframe src=\"https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n\n<p>不過圖片似乎太大，所以還可以改小一點</p>\n<p>這邊使用 Bootstrap 的 <code>.img-fluid</code> ，讓圖片設定為響應式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 多綁定一個屬性class --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot; v-bind:class&#x3D;&quot;className&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;,</span><br><span class=\"line\">    \tclassName: &#39;img-fluid&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"v-if-及-v-for\"><a href=\"#v-if-及-v-for\" class=\"headerlink\" title=\"v-if 及 v-for\"></a>v-if 及 v-for</h2><hr>\n<p>這邊的 data 中有一組陣列屬於 JSON 格式，要運用 <code>v-for</code> 讓它顯示在畫面上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    list: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;小明&quot;,</span><br><span class=\"line\">        age: 16</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;媽媽&quot;,</span><br><span class=\"line\">        age: 38</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;漂亮阿姨&quot;,</span><br><span class=\"line\">        age: 24</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這邊有一個語法 <code>&lt;pre&gt;&lt;/pre&gt;</code>，可以讓內容先在頁面上顯示出來，以方便開發者觀看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;&#x2F;pre&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 <code>v-for</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;!-- item可以使用任意名稱 --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;item in list&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>會顯示</p>\n<ul>\n<li>小明的年齡是 16</li>\n<li>媽媽的年齡是 38</li>\n<li>漂亮阿姨的年齡是 24</li>\n</ul>\n<p>如果想要顯示每一個 <code>li</code> 在陣列中索引是第幾個</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">      &lt;!-- (陣列的值, 陣列的索引) --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 --&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要顯示大於 24 的資料的話，可以使用判斷式 <code>v-if</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot; v-if&#x3D;&quot;item.age &gt; 24&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"利用-v-on-來操作行為\"><a href=\"#利用-v-on-來操作行為\" class=\"headerlink\" title=\"利用 v-on 來操作行為\"></a>利用 v-on 來操作行為</h2><hr>\n<p>在 jQuery 中，如果要操作行為的話，會使用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).on(events, function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而在 Vue 中，方法差不多，採用的是 <code>v-on</code>，範例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- v-on:click 可以使用縮寫成 @click --&gt;</span><br><span class=\"line\">&lt;button v-on:click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這邊做一個反轉文字的練習</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;reverseText&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:click綁定點擊事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 反轉文字的語法 split(&quot;&quot;).reverse().join(&quot;&quot;)</span><br><span class=\"line\">    \t\t&#x2F;&#x2F; 當點擊按鈕後啟動function，this.newText顯示內容</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重點 1：這邊控制資料要加上 “this”，像是 “this.newText”，沒有的話就不會顯示。</p>\n</blockquote>\n<blockquote>\n<p>重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤</p>\n</blockquote>\n<iframe src=\"https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>"},{"title":"JS 基礎回顧 - 全域變數與區域變數","date":"2020-04-23T09:32:58.000Z","keywords":["全域變數","區域變數"],"decription":"全域變數與區域變數","_content":"在上一篇 [變數與資料型別](https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/#more) 中有介紹到變數，而變數還分為全域變數與區域變數，本篇將會介紹兩者的差異。\n<!--more-->\n\n## 區域變數\n---\n\n首先用個函式來算一下梯形的面積：\n\n```\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40))  // 印出 \"梯形面積是1400\"\n```\n\n上面的這一段沒什麼問題，如果在後面再加上一段 `console.log(result)` 的話，會發生什麼事？\n\n```\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));\nconsole.log(result)\n```\n\n結果第二個 console 會出現錯誤，錯誤訊息是 **result is not defined**。\n為什麼找不到 result 呢？\n首先要先了解一個原則，變數的最小有效區域只在函式中。\n而在這個例子中，在函式裡透過 var 指定變數，第一個 console 執行完以後，變數就被用掉消失了，第二個 console 當然就找不到。\n以上是一個區域變數的範例，而區域變數的好處是執行完後變數就會消失，可以節省記憶體。\n\n## 全域變數\n---\n\n接著來看看在函式裡沒有透過 var 來宣告變數會怎樣。\n在上面提到區域變數的範例中，原本第二個 console 不能執行。\n那麼把 var 拿掉後：\n\n```\nfunction areaTr (upBase, downBase, height) {\n  result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 1400\n```\n\n結果第二個 console 可以執行了！？\n\n這是因為**如果不是由 var 宣告的變數，都會是全域變數。**\n所以即使變數 result 是在函式中宣告，但是因為沒有透過 var，所以一樣是全域變數。\n而不在函式裡的變數，會一直都在。雖然一直都在可以隨時存取，但是這樣做比較浪費記憶體。\n所以除非必要，否則在函式內的變數，都盡量透過 var 來宣告。\n\n來看看如果計算梯形面積的函式，想要執行第二個 console 的話，還有以下方法：\n\n### 透過 var 宣告變數，但不給值\n\n在函式前再透過 var 宣告變數，但不給值。\n\n```\nvar result;\n\nfunction areaTr (upBase, downBase, height) {\n  result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 1400\n```\n\n### 如果是兩個變數都透過 var 宣告會是如何？\n\n```\nvar result;\n\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // undefined\n```\n\n第一個 console 一樣可以得到 \"梯形面積是1400\"，而第二個則是得到 undefined。\n由於變數在函式中，以及透過 var 來宣告，所以符合區域變數的規範。\n所以第一個 console 執行完，雖然最前面有透過 var 宣告變數，是一個全域變數，但是並沒有值，所以是 undefined。\n\n這時候如果給它值，例如：\n\n```\nvar result = 500;\n\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 500\n```\n\n基本上透過 var 來宣告，這兩個變數就可以視為兩個不同的東西了，要直接改變數的名字也印的出來結果。\n\n## 提升\n---\n\n提升 (hoisting) 在 JavaScript 中又是一個坑。這在後面的一篇會提到，這邊則是稍微講一下。\n\n在一般的情形下，執行以下的程式碼，其結果會是2\n\n```\nvar a = 2;\nconsole.log(a);\n```\n\n那麼如果在變數的前面也加上 `console.log` 呢？\n\n```\nconsole.log(a);\nvar a = 2;\nconsole.log(a);\n```\n\n結果會是 `undefined` 跟 `2`，原因是 JavaScript 在執行時會是一行一行的執行，所以在執行第一行時找不到 a ，所以會是 undefined。\n\n那麼在 function 中作這樣的事會是怎樣呢？\n把呼叫執行的 `hi()` 放在 function 的前面\n\n```\nhi();\n\nfunction hi() {\n  console.log('hello');\n}\n```\n\n結果一樣可以印出 `hello`！！！\n這是因為在 JavaScript 中，function 會優先執行，所以會作一個 hoisting，所以一樣可以執行。\n*但最好還是不要這樣作*","source":"_posts/全域變數與區域變數.md","raw":"---\ntitle: JS 基礎回顧 - 全域變數與區域變數\ntags:\n  - 全域變數\n  - 區域變數\ndate: 2020-04-23 17:32:58\ncategories: JS 基礎回顧\nkeywords:\n- 全域變數\n- 區域變數\ndecription: 全域變數與區域變數\n---\n在上一篇 [變數與資料型別](https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/#more) 中有介紹到變數，而變數還分為全域變數與區域變數，本篇將會介紹兩者的差異。\n<!--more-->\n\n## 區域變數\n---\n\n首先用個函式來算一下梯形的面積：\n\n```\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40))  // 印出 \"梯形面積是1400\"\n```\n\n上面的這一段沒什麼問題，如果在後面再加上一段 `console.log(result)` 的話，會發生什麼事？\n\n```\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));\nconsole.log(result)\n```\n\n結果第二個 console 會出現錯誤，錯誤訊息是 **result is not defined**。\n為什麼找不到 result 呢？\n首先要先了解一個原則，變數的最小有效區域只在函式中。\n而在這個例子中，在函式裡透過 var 指定變數，第一個 console 執行完以後，變數就被用掉消失了，第二個 console 當然就找不到。\n以上是一個區域變數的範例，而區域變數的好處是執行完後變數就會消失，可以節省記憶體。\n\n## 全域變數\n---\n\n接著來看看在函式裡沒有透過 var 來宣告變數會怎樣。\n在上面提到區域變數的範例中，原本第二個 console 不能執行。\n那麼把 var 拿掉後：\n\n```\nfunction areaTr (upBase, downBase, height) {\n  result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 1400\n```\n\n結果第二個 console 可以執行了！？\n\n這是因為**如果不是由 var 宣告的變數，都會是全域變數。**\n所以即使變數 result 是在函式中宣告，但是因為沒有透過 var，所以一樣是全域變數。\n而不在函式裡的變數，會一直都在。雖然一直都在可以隨時存取，但是這樣做比較浪費記憶體。\n所以除非必要，否則在函式內的變數，都盡量透過 var 來宣告。\n\n來看看如果計算梯形面積的函式，想要執行第二個 console 的話，還有以下方法：\n\n### 透過 var 宣告變數，但不給值\n\n在函式前再透過 var 宣告變數，但不給值。\n\n```\nvar result;\n\nfunction areaTr (upBase, downBase, height) {\n  result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 1400\n```\n\n### 如果是兩個變數都透過 var 宣告會是如何？\n\n```\nvar result;\n\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // undefined\n```\n\n第一個 console 一樣可以得到 \"梯形面積是1400\"，而第二個則是得到 undefined。\n由於變數在函式中，以及透過 var 來宣告，所以符合區域變數的規範。\n所以第一個 console 執行完，雖然最前面有透過 var 宣告變數，是一個全域變數，但是並沒有值，所以是 undefined。\n\n這時候如果給它值，例如：\n\n```\nvar result = 500;\n\nfunction areaTr (upBase, downBase, height) {\n  var result = (upBase + downBase) * height / 2;\n  return result\n}\n\nconsole.log('梯形面積是' + areaTr(30, 40, 40));  // \"梯形面積是1400\"\nconsole.log(result)                            // 500\n```\n\n基本上透過 var 來宣告，這兩個變數就可以視為兩個不同的東西了，要直接改變數的名字也印的出來結果。\n\n## 提升\n---\n\n提升 (hoisting) 在 JavaScript 中又是一個坑。這在後面的一篇會提到，這邊則是稍微講一下。\n\n在一般的情形下，執行以下的程式碼，其結果會是2\n\n```\nvar a = 2;\nconsole.log(a);\n```\n\n那麼如果在變數的前面也加上 `console.log` 呢？\n\n```\nconsole.log(a);\nvar a = 2;\nconsole.log(a);\n```\n\n結果會是 `undefined` 跟 `2`，原因是 JavaScript 在執行時會是一行一行的執行，所以在執行第一行時找不到 a ，所以會是 undefined。\n\n那麼在 function 中作這樣的事會是怎樣呢？\n把呼叫執行的 `hi()` 放在 function 的前面\n\n```\nhi();\n\nfunction hi() {\n  console.log('hello');\n}\n```\n\n結果一樣可以印出 `hello`！！！\n這是因為在 JavaScript 中，function 會優先執行，所以會作一個 hoisting，所以一樣可以執行。\n*但最好還是不要這樣作*","slug":"全域變數與區域變數","published":1,"updated":"2020-04-29T09:15:37.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyt001db6u7h3sjecjd","content":"<p>在上一篇 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/#more\">變數與資料型別</a> 中有介紹到變數，而變數還分為全域變數與區域變數，本篇將會介紹兩者的差異。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h2><hr>\n<p>首先用個函式來算一下梯形的面積：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40))  &#x2F;&#x2F; 印出 &quot;梯形面積是1400&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的這一段沒什麼問題，如果在後面再加上一段 <code>console.log(result)</code> 的話，會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));</span><br><span class=\"line\">console.log(result)</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 會出現錯誤，錯誤訊息是 <strong>result is not defined</strong>。<br>為什麼找不到 result 呢？<br>首先要先了解一個原則，變數的最小有效區域只在函式中。<br>而在這個例子中，在函式裡透過 var 指定變數，第一個 console 執行完以後，變數就被用掉消失了，第二個 console 當然就找不到。<br>以上是一個區域變數的範例，而區域變數的好處是執行完後變數就會消失，可以節省記憶體。</p>\n<h2 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h2><hr>\n<p>接著來看看在函式裡沒有透過 var 來宣告變數會怎樣。<br>在上面提到區域變數的範例中，原本第二個 console 不能執行。<br>那麼把 var 拿掉後：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 可以執行了！？</p>\n<p>這是因為<strong>如果不是由 var 宣告的變數，都會是全域變數。</strong><br>所以即使變數 result 是在函式中宣告，但是因為沒有透過 var，所以一樣是全域變數。<br>而不在函式裡的變數，會一直都在。雖然一直都在可以隨時存取，但是這樣做比較浪費記憶體。<br>所以除非必要，否則在函式內的變數，都盡量透過 var 來宣告。</p>\n<p>來看看如果計算梯形面積的函式，想要執行第二個 console 的話，還有以下方法：</p>\n<h3 id=\"透過-var-宣告變數，但不給值\"><a href=\"#透過-var-宣告變數，但不給值\" class=\"headerlink\" title=\"透過 var 宣告變數，但不給值\"></a>透過 var 宣告變數，但不給值</h3><p>在函式前再透過 var 宣告變數，但不給值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果是兩個變數都透過-var-宣告會是如何？\"><a href=\"#如果是兩個變數都透過-var-宣告會是如何？\" class=\"headerlink\" title=\"如果是兩個變數都透過 var 宣告會是如何？\"></a>如果是兩個變數都透過 var 宣告會是如何？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>第一個 console 一樣可以得到 “梯形面積是1400”，而第二個則是得到 undefined。<br>由於變數在函式中，以及透過 var 來宣告，所以符合區域變數的規範。<br>所以第一個 console 執行完，雖然最前面有透過 var 宣告變數，是一個全域變數，但是並沒有值，所以是 undefined。</p>\n<p>這時候如果給它值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result &#x3D; 500;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 500</span><br></pre></td></tr></table></figure>\n\n<p>基本上透過 var 來宣告，這兩個變數就可以視為兩個不同的東西了，要直接改變數的名字也印的出來結果。</p>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><hr>\n<p>提升 (hoisting) 在 JavaScript 中又是一個坑。這在後面的一篇會提到，這邊則是稍微講一下。</p>\n<p>在一般的情形下，執行以下的程式碼，其結果會是2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>那麼如果在變數的前面也加上 <code>console.log</code> 呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a);</span><br><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>結果會是 <code>undefined</code> 跟 <code>2</code>，原因是 JavaScript 在執行時會是一行一行的執行，所以在執行第一行時找不到 a ，所以會是 undefined。</p>\n<p>那麼在 function 中作這樣的事會是怎樣呢？<br>把呼叫執行的 <code>hi()</code> 放在 function 的前面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hi();</span><br><span class=\"line\"></span><br><span class=\"line\">function hi() &#123;</span><br><span class=\"line\">  console.log(&#39;hello&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果一樣可以印出 <code>hello</code>！！！<br>這是因為在 JavaScript 中，function 會優先執行，所以會作一個 hoisting，所以一樣可以執行。<br><em>但最好還是不要這樣作</em></p>\n","site":{"data":{}},"excerpt":"<p>在上一篇 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/#more\">變數與資料型別</a> 中有介紹到變數，而變數還分為全域變數與區域變數，本篇將會介紹兩者的差異。</p>","more":"<h2 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h2><hr>\n<p>首先用個函式來算一下梯形的面積：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40))  &#x2F;&#x2F; 印出 &quot;梯形面積是1400&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的這一段沒什麼問題，如果在後面再加上一段 <code>console.log(result)</code> 的話，會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));</span><br><span class=\"line\">console.log(result)</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 會出現錯誤，錯誤訊息是 <strong>result is not defined</strong>。<br>為什麼找不到 result 呢？<br>首先要先了解一個原則，變數的最小有效區域只在函式中。<br>而在這個例子中，在函式裡透過 var 指定變數，第一個 console 執行完以後，變數就被用掉消失了，第二個 console 當然就找不到。<br>以上是一個區域變數的範例，而區域變數的好處是執行完後變數就會消失，可以節省記憶體。</p>\n<h2 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h2><hr>\n<p>接著來看看在函式裡沒有透過 var 來宣告變數會怎樣。<br>在上面提到區域變數的範例中，原本第二個 console 不能執行。<br>那麼把 var 拿掉後：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 可以執行了！？</p>\n<p>這是因為<strong>如果不是由 var 宣告的變數，都會是全域變數。</strong><br>所以即使變數 result 是在函式中宣告，但是因為沒有透過 var，所以一樣是全域變數。<br>而不在函式裡的變數，會一直都在。雖然一直都在可以隨時存取，但是這樣做比較浪費記憶體。<br>所以除非必要，否則在函式內的變數，都盡量透過 var 來宣告。</p>\n<p>來看看如果計算梯形面積的函式，想要執行第二個 console 的話，還有以下方法：</p>\n<h3 id=\"透過-var-宣告變數，但不給值\"><a href=\"#透過-var-宣告變數，但不給值\" class=\"headerlink\" title=\"透過 var 宣告變數，但不給值\"></a>透過 var 宣告變數，但不給值</h3><p>在函式前再透過 var 宣告變數，但不給值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果是兩個變數都透過-var-宣告會是如何？\"><a href=\"#如果是兩個變數都透過-var-宣告會是如何？\" class=\"headerlink\" title=\"如果是兩個變數都透過 var 宣告會是如何？\"></a>如果是兩個變數都透過 var 宣告會是如何？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>第一個 console 一樣可以得到 “梯形面積是1400”，而第二個則是得到 undefined。<br>由於變數在函式中，以及透過 var 來宣告，所以符合區域變數的規範。<br>所以第一個 console 執行完，雖然最前面有透過 var 宣告變數，是一個全域變數，但是並沒有值，所以是 undefined。</p>\n<p>這時候如果給它值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result &#x3D; 500;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 500</span><br></pre></td></tr></table></figure>\n\n<p>基本上透過 var 來宣告，這兩個變數就可以視為兩個不同的東西了，要直接改變數的名字也印的出來結果。</p>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><hr>\n<p>提升 (hoisting) 在 JavaScript 中又是一個坑。這在後面的一篇會提到，這邊則是稍微講一下。</p>\n<p>在一般的情形下，執行以下的程式碼，其結果會是2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>那麼如果在變數的前面也加上 <code>console.log</code> 呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a);</span><br><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>結果會是 <code>undefined</code> 跟 <code>2</code>，原因是 JavaScript 在執行時會是一行一行的執行，所以在執行第一行時找不到 a ，所以會是 undefined。</p>\n<p>那麼在 function 中作這樣的事會是怎樣呢？<br>把呼叫執行的 <code>hi()</code> 放在 function 的前面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hi();</span><br><span class=\"line\"></span><br><span class=\"line\">function hi() &#123;</span><br><span class=\"line\">  console.log(&#39;hello&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果一樣可以印出 <code>hello</code>！！！<br>這是因為在 JavaScript 中，function 會優先執行，所以會作一個 hoisting，所以一樣可以執行。<br><em>但最好還是不要這樣作</em></p>"},{"title":"基礎 Vue.js(上)","date":"2020-03-30T03:34:35.000Z","keywords":["vue","javascript","前端框架"],"decription":"Basic use about Vue.","_content":"\n身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人的學習筆記。\n<!--more-->\n\n## 開發環境\n---\n\n在 [Vue.js官網](https://cn.vuejs.org/v2/guide/installation.html) 中建議在瀏覽器上安裝 [Vue Devtools](https://github.com/vuejs/vue-devtools#vue-devtools)，這樣可以方便在瀏覽器中觀看訊息。\n\n在 `<script>` 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。\n\n## 應用程式建立\n---\n\n首先在 HTML 建立一個 `div` ，這邊可以使用 id 或是 class，一般建議是使用 id，\n\n接著在 `<script>` 中輸入建立 Vue 的起手式\n\n```\n<div>\n  <div id=\"app\"></div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app'\n  })\n</script>\n```\n\n然後打開瀏覽器的開發人員工具，如果有安裝  [Vue Devtools](https://github.com/vuejs/vue-devtools#vue-devtools) 就可以看到已經建立了一個 Root\n\n![](https://i.imgur.com/01jwjmg.png)\n\n如果要建立資料的話，然後顯示在 HTML 上：\n\n```\n<div>\n  <div id=\"app\">\n  <!-- 建立完data，想要顯示message的話，在 {{ }} 中放入名稱就可以顯示 -->\n    {{message}} \n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    // 建立data，裡面可以存放資料，例如 message\n    data: {\n      message: 'Hello World'\n    }\n  })\n</script>\n```\n\n注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法\n\n```\n<div>\n  <div id=\"app\">\n    {{message}} \n  </div>\n    \n  <div id=\"app2\">\n    {{message}} \n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n    \tmessage: 'Hello'\n    }\n  })\n    \n  var app2 = new Vue({\n    el: 'app2',\n    data: {\n    \tmessage: 'World'\n    }\n  })\n</script>\n```\n\n建立兩個是可以的，一樣會出現 2 個 Root\n\n![](https://i.imgur.com/BYN501c.png)\n\n但是如果建立 3 個 app，就會出現找不到 element\n\n![](https://i.imgur.com/eyWxDkg.png)\n\n## 雙向綁定的資料\n\n在 Vue 中，有雙向綁定的特色，\n\n前面提到如果要將資料顯示在網頁上，可以使用 `{% raw %}{{  }}{% endraw %}` 這個語法，在 Vue 的語法中還有其他可以使用的：\n\n- v-model\n- v-text\n- v-html\n\n### v-model 的使用\n\n主要是使用在：\n\n- `<input>`\n- `<select>`\n- `<textarea>`\n- components\n\n例如：\n\n```\n<div id=\"app\">\n  {{message}}\n  <input type=\"text\" v-model=\"message\">\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n    \tmessage: 'Hello'\n    }\n  })\n</script>\n```\n\n在畫面上 `<text>` 跟 `{{message}}` 就會顯示一樣的內容\n\n![](https://i.imgur.com/bwOOIxu.png)\n\n而當直接在畫面修改 `<text>` 輸入欄中的內容時，`{{message}}`也會一起改變。\n\n![](https://i.imgur.com/NvbXPV9.png)\n\n### v-text 跟 v-html 使用的方法\n\n兩者差不多，都可以直接顯示內容，差別在 `v-html` 可以加入 html 標籤\n\n```\n<div id=\"app\">\n  {{message}}\n  <input type=\"text\" v-model=\"message\">\n  <div v-text=\"message\"></div>\n  <div v-html=\"message\"></div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    \n    data: {\n    \tmessage: '<h1>Hello</h1>'\n    }\n  })\n</script>\n```\n\n在畫面上的呈現是這樣：\n\n![](https://i.imgur.com/Rhr0U3R.png)","source":"_posts/基礎 Vue.js-1.md","raw":"---\ntitle: 基礎 Vue.js(上)\ntags:\n  - vue\n  - javascript\ndate: 2020-03-30 11:34:35\ncategories: vue\nkeywords: \n- vue\n- javascript\n- 前端框架\ndecription: Basic use about Vue.\n---\n\n身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人的學習筆記。\n<!--more-->\n\n## 開發環境\n---\n\n在 [Vue.js官網](https://cn.vuejs.org/v2/guide/installation.html) 中建議在瀏覽器上安裝 [Vue Devtools](https://github.com/vuejs/vue-devtools#vue-devtools)，這樣可以方便在瀏覽器中觀看訊息。\n\n在 `<script>` 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。\n\n## 應用程式建立\n---\n\n首先在 HTML 建立一個 `div` ，這邊可以使用 id 或是 class，一般建議是使用 id，\n\n接著在 `<script>` 中輸入建立 Vue 的起手式\n\n```\n<div>\n  <div id=\"app\"></div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app'\n  })\n</script>\n```\n\n然後打開瀏覽器的開發人員工具，如果有安裝  [Vue Devtools](https://github.com/vuejs/vue-devtools#vue-devtools) 就可以看到已經建立了一個 Root\n\n![](https://i.imgur.com/01jwjmg.png)\n\n如果要建立資料的話，然後顯示在 HTML 上：\n\n```\n<div>\n  <div id=\"app\">\n  <!-- 建立完data，想要顯示message的話，在 {{ }} 中放入名稱就可以顯示 -->\n    {{message}} \n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    // 建立data，裡面可以存放資料，例如 message\n    data: {\n      message: 'Hello World'\n    }\n  })\n</script>\n```\n\n注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法\n\n```\n<div>\n  <div id=\"app\">\n    {{message}} \n  </div>\n    \n  <div id=\"app2\">\n    {{message}} \n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n    \tmessage: 'Hello'\n    }\n  })\n    \n  var app2 = new Vue({\n    el: 'app2',\n    data: {\n    \tmessage: 'World'\n    }\n  })\n</script>\n```\n\n建立兩個是可以的，一樣會出現 2 個 Root\n\n![](https://i.imgur.com/BYN501c.png)\n\n但是如果建立 3 個 app，就會出現找不到 element\n\n![](https://i.imgur.com/eyWxDkg.png)\n\n## 雙向綁定的資料\n\n在 Vue 中，有雙向綁定的特色，\n\n前面提到如果要將資料顯示在網頁上，可以使用 `{% raw %}{{  }}{% endraw %}` 這個語法，在 Vue 的語法中還有其他可以使用的：\n\n- v-model\n- v-text\n- v-html\n\n### v-model 的使用\n\n主要是使用在：\n\n- `<input>`\n- `<select>`\n- `<textarea>`\n- components\n\n例如：\n\n```\n<div id=\"app\">\n  {{message}}\n  <input type=\"text\" v-model=\"message\">\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n    \tmessage: 'Hello'\n    }\n  })\n</script>\n```\n\n在畫面上 `<text>` 跟 `{{message}}` 就會顯示一樣的內容\n\n![](https://i.imgur.com/bwOOIxu.png)\n\n而當直接在畫面修改 `<text>` 輸入欄中的內容時，`{{message}}`也會一起改變。\n\n![](https://i.imgur.com/NvbXPV9.png)\n\n### v-text 跟 v-html 使用的方法\n\n兩者差不多，都可以直接顯示內容，差別在 `v-html` 可以加入 html 標籤\n\n```\n<div id=\"app\">\n  {{message}}\n  <input type=\"text\" v-model=\"message\">\n  <div v-text=\"message\"></div>\n  <div v-html=\"message\"></div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: '#app',\n    \n    data: {\n    \tmessage: '<h1>Hello</h1>'\n    }\n  })\n</script>\n```\n\n在畫面上的呈現是這樣：\n\n![](https://i.imgur.com/Rhr0U3R.png)","slug":"基礎 Vue.js-1","published":1,"updated":"2020-05-01T07:18:49.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyu001fb6u7ho639axr","content":"<p>身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人的學習筆記。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h2><hr>\n<p>在 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">Vue.js官網</a> 中建議在瀏覽器上安裝 <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a>，這樣可以方便在瀏覽器中觀看訊息。</p>\n<p>在 <code>&lt;script&gt;</code> 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。</p>\n<h2 id=\"應用程式建立\"><a href=\"#應用程式建立\" class=\"headerlink\" title=\"應用程式建立\"></a>應用程式建立</h2><hr>\n<p>首先在 HTML 建立一個 <code>div</code> ，這邊可以使用 id 或是 class，一般建議是使用 id，</p>\n<p>接著在 <code>&lt;script&gt;</code> 中輸入建立 Vue 的起手式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後打開瀏覽器的開發人員工具，如果有安裝  <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a> 就可以看到已經建立了一個 Root</p>\n<p><img src=\"https://i.imgur.com/01jwjmg.png\" alt=\"\"></p>\n<p>如果要建立資料的話，然後顯示在 HTML 上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 建立完data，想要顯示message的話，在 &#123;&#123; &#125;&#125; 中放入名稱就可以顯示 --&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F; 建立data，裡面可以存放資料，例如 message</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#39;Hello World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  var app2 &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;app2&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>建立兩個是可以的，一樣會出現 2 個 Root</p>\n<p><img src=\"https://i.imgur.com/BYN501c.png\" alt=\"\"></p>\n<p>但是如果建立 3 個 app，就會出現找不到 element</p>\n<p><img src=\"https://i.imgur.com/eyWxDkg.png\" alt=\"\"></p>\n<h2 id=\"雙向綁定的資料\"><a href=\"#雙向綁定的資料\" class=\"headerlink\" title=\"雙向綁定的資料\"></a>雙向綁定的資料</h2><p>在 Vue 中，有雙向綁定的特色，</p>\n<p>前面提到如果要將資料顯示在網頁上，可以使用 <code>{{  }}</code> 這個語法，在 Vue 的語法中還有其他可以使用的：</p>\n<ul>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n</ul>\n<h3 id=\"v-model-的使用\"><a href=\"#v-model-的使用\" class=\"headerlink\" title=\"v-model 的使用\"></a>v-model 的使用</h3><p>主要是使用在：</p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上 <code>&lt;text&gt;</code> 跟 <code></code> 就會顯示一樣的內容</p>\n<p><img src=\"https://i.imgur.com/bwOOIxu.png\" alt=\"\"></p>\n<p>而當直接在畫面修改 <code>&lt;text&gt;</code> 輸入欄中的內容時，<code></code>也會一起改變。</p>\n<p><img src=\"https://i.imgur.com/NvbXPV9.png\" alt=\"\"></p>\n<h3 id=\"v-text-跟-v-html-使用的方法\"><a href=\"#v-text-跟-v-html-使用的方法\" class=\"headerlink\" title=\"v-text 跟 v-html 使用的方法\"></a>v-text 跟 v-html 使用的方法</h3><p>兩者差不多，都可以直接顯示內容，差別在 <code>v-html</code> 可以加入 html 標籤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;div v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;&lt;h1&gt;Hello&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上的呈現是這樣：</p>\n<p><img src=\"https://i.imgur.com/Rhr0U3R.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人的學習筆記。</p>","more":"<h2 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h2><hr>\n<p>在 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">Vue.js官網</a> 中建議在瀏覽器上安裝 <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a>，這樣可以方便在瀏覽器中觀看訊息。</p>\n<p>在 <code>&lt;script&gt;</code> 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。</p>\n<h2 id=\"應用程式建立\"><a href=\"#應用程式建立\" class=\"headerlink\" title=\"應用程式建立\"></a>應用程式建立</h2><hr>\n<p>首先在 HTML 建立一個 <code>div</code> ，這邊可以使用 id 或是 class，一般建議是使用 id，</p>\n<p>接著在 <code>&lt;script&gt;</code> 中輸入建立 Vue 的起手式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後打開瀏覽器的開發人員工具，如果有安裝  <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a> 就可以看到已經建立了一個 Root</p>\n<p><img src=\"https://i.imgur.com/01jwjmg.png\" alt=\"\"></p>\n<p>如果要建立資料的話，然後顯示在 HTML 上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 建立完data，想要顯示message的話，在 &#123;&#123; &#125;&#125; 中放入名稱就可以顯示 --&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F; 建立data，裡面可以存放資料，例如 message</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#39;Hello World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  var app2 &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;app2&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>建立兩個是可以的，一樣會出現 2 個 Root</p>\n<p><img src=\"https://i.imgur.com/BYN501c.png\" alt=\"\"></p>\n<p>但是如果建立 3 個 app，就會出現找不到 element</p>\n<p><img src=\"https://i.imgur.com/eyWxDkg.png\" alt=\"\"></p>\n<h2 id=\"雙向綁定的資料\"><a href=\"#雙向綁定的資料\" class=\"headerlink\" title=\"雙向綁定的資料\"></a>雙向綁定的資料</h2><p>在 Vue 中，有雙向綁定的特色，</p>\n<p>前面提到如果要將資料顯示在網頁上，可以使用 <code>{{  }}</code> 這個語法，在 Vue 的語法中還有其他可以使用的：</p>\n<ul>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n</ul>\n<h3 id=\"v-model-的使用\"><a href=\"#v-model-的使用\" class=\"headerlink\" title=\"v-model 的使用\"></a>v-model 的使用</h3><p>主要是使用在：</p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上 <code>&lt;text&gt;</code> 跟 <code></code> 就會顯示一樣的內容</p>\n<p><img src=\"https://i.imgur.com/bwOOIxu.png\" alt=\"\"></p>\n<p>而當直接在畫面修改 <code>&lt;text&gt;</code> 輸入欄中的內容時，<code></code>也會一起改變。</p>\n<p><img src=\"https://i.imgur.com/NvbXPV9.png\" alt=\"\"></p>\n<h3 id=\"v-text-跟-v-html-使用的方法\"><a href=\"#v-text-跟-v-html-使用的方法\" class=\"headerlink\" title=\"v-text 跟 v-html 使用的方法\"></a>v-text 跟 v-html 使用的方法</h3><p>兩者差不多，都可以直接顯示內容，差別在 <code>v-html</code> 可以加入 html 標籤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;div v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;&lt;h1&gt;Hello&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上的呈現是這樣：</p>\n<p><img src=\"https://i.imgur.com/Rhr0U3R.png\" alt=\"\"></p>"},{"title":"基礎 Vue.js(下)","date":"2020-03-30T08:54:07.000Z","keywords":["vue","javascript","前端框架"],"decription":"Basic use about Vue.","_content":"\n最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。\n<!--more-->\n\n## 修飾符\n---\n\n修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 `preventDefault()` 這個語法，例如 jQuery 的用法：\n\n```\n<a href=\"http://www.google.com\">Click me</a>\n    \n<script>\n  $(\"a\").on(\"click\", function(e) {\n    e.preventDefault();\n  });\n</script>\n```\n\n這樣子點擊的話，連結就不會有作用。\n\n而在 Vue 中也有這個用法，阻止默認行為：\n\n`<button @click.prevent=\"doThis\"></button>`\n\n```\n<div id=\"app\">\n  <input type=\"text\" v-model=\"text\">\n  <!-- 當點擊a連結，一樣可以執行function，但不會連到Google -->\n  <a href=\"http://www.google.com\" @click.prevent=\"reverseText\">Reverse Text</a>\n  <div class=\"showText\">\n    {{newText}}\n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\",\n    \tnewText: \"\"\n    },\n    methods: {\n    \treverseText: function() {\n    \t  this.newText = this.text.split(\"\").reverse().join(\"\");\n    \t}\n    }\n  });\n</script>\n```\n\n## 透過 v-bind:class 來綁定 HTML\n---\n\n可以給予 `v-bind:class` 一個 class 對象，去做出動態切換 class\n\n`<div v-bind:class=\"{ class名稱: 切換的動作 }\"></div>`\n\n看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：\n\n```\n<div id=\"app\">\n  <!-- 只要在class動態加上yellow就會變黃色 -->\n  <div class=\"box\"></div>\n  <button class=\"changeColor btn btn-primary\">Change Color</button>\n</div>\n    \n<style>\n  .box {\n    width: 250px;\n    height: 250px;\n    background-color: blue;\n  }\n    \n  .box.yellow {\n    background-color: yellow;\n  }\n</style>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \tchange: false  // 這邊有一個切換動作change的data\n    }\n  });\n</script>\n```\n\n```    \n<div id=\"app\">\n  <!-- 加上 v-bind:class=\"{class名稱: 切換的動作}\" -->\n  <div class=\"box\" :class=\"{'yellow': change}\"></div>\n  <!-- 在按鈕綁定click，讓它去做切換的效果 -->\n  <button class=\"changeColor btn btn-primary\" @click=\"change = !change\">Change Color</button>\n</div>\n```\n\n{%iframe https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result %}\n\n## 計算屬性 computed 的使用\n---\n\n下面的範例是當在 `text` 欄位輸入文字時，會在 `.showText` 顯示反轉文字\n\n不過\n\n```\n<div id=\"app\">\n  <h2>直接輸入文字</h2>\n  <input type=\"text\" class=\"form-control mt-3\" v-model=\"text\">\n  <h2>在下方顯示反轉文字</h2>\n  <h3 class=\"showText\">\n    {{text.split(\"\").reverse().join(\"\")}}\n  </h3>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\"\n    }\n</script>\n```\n\n但是如果要重複使用 `{% raw %}{{text.split(\"\").reverse().join(\"\")}}{% endraw %}` 這一段的話，會有點難維護，所以可以運用 computed 來處理\n\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    text: \"\"\n  },\n  computed: {\n    reverseText: function() {  // 在 computed 中要使用 function\n    \treturn this.text.split(\"\").reverse().join(\"\"); // 並且會回傳值，所以就可以應用在回傳反轉後的結果\n    }\n  }\n});\n```\n\n接著只要加上回傳值的 function，就可以顯示結果了。\n\n```\n<div id=\"app\">\n  <h2>直接輸入文字</h2>\n  <input type=\"text\" class=\"form-control mt-3\" v-model=\"text\">\n  <h2>在下方顯示反轉文字</h2>\n  <h3 class=\"showText\">\n    {{reverseText}}\n  </h3>\n</div>\n```\n\n那麼 computed 跟 methods 在使用上有什麼差異呢？\n\n- computed 一般用來回傳用於畫面呈現的資料 **在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。**\n- methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。\n\n## Vue 表單與資料的綁定\n---\n\n前面有提到 Vue 雙向綁定用 `v-model` 的用法，這個部份來看看其他綁定的用法。\n\n### checkbox\n\n```\n<div id=\"app\">\n  <div class=\"form\">\n    <label for=\"dinner\">要吃晚餐嗎？</label>\n    <input type=\"checkbox\" v-model=\"checkboxDinner\" id=\"dinner\">\n      {{checkboxDinner}}\n  </div>\n</div>\n\n\n<script>\n  var app = new Vue ({\n  \tel: \"#app\",\n  \tdata: {\n  \t  checkboxDinner: false, // checkbox 選項只有true或false\n  \t}\n  })\n</script>\n```\n\n`checkbox` 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。\n\n還有加入 Array 的用法：\n\n```\nvar app = new Vue ({\n  el: \"#app\",\n  data: {\n    checkboxArray: [],\n  }\n})\n```\n\n這裏有綁定 3 個選項，當點擊 `checkbox` ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 `<span>` 中的 `v-for` 迴圈。\n\n```\n<div id=\"app\">\n  <div class=\"form\">\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check2\" value=\"雞\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check2\">雞</label>\n    </div>\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check3\" value=\"豬\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check3\">豬</label>\n    </div>\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check4\" value=\"牛\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check4\">牛</label>\n    </div>\n    <p>晚餐火鍋裡有<span v-for=\"item in checkboxArray\">{{item}}</span>。</p>\n  </div>\n</div>\n```\n\n`checkbox` 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中\n\n```\nvar app = new Vue ({\n  el: \"#app\",\n  data: {\n    singleRadio: \"\",\n  }\n})\n    \n<div id=\"app\">\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio2\" value=\"雞\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio2\">雞</label>\n  </div>\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio3\" value=\"豬\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio3\">豬</label>\n  </div>\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio4\" value=\"牛\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio4\">牛</label>\n  </div>\n  <p>晚餐火鍋裡有 {{singleRadio}}。</p>\n</div>\n```\n\n### 下拉式的選單\n\n當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 `{{selected}}`\n\n```\n<div id=\"app\">\n  <h2>喜歡澳洲哪一個城市？</h2>\n  <select name=\"\" id=\"\" class=\"form-control\" v-model=\"selected\">\n    <option value=\"\" disabled>-- 請選擇地點 --</option>\n    <option value=\"Melbourne\">墨爾本</option>\n    <option value=\"Sydney\">雪梨</option>\n    <option value=\"Adelaide\">阿德雷德</option>\n  </select>\n  {{selected}}\n</div>\n    \n<script>\n  var app = new Vue ({\n    el: \"#app\",\n    data: {\n    \tselected: \"\",\n    }\n  })\n</script>\n```\n\n## component 元件基礎概念\n---\n\n以下有一個範例，當點擊按鈕時，透過 `v-on:click` 綁定 counter 的按鈕會 + 1：\n\n```\n<!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 -->\n<div id=\"app\">\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n</div>\n    \n<script>\n  let app = new Vue({\n    el: \"#app\",\n    data: {\n    \tcounter: 0\n    }\n  })\n</script>\n```\n\n如果新增另一個按鈕的話，會怎麼樣呢？\n\n```\n<div id=\"app\">\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n</div>\n```\n\n因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。\n\n那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：\n\n**component 元件**，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：\n\n```\n// Vue.component(tagName, options)\nVue.component('counter-component', {\n  template: `<div>\n    C目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>`,\n  data: function() {\n    return {\n      counter: 0 \n    }\n  },\n});\n    \nlet app = new Vue({\n  el: \"#app\",\n  data: {\n    counter: 0\n  }\n})\n```\n\ntagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。\n\noption 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。\n\n這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。\n\n```\n<div id=\"app\">\n  <div>\n    A目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n  <!-- 兩者所點擊的數量是分開計算 -->\n  <counter-component></counter-component>\n  <counter-component></counter-component>\n</div>\n```","source":"_posts/基礎Vue-js-3.md","raw":"---\ntitle: 基礎 Vue.js(下)\ntags:\n  - vue\n  - javascript\ndate: 2020-03-30 16:54:07\ncategories: vue\nkeywords: \n- vue\n- javascript\n- 前端框架\ndecription: Basic use about Vue.\n---\n\n最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。\n<!--more-->\n\n## 修飾符\n---\n\n修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 `preventDefault()` 這個語法，例如 jQuery 的用法：\n\n```\n<a href=\"http://www.google.com\">Click me</a>\n    \n<script>\n  $(\"a\").on(\"click\", function(e) {\n    e.preventDefault();\n  });\n</script>\n```\n\n這樣子點擊的話，連結就不會有作用。\n\n而在 Vue 中也有這個用法，阻止默認行為：\n\n`<button @click.prevent=\"doThis\"></button>`\n\n```\n<div id=\"app\">\n  <input type=\"text\" v-model=\"text\">\n  <!-- 當點擊a連結，一樣可以執行function，但不會連到Google -->\n  <a href=\"http://www.google.com\" @click.prevent=\"reverseText\">Reverse Text</a>\n  <div class=\"showText\">\n    {{newText}}\n  </div>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\",\n    \tnewText: \"\"\n    },\n    methods: {\n    \treverseText: function() {\n    \t  this.newText = this.text.split(\"\").reverse().join(\"\");\n    \t}\n    }\n  });\n</script>\n```\n\n## 透過 v-bind:class 來綁定 HTML\n---\n\n可以給予 `v-bind:class` 一個 class 對象，去做出動態切換 class\n\n`<div v-bind:class=\"{ class名稱: 切換的動作 }\"></div>`\n\n看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：\n\n```\n<div id=\"app\">\n  <!-- 只要在class動態加上yellow就會變黃色 -->\n  <div class=\"box\"></div>\n  <button class=\"changeColor btn btn-primary\">Change Color</button>\n</div>\n    \n<style>\n  .box {\n    width: 250px;\n    height: 250px;\n    background-color: blue;\n  }\n    \n  .box.yellow {\n    background-color: yellow;\n  }\n</style>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \tchange: false  // 這邊有一個切換動作change的data\n    }\n  });\n</script>\n```\n\n```    \n<div id=\"app\">\n  <!-- 加上 v-bind:class=\"{class名稱: 切換的動作}\" -->\n  <div class=\"box\" :class=\"{'yellow': change}\"></div>\n  <!-- 在按鈕綁定click，讓它去做切換的效果 -->\n  <button class=\"changeColor btn btn-primary\" @click=\"change = !change\">Change Color</button>\n</div>\n```\n\n{%iframe https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result %}\n\n## 計算屬性 computed 的使用\n---\n\n下面的範例是當在 `text` 欄位輸入文字時，會在 `.showText` 顯示反轉文字\n\n不過\n\n```\n<div id=\"app\">\n  <h2>直接輸入文字</h2>\n  <input type=\"text\" class=\"form-control mt-3\" v-model=\"text\">\n  <h2>在下方顯示反轉文字</h2>\n  <h3 class=\"showText\">\n    {{text.split(\"\").reverse().join(\"\")}}\n  </h3>\n</div>\n    \n<script>\n  var app = new Vue({\n    el: \"#app\",\n    data: {\n    \ttext: \"\"\n    }\n</script>\n```\n\n但是如果要重複使用 `{% raw %}{{text.split(\"\").reverse().join(\"\")}}{% endraw %}` 這一段的話，會有點難維護，所以可以運用 computed 來處理\n\n```\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    text: \"\"\n  },\n  computed: {\n    reverseText: function() {  // 在 computed 中要使用 function\n    \treturn this.text.split(\"\").reverse().join(\"\"); // 並且會回傳值，所以就可以應用在回傳反轉後的結果\n    }\n  }\n});\n```\n\n接著只要加上回傳值的 function，就可以顯示結果了。\n\n```\n<div id=\"app\">\n  <h2>直接輸入文字</h2>\n  <input type=\"text\" class=\"form-control mt-3\" v-model=\"text\">\n  <h2>在下方顯示反轉文字</h2>\n  <h3 class=\"showText\">\n    {{reverseText}}\n  </h3>\n</div>\n```\n\n那麼 computed 跟 methods 在使用上有什麼差異呢？\n\n- computed 一般用來回傳用於畫面呈現的資料 **在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。**\n- methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。\n\n## Vue 表單與資料的綁定\n---\n\n前面有提到 Vue 雙向綁定用 `v-model` 的用法，這個部份來看看其他綁定的用法。\n\n### checkbox\n\n```\n<div id=\"app\">\n  <div class=\"form\">\n    <label for=\"dinner\">要吃晚餐嗎？</label>\n    <input type=\"checkbox\" v-model=\"checkboxDinner\" id=\"dinner\">\n      {{checkboxDinner}}\n  </div>\n</div>\n\n\n<script>\n  var app = new Vue ({\n  \tel: \"#app\",\n  \tdata: {\n  \t  checkboxDinner: false, // checkbox 選項只有true或false\n  \t}\n  })\n</script>\n```\n\n`checkbox` 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。\n\n還有加入 Array 的用法：\n\n```\nvar app = new Vue ({\n  el: \"#app\",\n  data: {\n    checkboxArray: [],\n  }\n})\n```\n\n這裏有綁定 3 個選項，當點擊 `checkbox` ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 `<span>` 中的 `v-for` 迴圈。\n\n```\n<div id=\"app\">\n  <div class=\"form\">\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check2\" value=\"雞\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check2\">雞</label>\n    </div>\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check3\" value=\"豬\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check3\">豬</label>\n    </div>\n    <div class=\"form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"check4\" value=\"牛\" v-model=\"checkboxArray\">\n      <label class=\"form-check-label\" for=\"check4\">牛</label>\n    </div>\n    <p>晚餐火鍋裡有<span v-for=\"item in checkboxArray\">{{item}}</span>。</p>\n  </div>\n</div>\n```\n\n`checkbox` 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中\n\n```\nvar app = new Vue ({\n  el: \"#app\",\n  data: {\n    singleRadio: \"\",\n  }\n})\n    \n<div id=\"app\">\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio2\" value=\"雞\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio2\">雞</label>\n  </div>\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio3\" value=\"豬\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio3\">豬</label>\n  </div>\n  <div class=\"form-check\">\n    <input type=\"radio\" class=\"form-check-input\" id=\"radio4\" value=\"牛\" v-model=\"singleRadio\">\n    <label class=\"form-check-label\" for=\"radio4\">牛</label>\n  </div>\n  <p>晚餐火鍋裡有 {{singleRadio}}。</p>\n</div>\n```\n\n### 下拉式的選單\n\n當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 `{{selected}}`\n\n```\n<div id=\"app\">\n  <h2>喜歡澳洲哪一個城市？</h2>\n  <select name=\"\" id=\"\" class=\"form-control\" v-model=\"selected\">\n    <option value=\"\" disabled>-- 請選擇地點 --</option>\n    <option value=\"Melbourne\">墨爾本</option>\n    <option value=\"Sydney\">雪梨</option>\n    <option value=\"Adelaide\">阿德雷德</option>\n  </select>\n  {{selected}}\n</div>\n    \n<script>\n  var app = new Vue ({\n    el: \"#app\",\n    data: {\n    \tselected: \"\",\n    }\n  })\n</script>\n```\n\n## component 元件基礎概念\n---\n\n以下有一個範例，當點擊按鈕時，透過 `v-on:click` 綁定 counter 的按鈕會 + 1：\n\n```\n<!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 -->\n<div id=\"app\">\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n</div>\n    \n<script>\n  let app = new Vue({\n    el: \"#app\",\n    data: {\n    \tcounter: 0\n    }\n  })\n</script>\n```\n\n如果新增另一個按鈕的話，會怎麼樣呢？\n\n```\n<div id=\"app\">\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n  <div>\n    目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n</div>\n```\n\n因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。\n\n那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：\n\n**component 元件**，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：\n\n```\n// Vue.component(tagName, options)\nVue.component('counter-component', {\n  template: `<div>\n    C目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>`,\n  data: function() {\n    return {\n      counter: 0 \n    }\n  },\n});\n    \nlet app = new Vue({\n  el: \"#app\",\n  data: {\n    counter: 0\n  }\n})\n```\n\ntagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。\n\noption 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。\n\n這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。\n\n```\n<div id=\"app\">\n  <div>\n    A目前點擊<button @click=\"counter += 1\">{{counter}}</button>下\n  </div>\n  <!-- 兩者所點擊的數量是分開計算 -->\n  <counter-component></counter-component>\n  <counter-component></counter-component>\n</div>\n```","slug":"基礎Vue-js-3","published":1,"updated":"2020-03-30T14:55:26.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyx001lb6u7dd2pc4uq","content":"<p>最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h2><hr>\n<p>修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 <code>preventDefault()</code> 這個語法，例如 jQuery 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;Click me&lt;&#x2F;a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $(&quot;a&quot;).on(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣子點擊的話，連結就不會有作用。</p>\n<p>而在 Vue 中也有這個用法，阻止默認行為：</p>\n<p><code>&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 當點擊a連結，一樣可以執行function，但不會連到Google --&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; @click.prevent&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-v-bind-class-來綁定-HTML\"><a href=\"#透過-v-bind-class-來綁定-HTML\" class=\"headerlink\" title=\"透過 v-bind:class 來綁定 HTML\"></a>透過 v-bind:class 來綁定 HTML</h2><hr>\n<p>可以給予 <code>v-bind:class</code> 一個 class 對象，去做出動態切換 class</p>\n<p><code>&lt;div v-bind:class=&quot;{ class名稱: 切換的動作 }&quot;&gt;&lt;/div&gt;</code></p>\n<p>看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 只要在class動態加上yellow就會變黃色 --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  .box.yellow &#123;</span><br><span class=\"line\">    background-color: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tchange: false  &#x2F;&#x2F; 這邊有一個切換動作change的data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 加上 v-bind:class&#x3D;&quot;&#123;class名稱: 切換的動作&#125;&quot; --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123;&#39;yellow&#39;: change&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 在按鈕綁定click，讓它去做切換的效果 --&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot; @click&#x3D;&quot;change &#x3D; !change&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"計算屬性-computed-的使用\"><a href=\"#計算屬性-computed-的使用\" class=\"headerlink\" title=\"計算屬性 computed 的使用\"></a>計算屬性 computed 的使用</h2><hr>\n<p>下面的範例是當在 <code>text</code> 欄位輸入文字時，會在 <code>.showText</code> 顯示反轉文字</p>\n<p>不過</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;text.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果要重複使用 <code>{{text.split(\"\").reverse().join(\"\")}}</code> 這一段的話，會有點難維護，所以可以運用 computed 來處理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reverseText: function() &#123;  &#x2F;&#x2F; 在 computed 中要使用 function</span><br><span class=\"line\">    \treturn this.text.split(&quot;&quot;).reverse().join(&quot;&quot;); &#x2F;&#x2F; 並且會回傳值，所以就可以應用在回傳反轉後的結果</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接著只要加上回傳值的 function，就可以顯示結果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;reverseText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 computed 跟 methods 在使用上有什麼差異呢？</p>\n<ul>\n<li>computed 一般用來回傳用於畫面呈現的資料 <strong>在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。</strong></li>\n<li>methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。</li>\n</ul>\n<h2 id=\"Vue-表單與資料的綁定\"><a href=\"#Vue-表單與資料的綁定\" class=\"headerlink\" title=\"Vue 表單與資料的綁定\"></a>Vue 表單與資料的綁定</h2><hr>\n<p>前面有提到 Vue 雙向綁定用 <code>v-model</code> 的用法，這個部份來看看其他綁定的用法。</p>\n<h3 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;label for&#x3D;&quot;dinner&quot;&gt;要吃晚餐嗎？&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checkboxDinner&quot; id&#x3D;&quot;dinner&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;checkboxDinner&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  \tel: &quot;#app&quot;,</span><br><span class=\"line\">  \tdata: &#123;</span><br><span class=\"line\">  \t  checkboxDinner: false, &#x2F;&#x2F; checkbox 選項只有true或false</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。</p>\n<p>還有加入 Array 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkboxArray: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這裏有綁定 3 個選項，當點擊 <code>checkbox</code> ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 <code>&lt;span&gt;</code> 中的 <code>v-for</code> 迴圈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;p&gt;晚餐火鍋裡有&lt;span v-for&#x3D;&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    singleRadio: &quot;&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;p&gt;晚餐火鍋裡有 &#123;&#123;singleRadio&#125;&#125;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下拉式的選單\"><a href=\"#下拉式的選單\" class=\"headerlink\" title=\"下拉式的選單\"></a>下拉式的選單</h3><p>當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 <code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;喜歡澳洲哪一個城市？&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;&quot; disabled&gt;-- 請選擇地點 --&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Melbourne&quot;&gt;墨爾本&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Sydney&quot;&gt;雪梨&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Adelaide&quot;&gt;阿德雷德&lt;&#x2F;option&gt;</span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\">  &#123;&#123;selected&#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tselected: &quot;&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"component-元件基礎概念\"><a href=\"#component-元件基礎概念\" class=\"headerlink\" title=\"component 元件基礎概念\"></a>component 元件基礎概念</h2><hr>\n<p>以下有一個範例，當點擊按鈕時，透過 <code>v-on:click</code> 綁定 counter 的按鈕會 + 1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 --&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcounter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果新增另一個按鈕的話，會怎麼樣呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。</p>\n<p>那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：</p>\n<p><strong>component 元件</strong>，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Vue.component(tagName, options)</span><br><span class=\"line\">Vue.component(&#39;counter-component&#39;, &#123;</span><br><span class=\"line\">  template: &#96;&lt;div&gt;</span><br><span class=\"line\">    C目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      counter: 0 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。</p>\n<p>option 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。</p>\n<p>這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    A目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 兩者所點擊的數量是分開計算 --&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。</p>","more":"<h2 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h2><hr>\n<p>修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 <code>preventDefault()</code> 這個語法，例如 jQuery 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;Click me&lt;&#x2F;a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $(&quot;a&quot;).on(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣子點擊的話，連結就不會有作用。</p>\n<p>而在 Vue 中也有這個用法，阻止默認行為：</p>\n<p><code>&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 當點擊a連結，一樣可以執行function，但不會連到Google --&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; @click.prevent&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-v-bind-class-來綁定-HTML\"><a href=\"#透過-v-bind-class-來綁定-HTML\" class=\"headerlink\" title=\"透過 v-bind:class 來綁定 HTML\"></a>透過 v-bind:class 來綁定 HTML</h2><hr>\n<p>可以給予 <code>v-bind:class</code> 一個 class 對象，去做出動態切換 class</p>\n<p><code>&lt;div v-bind:class=&quot;{ class名稱: 切換的動作 }&quot;&gt;&lt;/div&gt;</code></p>\n<p>看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 只要在class動態加上yellow就會變黃色 --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  .box.yellow &#123;</span><br><span class=\"line\">    background-color: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tchange: false  &#x2F;&#x2F; 這邊有一個切換動作change的data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 加上 v-bind:class&#x3D;&quot;&#123;class名稱: 切換的動作&#125;&quot; --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123;&#39;yellow&#39;: change&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 在按鈕綁定click，讓它去做切換的效果 --&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot; @click&#x3D;&quot;change &#x3D; !change&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"計算屬性-computed-的使用\"><a href=\"#計算屬性-computed-的使用\" class=\"headerlink\" title=\"計算屬性 computed 的使用\"></a>計算屬性 computed 的使用</h2><hr>\n<p>下面的範例是當在 <code>text</code> 欄位輸入文字時，會在 <code>.showText</code> 顯示反轉文字</p>\n<p>不過</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;text.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果要重複使用 <code>{{text.split(\"\").reverse().join(\"\")}}</code> 這一段的話，會有點難維護，所以可以運用 computed 來處理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reverseText: function() &#123;  &#x2F;&#x2F; 在 computed 中要使用 function</span><br><span class=\"line\">    \treturn this.text.split(&quot;&quot;).reverse().join(&quot;&quot;); &#x2F;&#x2F; 並且會回傳值，所以就可以應用在回傳反轉後的結果</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接著只要加上回傳值的 function，就可以顯示結果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;reverseText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 computed 跟 methods 在使用上有什麼差異呢？</p>\n<ul>\n<li>computed 一般用來回傳用於畫面呈現的資料 <strong>在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。</strong></li>\n<li>methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。</li>\n</ul>\n<h2 id=\"Vue-表單與資料的綁定\"><a href=\"#Vue-表單與資料的綁定\" class=\"headerlink\" title=\"Vue 表單與資料的綁定\"></a>Vue 表單與資料的綁定</h2><hr>\n<p>前面有提到 Vue 雙向綁定用 <code>v-model</code> 的用法，這個部份來看看其他綁定的用法。</p>\n<h3 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;label for&#x3D;&quot;dinner&quot;&gt;要吃晚餐嗎？&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checkboxDinner&quot; id&#x3D;&quot;dinner&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;checkboxDinner&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  \tel: &quot;#app&quot;,</span><br><span class=\"line\">  \tdata: &#123;</span><br><span class=\"line\">  \t  checkboxDinner: false, &#x2F;&#x2F; checkbox 選項只有true或false</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。</p>\n<p>還有加入 Array 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkboxArray: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這裏有綁定 3 個選項，當點擊 <code>checkbox</code> ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 <code>&lt;span&gt;</code> 中的 <code>v-for</code> 迴圈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;p&gt;晚餐火鍋裡有&lt;span v-for&#x3D;&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    singleRadio: &quot;&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;p&gt;晚餐火鍋裡有 &#123;&#123;singleRadio&#125;&#125;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下拉式的選單\"><a href=\"#下拉式的選單\" class=\"headerlink\" title=\"下拉式的選單\"></a>下拉式的選單</h3><p>當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 <code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;喜歡澳洲哪一個城市？&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;&quot; disabled&gt;-- 請選擇地點 --&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Melbourne&quot;&gt;墨爾本&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Sydney&quot;&gt;雪梨&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Adelaide&quot;&gt;阿德雷德&lt;&#x2F;option&gt;</span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\">  &#123;&#123;selected&#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tselected: &quot;&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"component-元件基礎概念\"><a href=\"#component-元件基礎概念\" class=\"headerlink\" title=\"component 元件基礎概念\"></a>component 元件基礎概念</h2><hr>\n<p>以下有一個範例，當點擊按鈕時，透過 <code>v-on:click</code> 綁定 counter 的按鈕會 + 1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 --&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcounter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果新增另一個按鈕的話，會怎麼樣呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。</p>\n<p>那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：</p>\n<p><strong>component 元件</strong>，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Vue.component(tagName, options)</span><br><span class=\"line\">Vue.component(&#39;counter-component&#39;, &#123;</span><br><span class=\"line\">  template: &#96;&lt;div&gt;</span><br><span class=\"line\">    C目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      counter: 0 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。</p>\n<p>option 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。</p>\n<p>這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    A目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 兩者所點擊的數量是分開計算 --&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>"},{"title":"練習如何解題","date":"2020-04-18T08:00:01.000Z","keywords":["先別急著寫 leetcode","pseudo code","印出 1-100 的奇數","fizz buzz","找最小值"],"decription":"關於如何印出 1-100 中奇數的步驟","_content":"在上一篇的 [Think first, code later](https://bucky0112.github.io/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/) 中，有提到如何一步一步地解開印出 1-100 的偶數，這一篇則是來看看如何解一些題目，像是印出 1-100 的奇數、fizz buzz 跟找出最小值。\n<!--more-->\n\n## 印出 1-100 的奇數\n---\n\n首先先想出步驟：\n\n```\n設定 i = 1\n如果 i > 100 就結束\n如果 i 是奇數就印出 i\n讓 i 累加\n再跳回第 2 步\n```\n\n大概設定步驟後，就可以寫出 pseudo code：\n\n```\nlet i = 1\ni > 100 end\ni % 2 === 1\ni ++\njump to line 2\n```\n\n寫到這邊就大概知道可以使用 for 迴圈去跑了，所以可以寫成：\n\n```\nfor (let i = 1; i < 100; i++ ) {\n  if (i % 2 ===1) {\n    console.log(i)\n  }\n}\n```\n\n## Fizz buzz\n---\n\n記得這題在 leetcode 有看過，那時候還不是很懂如何思考（雖然現在也沒有很強就是了），不過現在可以來試試看如何解出這一題，首先先了解一下規則。\n\nFizz buzz 的規則是，數字從 1-n，如果碰到 3 的倍數，就印出 Fizz；如果碰到 5 的倍數，就印出 Buzz；如果碰到 3 跟 5 的倍數，就印出 Fizz Buzz。\n\n知道規則後，就可以想想怎麼做：\n\n```\n設定 i = 1\n一直算到 n 就結束\n如果是 3 的倍數，印 Fizz\n如果是 5 的倍數，印 Buzz\n如果是 3 跟 5 的倍數，印 Fizz Buzz\n讓 i 累加\n跳回第 2 步\n```\n\n到這邊就可以用 function 包一個 for 迴圈寫出來，看數字要多少再帶入就可以：\n\n```\nfunction fizzBuzz (num) {\n  for (let i =1; i <= num; i++) {\n    if(i % 15 ===0) {            // 15 的倍數就印 Fizz Buzz\n      console.log('Fizz Buzz')\n    } else if (i % 3 ===0) {    // 3 的倍數就印 Fizz\n      console.log('Fizz')\n    } else if (i % 5 ===0) {    // 5 的倍數就印 Buzz\n      console.log('Buzz')\n    } else {                    // 其他數就照樣印出數字\n      console.log(i)\n    }\n  }\n}\n\nfizzBuzz(100)                  // 代入 100，就從 1 比對到 100\n```\n\n## 找最小值\n---\n\n找最小值的方法可以從情境去帶入比較好思考。\n\n例如目前有一副牌，從第一張開始設定為最小的牌，再來每一次的翻牌跟目前最小的牌做比較，直到全部翻完就可以知道最小的牌是哪一張。\n\n所以 pseudo code 大概是這樣：\n\n```\nlet min = [0];\nfor (i form 1 to n) do\n  翻開第 i 張牌\n  if (第 i 張牌比最小牌還要小)\n    最小的牌 = 第 i 張牌\n  end if\nend for\n```\n\n接著就可以用 JavaScript 寫出 code：\n\n```\nlet num = [11, 10, 8, 3, 2, 6];          // 目前的牌組\nlet min = num[0];                       // 設定最小牌為第一張\n\nfor (let i = 0; i < num.length; i ++) {\n  if (num[i] < min) {                   // 如果目前翻到的牌 < min，\n    min = num[i]                        // min就是目前最小牌\n  }\n}\n\nconsole.log(min)                        // 最小值就是 2\n```","source":"_posts/練習如何解題.md","raw":"---\ntitle: 練習如何解題\ntags:\n  - 印出 1-100 的奇數\n  - fizz buzz\n  - 找最小值\ndate: 2020-04-18 16:00:01\ncategories: 先別急著寫 leetcode 課程心得\nkeywords:\n- 先別急著寫 leetcode\n- pseudo code\n- 印出 1-100 的奇數\n- fizz buzz\n- 找最小值\ndecription: 關於如何印出 1-100 中奇數的步驟\n---\n在上一篇的 [Think first, code later](https://bucky0112.github.io/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/) 中，有提到如何一步一步地解開印出 1-100 的偶數，這一篇則是來看看如何解一些題目，像是印出 1-100 的奇數、fizz buzz 跟找出最小值。\n<!--more-->\n\n## 印出 1-100 的奇數\n---\n\n首先先想出步驟：\n\n```\n設定 i = 1\n如果 i > 100 就結束\n如果 i 是奇數就印出 i\n讓 i 累加\n再跳回第 2 步\n```\n\n大概設定步驟後，就可以寫出 pseudo code：\n\n```\nlet i = 1\ni > 100 end\ni % 2 === 1\ni ++\njump to line 2\n```\n\n寫到這邊就大概知道可以使用 for 迴圈去跑了，所以可以寫成：\n\n```\nfor (let i = 1; i < 100; i++ ) {\n  if (i % 2 ===1) {\n    console.log(i)\n  }\n}\n```\n\n## Fizz buzz\n---\n\n記得這題在 leetcode 有看過，那時候還不是很懂如何思考（雖然現在也沒有很強就是了），不過現在可以來試試看如何解出這一題，首先先了解一下規則。\n\nFizz buzz 的規則是，數字從 1-n，如果碰到 3 的倍數，就印出 Fizz；如果碰到 5 的倍數，就印出 Buzz；如果碰到 3 跟 5 的倍數，就印出 Fizz Buzz。\n\n知道規則後，就可以想想怎麼做：\n\n```\n設定 i = 1\n一直算到 n 就結束\n如果是 3 的倍數，印 Fizz\n如果是 5 的倍數，印 Buzz\n如果是 3 跟 5 的倍數，印 Fizz Buzz\n讓 i 累加\n跳回第 2 步\n```\n\n到這邊就可以用 function 包一個 for 迴圈寫出來，看數字要多少再帶入就可以：\n\n```\nfunction fizzBuzz (num) {\n  for (let i =1; i <= num; i++) {\n    if(i % 15 ===0) {            // 15 的倍數就印 Fizz Buzz\n      console.log('Fizz Buzz')\n    } else if (i % 3 ===0) {    // 3 的倍數就印 Fizz\n      console.log('Fizz')\n    } else if (i % 5 ===0) {    // 5 的倍數就印 Buzz\n      console.log('Buzz')\n    } else {                    // 其他數就照樣印出數字\n      console.log(i)\n    }\n  }\n}\n\nfizzBuzz(100)                  // 代入 100，就從 1 比對到 100\n```\n\n## 找最小值\n---\n\n找最小值的方法可以從情境去帶入比較好思考。\n\n例如目前有一副牌，從第一張開始設定為最小的牌，再來每一次的翻牌跟目前最小的牌做比較，直到全部翻完就可以知道最小的牌是哪一張。\n\n所以 pseudo code 大概是這樣：\n\n```\nlet min = [0];\nfor (i form 1 to n) do\n  翻開第 i 張牌\n  if (第 i 張牌比最小牌還要小)\n    最小的牌 = 第 i 張牌\n  end if\nend for\n```\n\n接著就可以用 JavaScript 寫出 code：\n\n```\nlet num = [11, 10, 8, 3, 2, 6];          // 目前的牌組\nlet min = num[0];                       // 設定最小牌為第一張\n\nfor (let i = 0; i < num.length; i ++) {\n  if (num[i] < min) {                   // 如果目前翻到的牌 < min，\n    min = num[i]                        // min就是目前最小牌\n  }\n}\n\nconsole.log(min)                        // 最小值就是 2\n```","slug":"練習如何解題","published":1,"updated":"2020-04-20T15:14:08.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwyy001ob6u72j336o4h","content":"<p>在上一篇的 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/\">Think first, code later</a> 中，有提到如何一步一步地解開印出 1-100 的偶數，這一篇則是來看看如何解一些題目，像是印出 1-100 的奇數、fizz buzz 跟找出最小值。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"印出-1-100-的奇數\"><a href=\"#印出-1-100-的奇數\" class=\"headerlink\" title=\"印出 1-100 的奇數\"></a>印出 1-100 的奇數</h2><hr>\n<p>首先先想出步驟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100 就結束</span><br><span class=\"line\">如果 i 是奇數就印出 i</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>大概設定步驟後，就可以寫出 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">i &gt; 100 end</span><br><span class=\"line\">i % 2 &#x3D;&#x3D;&#x3D; 1</span><br><span class=\"line\">i ++</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊就大概知道可以使用 for 迴圈去跑了，所以可以寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i &#x3D; 1; i &lt; 100; i++ ) &#123;</span><br><span class=\"line\">  if (i % 2 &#x3D;&#x3D;&#x3D;1) &#123;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fizz-buzz\"><a href=\"#Fizz-buzz\" class=\"headerlink\" title=\"Fizz buzz\"></a>Fizz buzz</h2><hr>\n<p>記得這題在 leetcode 有看過，那時候還不是很懂如何思考（雖然現在也沒有很強就是了），不過現在可以來試試看如何解出這一題，首先先了解一下規則。</p>\n<p>Fizz buzz 的規則是，數字從 1-n，如果碰到 3 的倍數，就印出 Fizz；如果碰到 5 的倍數，就印出 Buzz；如果碰到 3 跟 5 的倍數，就印出 Fizz Buzz。</p>\n<p>知道規則後，就可以想想怎麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">一直算到 n 就結束</span><br><span class=\"line\">如果是 3 的倍數，印 Fizz</span><br><span class=\"line\">如果是 5 的倍數，印 Buzz</span><br><span class=\"line\">如果是 3 跟 5 的倍數，印 Fizz Buzz</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就可以用 function 包一個 for 迴圈寫出來，看數字要多少再帶入就可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fizzBuzz (num) &#123;</span><br><span class=\"line\">  for (let i &#x3D;1; i &lt;&#x3D; num; i++) &#123;</span><br><span class=\"line\">    if(i % 15 &#x3D;&#x3D;&#x3D;0) &#123;            &#x2F;&#x2F; 15 的倍數就印 Fizz Buzz</span><br><span class=\"line\">      console.log(&#39;Fizz Buzz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 3 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 3 的倍數就印 Fizz</span><br><span class=\"line\">      console.log(&#39;Fizz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 5 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 5 的倍數就印 Buzz</span><br><span class=\"line\">      console.log(&#39;Buzz&#39;)</span><br><span class=\"line\">    &#125; else &#123;                    &#x2F;&#x2F; 其他數就照樣印出數字</span><br><span class=\"line\">      console.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fizzBuzz(100)                  &#x2F;&#x2F; 代入 100，就從 1 比對到 100</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"找最小值\"><a href=\"#找最小值\" class=\"headerlink\" title=\"找最小值\"></a>找最小值</h2><hr>\n<p>找最小值的方法可以從情境去帶入比較好思考。</p>\n<p>例如目前有一副牌，從第一張開始設定為最小的牌，再來每一次的翻牌跟目前最小的牌做比較，直到全部翻完就可以知道最小的牌是哪一張。</p>\n<p>所以 pseudo code 大概是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let min &#x3D; [0];</span><br><span class=\"line\">for (i form 1 to n) do</span><br><span class=\"line\">  翻開第 i 張牌</span><br><span class=\"line\">  if (第 i 張牌比最小牌還要小)</span><br><span class=\"line\">    最小的牌 &#x3D; 第 i 張牌</span><br><span class=\"line\">  end if</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<p>接著就可以用 JavaScript 寫出 code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num &#x3D; [11, 10, 8, 3, 2, 6];          &#x2F;&#x2F; 目前的牌組</span><br><span class=\"line\">let min &#x3D; num[0];                       &#x2F;&#x2F; 設定最小牌為第一張</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; num.length; i ++) &#123;</span><br><span class=\"line\">  if (num[i] &lt; min) &#123;                   &#x2F;&#x2F; 如果目前翻到的牌 &lt; min，</span><br><span class=\"line\">    min &#x3D; num[i]                        &#x2F;&#x2F; min就是目前最小牌</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(min)                        &#x2F;&#x2F; 最小值就是 2</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在上一篇的 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/\">Think first, code later</a> 中，有提到如何一步一步地解開印出 1-100 的偶數，這一篇則是來看看如何解一些題目，像是印出 1-100 的奇數、fizz buzz 跟找出最小值。</p>","more":"<h2 id=\"印出-1-100-的奇數\"><a href=\"#印出-1-100-的奇數\" class=\"headerlink\" title=\"印出 1-100 的奇數\"></a>印出 1-100 的奇數</h2><hr>\n<p>首先先想出步驟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100 就結束</span><br><span class=\"line\">如果 i 是奇數就印出 i</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>大概設定步驟後，就可以寫出 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">i &gt; 100 end</span><br><span class=\"line\">i % 2 &#x3D;&#x3D;&#x3D; 1</span><br><span class=\"line\">i ++</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊就大概知道可以使用 for 迴圈去跑了，所以可以寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i &#x3D; 1; i &lt; 100; i++ ) &#123;</span><br><span class=\"line\">  if (i % 2 &#x3D;&#x3D;&#x3D;1) &#123;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fizz-buzz\"><a href=\"#Fizz-buzz\" class=\"headerlink\" title=\"Fizz buzz\"></a>Fizz buzz</h2><hr>\n<p>記得這題在 leetcode 有看過，那時候還不是很懂如何思考（雖然現在也沒有很強就是了），不過現在可以來試試看如何解出這一題，首先先了解一下規則。</p>\n<p>Fizz buzz 的規則是，數字從 1-n，如果碰到 3 的倍數，就印出 Fizz；如果碰到 5 的倍數，就印出 Buzz；如果碰到 3 跟 5 的倍數，就印出 Fizz Buzz。</p>\n<p>知道規則後，就可以想想怎麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">一直算到 n 就結束</span><br><span class=\"line\">如果是 3 的倍數，印 Fizz</span><br><span class=\"line\">如果是 5 的倍數，印 Buzz</span><br><span class=\"line\">如果是 3 跟 5 的倍數，印 Fizz Buzz</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就可以用 function 包一個 for 迴圈寫出來，看數字要多少再帶入就可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fizzBuzz (num) &#123;</span><br><span class=\"line\">  for (let i &#x3D;1; i &lt;&#x3D; num; i++) &#123;</span><br><span class=\"line\">    if(i % 15 &#x3D;&#x3D;&#x3D;0) &#123;            &#x2F;&#x2F; 15 的倍數就印 Fizz Buzz</span><br><span class=\"line\">      console.log(&#39;Fizz Buzz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 3 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 3 的倍數就印 Fizz</span><br><span class=\"line\">      console.log(&#39;Fizz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 5 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 5 的倍數就印 Buzz</span><br><span class=\"line\">      console.log(&#39;Buzz&#39;)</span><br><span class=\"line\">    &#125; else &#123;                    &#x2F;&#x2F; 其他數就照樣印出數字</span><br><span class=\"line\">      console.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fizzBuzz(100)                  &#x2F;&#x2F; 代入 100，就從 1 比對到 100</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"找最小值\"><a href=\"#找最小值\" class=\"headerlink\" title=\"找最小值\"></a>找最小值</h2><hr>\n<p>找最小值的方法可以從情境去帶入比較好思考。</p>\n<p>例如目前有一副牌，從第一張開始設定為最小的牌，再來每一次的翻牌跟目前最小的牌做比較，直到全部翻完就可以知道最小的牌是哪一張。</p>\n<p>所以 pseudo code 大概是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let min &#x3D; [0];</span><br><span class=\"line\">for (i form 1 to n) do</span><br><span class=\"line\">  翻開第 i 張牌</span><br><span class=\"line\">  if (第 i 張牌比最小牌還要小)</span><br><span class=\"line\">    最小的牌 &#x3D; 第 i 張牌</span><br><span class=\"line\">  end if</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<p>接著就可以用 JavaScript 寫出 code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num &#x3D; [11, 10, 8, 3, 2, 6];          &#x2F;&#x2F; 目前的牌組</span><br><span class=\"line\">let min &#x3D; num[0];                       &#x2F;&#x2F; 設定最小牌為第一張</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; num.length; i ++) &#123;</span><br><span class=\"line\">  if (num[i] &lt; min) &#123;                   &#x2F;&#x2F; 如果目前翻到的牌 &lt; min，</span><br><span class=\"line\">    min &#x3D; num[i]                        &#x2F;&#x2F; min就是目前最小牌</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(min)                        &#x2F;&#x2F; 最小值就是 2</span><br></pre></td></tr></table></figure>"},{"title":"執行環境：創造與提升","date":"2020-04-24T09:32:58.000Z","keywords":["javascript","JavaScript 全攻略：克服 JS 的奇怪部分","hoisting"],"decription":null,"_content":"在 JavaScript 中，提升（Hoisting）可能是最奇怪的部份了，這個部份還滿容易搞混的，不過希望我整理出來的筆記能夠幫助釐清觀念，如果有錯的部分麻煩請告知我。\n<!--more-->\n\n首先看一段程式碼，然後看會發生什麼事：\n\n```\nvar a = 'Hello World';\n\nfunction b() {\n  console.log('Test');\n}\n\nconsole.log(a);\nb()\n```\n\n上面的程式碼沒有意外的出現 `Hello World` 及 `Test`。\n如果把第 8 跟第 9 行移到最上面的話，會發生什麼事呢？\n\n```\nconsole.log(a); // undefined\nb();            // \"Test\"\n\nvar a = 'Hello World';\n\nfunction b() {\n  console.log('Test');\n}\n```\n\n結果沒有出現錯誤，而是得到一個值 undefined，另一個函式則是成功執行。\n這在其他大部分程式語言是沒有辦法執行的，但是在 JavaScript 卻可以執行（至少我在 Ruby 試過不行），\n而這個現象叫做提升 (Hoisting)。\n\n這個現象並不是說真的把你的程式碼移到最上面，而是在一行一行執行程式碼之前，JavaScript 會先做一次預編譯，為了變數和函式在記憶體中建立一個空間，所以當程式碼被逐行執行時，就可以馬上找到它們。\n\n那麼為什麼變數跟函式得到的結果不同呢？\n\n這是因為所有 JavaScript 的變數，**在一開始都會被設定為 undefined**，表示不知道它的值，就算不設值的話，也是一樣得到 undefined。\n\n```\nconsole.log(a); // undefined\nb();            // \"Test\"\n\nvar a;\n\nfunction b() {\n  console.log('Test');\n}\n```\n\n而在程式碼在第一行發現 a 沒有值，就直接給 undefined。\n\n函式不同的是，前面有說到，執行前會做一次預編譯，在這過程中，定義式函式會優先執行，會被完全設定好放在記憶體中，等到執行時發現這裏有一個函式，在記憶體已經有值了，於是可以馬上讀取。\n\n雖然 JavaScript 有提升這個特性，但是還是建議要用到的變數，還是盡可能地在上面宣告再使用。","source":"_posts/執行環境-創造與提升.md","raw":"---\ntitle: 執行環境：創造與提升\ntags:\n  - javascript\n  - hoisting\ncategories: JavaScript 的怪奇物語\ndate: 2020-04-24 17:32:58\nkeywords:\n  - javascript\n  - JavaScript 全攻略：克服 JS 的奇怪部分\n  - hoisting\ndecription: \n---\n在 JavaScript 中，提升（Hoisting）可能是最奇怪的部份了，這個部份還滿容易搞混的，不過希望我整理出來的筆記能夠幫助釐清觀念，如果有錯的部分麻煩請告知我。\n<!--more-->\n\n首先看一段程式碼，然後看會發生什麼事：\n\n```\nvar a = 'Hello World';\n\nfunction b() {\n  console.log('Test');\n}\n\nconsole.log(a);\nb()\n```\n\n上面的程式碼沒有意外的出現 `Hello World` 及 `Test`。\n如果把第 8 跟第 9 行移到最上面的話，會發生什麼事呢？\n\n```\nconsole.log(a); // undefined\nb();            // \"Test\"\n\nvar a = 'Hello World';\n\nfunction b() {\n  console.log('Test');\n}\n```\n\n結果沒有出現錯誤，而是得到一個值 undefined，另一個函式則是成功執行。\n這在其他大部分程式語言是沒有辦法執行的，但是在 JavaScript 卻可以執行（至少我在 Ruby 試過不行），\n而這個現象叫做提升 (Hoisting)。\n\n這個現象並不是說真的把你的程式碼移到最上面，而是在一行一行執行程式碼之前，JavaScript 會先做一次預編譯，為了變數和函式在記憶體中建立一個空間，所以當程式碼被逐行執行時，就可以馬上找到它們。\n\n那麼為什麼變數跟函式得到的結果不同呢？\n\n這是因為所有 JavaScript 的變數，**在一開始都會被設定為 undefined**，表示不知道它的值，就算不設值的話，也是一樣得到 undefined。\n\n```\nconsole.log(a); // undefined\nb();            // \"Test\"\n\nvar a;\n\nfunction b() {\n  console.log('Test');\n}\n```\n\n而在程式碼在第一行發現 a 沒有值，就直接給 undefined。\n\n函式不同的是，前面有說到，執行前會做一次預編譯，在這過程中，定義式函式會優先執行，會被完全設定好放在記憶體中，等到執行時發現這裏有一個函式，在記憶體已經有值了，於是可以馬上讀取。\n\n雖然 JavaScript 有提升這個特性，但是還是建議要用到的變數，還是盡可能地在上面宣告再使用。","slug":"執行環境-創造與提升","published":1,"updated":"2020-04-29T09:06:10.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbdizwz0001sb6u70a7bh73l","content":"<p>在 JavaScript 中，提升（Hoisting）可能是最奇怪的部份了，這個部份還滿容易搞混的，不過希望我整理出來的筆記能夠幫助釐清觀念，如果有錯的部分麻煩請告知我。</p>\n<a id=\"more\"></a>\n\n<p>首先看一段程式碼，然後看會發生什麼事：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure>\n\n<p>上面的程式碼沒有意外的出現 <code>Hello World</code> 及 <code>Test</code>。<br>如果把第 8 跟第 9 行移到最上面的話，會發生什麼事呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果沒有出現錯誤，而是得到一個值 undefined，另一個函式則是成功執行。<br>這在其他大部分程式語言是沒有辦法執行的，但是在 JavaScript 卻可以執行（至少我在 Ruby 試過不行），<br>而這個現象叫做提升 (Hoisting)。</p>\n<p>這個現象並不是說真的把你的程式碼移到最上面，而是在一行一行執行程式碼之前，JavaScript 會先做一次預編譯，為了變數和函式在記憶體中建立一個空間，所以當程式碼被逐行執行時，就可以馬上找到它們。</p>\n<p>那麼為什麼變數跟函式得到的結果不同呢？</p>\n<p>這是因為所有 JavaScript 的變數，<strong>在一開始都會被設定為 undefined</strong>，表示不知道它的值，就算不設值的話，也是一樣得到 undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在程式碼在第一行發現 a 沒有值，就直接給 undefined。</p>\n<p>函式不同的是，前面有說到，執行前會做一次預編譯，在這過程中，定義式函式會優先執行，會被完全設定好放在記憶體中，等到執行時發現這裏有一個函式，在記憶體已經有值了，於是可以馬上讀取。</p>\n<p>雖然 JavaScript 有提升這個特性，但是還是建議要用到的變數，還是盡可能地在上面宣告再使用。</p>\n","site":{"data":{}},"excerpt":"<p>在 JavaScript 中，提升（Hoisting）可能是最奇怪的部份了，這個部份還滿容易搞混的，不過希望我整理出來的筆記能夠幫助釐清觀念，如果有錯的部分麻煩請告知我。</p>","more":"<p>首先看一段程式碼，然後看會發生什麼事：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure>\n\n<p>上面的程式碼沒有意外的出現 <code>Hello World</code> 及 <code>Test</code>。<br>如果把第 8 跟第 9 行移到最上面的話，會發生什麼事呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果沒有出現錯誤，而是得到一個值 undefined，另一個函式則是成功執行。<br>這在其他大部分程式語言是沒有辦法執行的，但是在 JavaScript 卻可以執行（至少我在 Ruby 試過不行），<br>而這個現象叫做提升 (Hoisting)。</p>\n<p>這個現象並不是說真的把你的程式碼移到最上面，而是在一行一行執行程式碼之前，JavaScript 會先做一次預編譯，為了變數和函式在記憶體中建立一個空間，所以當程式碼被逐行執行時，就可以馬上找到它們。</p>\n<p>那麼為什麼變數跟函式得到的結果不同呢？</p>\n<p>這是因為所有 JavaScript 的變數，<strong>在一開始都會被設定為 undefined</strong>，表示不知道它的值，就算不設值的話，也是一樣得到 undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在程式碼在第一行發現 a 沒有值，就直接給 undefined。</p>\n<p>函式不同的是，前面有說到，執行前會做一次預編譯，在這過程中，定義式函式會優先執行，會被完全設定好放在記憶體中，等到執行時發現這裏有一個函式，在記憶體已經有值了，於是可以馬上讀取。</p>\n<p>雖然 JavaScript 有提升這個特性，但是還是建議要用到的變數，還是盡可能地在上面宣告再使用。</p>"},{"title":"JavaScript 作品實戰班之課程心得","date":"2020-08-28T03:20:59.000Z","keywords":"JavaScript 作品實戰班","decription":"為期 8 週的 JavaScript 直播課程心得","_content":"在經歷了為期 8 週的課程之後，回顧當時的猶豫，現在覺得上到這個課程真的是太好了，感覺對使用 JavaScript 的信心提升了不少，對於 Vue.js 的掌握度也越來越熟悉，甚至還用 Vue CLI 做了一個電商網站呢！\n<!--more-->\n\n## 當初為什麼報名這堂課？\n\n雖然我在前端領域學習了一陣子了，不過對於 JavaScript 還是有點不夠熟練，以至於對於做出一個作品出來覺得沒有什麼信心，所以遲遲準備沒有好的作品去面試。這時候正好六角學院開了一個 - **JavaScript 作品實戰班**。\n![Image](https://i.imgur.com/Cp53XPl.png)\n看了一下課綱，六角學院的老師們將會在 8 週教我們 JavaScript 的邏輯規劃、將 ES6 運用在實戰中、從 Vue.js 的基礎教學，一直到使用 Vue CLI，一直到做出一個 SPA 網站出來。\n我自己也剛好在六角學院學 Vue.js 中，感覺這是一個可以快速練功的好選擇，所以就刷了下去惹。![Image](https://i.imgur.com/xwY8Oh0.png)\n \n## 回顧學習過程與最喜歡哪些活動？\n\n這 8 週下來，都會有每日任務讓你從做中學，甚至還有團體任務讓你跟組員們一起學習解題，啊！對了，忘了說到六角在這課程中導入了打怪的模式，也分了組別可以有團體打王，或是每週任務讓個人輸出傷害讓最後的魔王損血。\n![Image](https://i.imgur.com/LzMdtAN.png)\n前面提到的每日任務，是我個人蠻喜歡的一個部份。老師設計了一個故事情境並融入 JavaScript 與 Vue.js 的運用，讓我在不知不覺中越來越進步（雖然有些情境是滿扯的啦😄）。然後每週主線任務也是漸進式的讓我們從關注點分離運用在 JavaScript 的規劃，進而帶到目前主流的 JavaScript 前端框架之一 --- **Vue.js**。然後讓我們學會了串 api，自己規劃一個電商網站的後台與前台。\n\n## 最大的收獲是？\n\n其實上直播班的最大好處是可以感受到老師跟助教們擁有實戰經驗的教學，有什麼問題只要在 Slack 發問，就會很快得到如何處理 bug 的方法（懷疑他們 484 隨時掛在線上），有時候問的問題也會被其他有經驗的同學幫忙解答，還會跟組員討論那個部份怎樣做，這個地方要注意什麼細節，這時候就會覺得自己在這條學習的路上並不孤單，有著跟志同道合的夥伴講著相同的語言的美好氛圍。\n雖然現在的我還是一個在前端領域的小人物，但是回首過去，其實我為自己跨出這一大步而感到驕傲。\n![Image](https://images.unsplash.com/photo-1438783122414-75b2c084bd44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1189&q=80)","source":"_posts/hexoJSclassReview.md","raw":"---\ntitle: JavaScript 作品實戰班之課程心得\ntags: JavaScript 作品實戰班\ndate: 2020-08-28 11:20:59\ncategories: JavaScript 作品實戰班 - 學習心得\nkeywords: JavaScript 作品實戰班\ndecription: 為期 8 週的 JavaScript 直播課程心得\n---\n在經歷了為期 8 週的課程之後，回顧當時的猶豫，現在覺得上到這個課程真的是太好了，感覺對使用 JavaScript 的信心提升了不少，對於 Vue.js 的掌握度也越來越熟悉，甚至還用 Vue CLI 做了一個電商網站呢！\n<!--more-->\n\n## 當初為什麼報名這堂課？\n\n雖然我在前端領域學習了一陣子了，不過對於 JavaScript 還是有點不夠熟練，以至於對於做出一個作品出來覺得沒有什麼信心，所以遲遲準備沒有好的作品去面試。這時候正好六角學院開了一個 - **JavaScript 作品實戰班**。\n![Image](https://i.imgur.com/Cp53XPl.png)\n看了一下課綱，六角學院的老師們將會在 8 週教我們 JavaScript 的邏輯規劃、將 ES6 運用在實戰中、從 Vue.js 的基礎教學，一直到使用 Vue CLI，一直到做出一個 SPA 網站出來。\n我自己也剛好在六角學院學 Vue.js 中，感覺這是一個可以快速練功的好選擇，所以就刷了下去惹。![Image](https://i.imgur.com/xwY8Oh0.png)\n \n## 回顧學習過程與最喜歡哪些活動？\n\n這 8 週下來，都會有每日任務讓你從做中學，甚至還有團體任務讓你跟組員們一起學習解題，啊！對了，忘了說到六角在這課程中導入了打怪的模式，也分了組別可以有團體打王，或是每週任務讓個人輸出傷害讓最後的魔王損血。\n![Image](https://i.imgur.com/LzMdtAN.png)\n前面提到的每日任務，是我個人蠻喜歡的一個部份。老師設計了一個故事情境並融入 JavaScript 與 Vue.js 的運用，讓我在不知不覺中越來越進步（雖然有些情境是滿扯的啦😄）。然後每週主線任務也是漸進式的讓我們從關注點分離運用在 JavaScript 的規劃，進而帶到目前主流的 JavaScript 前端框架之一 --- **Vue.js**。然後讓我們學會了串 api，自己規劃一個電商網站的後台與前台。\n\n## 最大的收獲是？\n\n其實上直播班的最大好處是可以感受到老師跟助教們擁有實戰經驗的教學，有什麼問題只要在 Slack 發問，就會很快得到如何處理 bug 的方法（懷疑他們 484 隨時掛在線上），有時候問的問題也會被其他有經驗的同學幫忙解答，還會跟組員討論那個部份怎樣做，這個地方要注意什麼細節，這時候就會覺得自己在這條學習的路上並不孤單，有著跟志同道合的夥伴講著相同的語言的美好氛圍。\n雖然現在的我還是一個在前端領域的小人物，但是回首過去，其實我為自己跨出這一大步而感到驕傲。\n![Image](https://images.unsplash.com/photo-1438783122414-75b2c084bd44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1189&q=80)","slug":"hexoJSclassReview","published":1,"updated":"2020-08-28T06:04:22.388Z","_id":"ckedtxyro000089u72b2e4cak","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在經歷了為期 8 週的課程之後，回顧當時的猶豫，現在覺得上到這個課程真的是太好了，感覺對使用 JavaScript 的信心提升了不少，對於 Vue.js 的掌握度也越來越熟悉，甚至還用 Vue CLI 做了一個電商網站呢！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"當初為什麼報名這堂課？\"><a href=\"#當初為什麼報名這堂課？\" class=\"headerlink\" title=\"當初為什麼報名這堂課？\"></a>當初為什麼報名這堂課？</h2><p>雖然我在前端領域學習了一陣子了，不過對於 JavaScript 還是有點不夠熟練，以至於對於做出一個作品出來覺得沒有什麼信心，所以遲遲準備沒有好的作品去面試。這時候正好六角學院開了一個 - <strong>JavaScript 作品實戰班</strong>。<br><img src=\"https://i.imgur.com/Cp53XPl.png\" alt=\"Image\"><br>看了一下課綱，六角學院的老師們將會在 8 週教我們 JavaScript 的邏輯規劃、將 ES6 運用在實戰中、從 Vue.js 的基礎教學，一直到使用 Vue CLI，一直到做出一個 SPA 網站出來。<br>我自己也剛好在六角學院學 Vue.js 中，感覺這是一個可以快速練功的好選擇，所以就刷了下去惹。<img src=\"https://i.imgur.com/xwY8Oh0.png\" alt=\"Image\"></p>\n<h2 id=\"回顧學習過程與最喜歡哪些活動？\"><a href=\"#回顧學習過程與最喜歡哪些活動？\" class=\"headerlink\" title=\"回顧學習過程與最喜歡哪些活動？\"></a>回顧學習過程與最喜歡哪些活動？</h2><p>這 8 週下來，都會有每日任務讓你從做中學，甚至還有團體任務讓你跟組員們一起學習解題，啊！對了，忘了說到六角在這課程中導入了打怪的模式，也分了組別可以有團體打王，或是每週任務讓個人輸出傷害讓最後的魔王損血。<br><img src=\"https://i.imgur.com/LzMdtAN.png\" alt=\"Image\"><br>前面提到的每日任務，是我個人蠻喜歡的一個部份。老師設計了一個故事情境並融入 JavaScript 與 Vue.js 的運用，讓我在不知不覺中越來越進步（雖然有些情境是滿扯的啦😄）。然後每週主線任務也是漸進式的讓我們從關注點分離運用在 JavaScript 的規劃，進而帶到目前主流的 JavaScript 前端框架之一 — <strong>Vue.js</strong>。然後讓我們學會了串 api，自己規劃一個電商網站的後台與前台。</p>\n<h2 id=\"最大的收獲是？\"><a href=\"#最大的收獲是？\" class=\"headerlink\" title=\"最大的收獲是？\"></a>最大的收獲是？</h2><p>其實上直播班的最大好處是可以感受到老師跟助教們擁有實戰經驗的教學，有什麼問題只要在 Slack 發問，就會很快得到如何處理 bug 的方法（懷疑他們 484 隨時掛在線上），有時候問的問題也會被其他有經驗的同學幫忙解答，還會跟組員討論那個部份怎樣做，這個地方要注意什麼細節，這時候就會覺得自己在這條學習的路上並不孤單，有著跟志同道合的夥伴講著相同的語言的美好氛圍。<br>雖然現在的我還是一個在前端領域的小人物，但是回首過去，其實我為自己跨出這一大步而感到驕傲。<br><img src=\"https://images.unsplash.com/photo-1438783122414-75b2c084bd44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1189&q=80\" alt=\"Image\"></p>\n","site":{"data":{}},"excerpt":"<p>在經歷了為期 8 週的課程之後，回顧當時的猶豫，現在覺得上到這個課程真的是太好了，感覺對使用 JavaScript 的信心提升了不少，對於 Vue.js 的掌握度也越來越熟悉，甚至還用 Vue CLI 做了一個電商網站呢！</p>","more":"<h2 id=\"當初為什麼報名這堂課？\"><a href=\"#當初為什麼報名這堂課？\" class=\"headerlink\" title=\"當初為什麼報名這堂課？\"></a>當初為什麼報名這堂課？</h2><p>雖然我在前端領域學習了一陣子了，不過對於 JavaScript 還是有點不夠熟練，以至於對於做出一個作品出來覺得沒有什麼信心，所以遲遲準備沒有好的作品去面試。這時候正好六角學院開了一個 - <strong>JavaScript 作品實戰班</strong>。<br><img src=\"https://i.imgur.com/Cp53XPl.png\" alt=\"Image\"><br>看了一下課綱，六角學院的老師們將會在 8 週教我們 JavaScript 的邏輯規劃、將 ES6 運用在實戰中、從 Vue.js 的基礎教學，一直到使用 Vue CLI，一直到做出一個 SPA 網站出來。<br>我自己也剛好在六角學院學 Vue.js 中，感覺這是一個可以快速練功的好選擇，所以就刷了下去惹。<img src=\"https://i.imgur.com/xwY8Oh0.png\" alt=\"Image\"></p>\n<h2 id=\"回顧學習過程與最喜歡哪些活動？\"><a href=\"#回顧學習過程與最喜歡哪些活動？\" class=\"headerlink\" title=\"回顧學習過程與最喜歡哪些活動？\"></a>回顧學習過程與最喜歡哪些活動？</h2><p>這 8 週下來，都會有每日任務讓你從做中學，甚至還有團體任務讓你跟組員們一起學習解題，啊！對了，忘了說到六角在這課程中導入了打怪的模式，也分了組別可以有團體打王，或是每週任務讓個人輸出傷害讓最後的魔王損血。<br><img src=\"https://i.imgur.com/LzMdtAN.png\" alt=\"Image\"><br>前面提到的每日任務，是我個人蠻喜歡的一個部份。老師設計了一個故事情境並融入 JavaScript 與 Vue.js 的運用，讓我在不知不覺中越來越進步（雖然有些情境是滿扯的啦😄）。然後每週主線任務也是漸進式的讓我們從關注點分離運用在 JavaScript 的規劃，進而帶到目前主流的 JavaScript 前端框架之一 — <strong>Vue.js</strong>。然後讓我們學會了串 api，自己規劃一個電商網站的後台與前台。</p>\n<h2 id=\"最大的收獲是？\"><a href=\"#最大的收獲是？\" class=\"headerlink\" title=\"最大的收獲是？\"></a>最大的收獲是？</h2><p>其實上直播班的最大好處是可以感受到老師跟助教們擁有實戰經驗的教學，有什麼問題只要在 Slack 發問，就會很快得到如何處理 bug 的方法（懷疑他們 484 隨時掛在線上），有時候問的問題也會被其他有經驗的同學幫忙解答，還會跟組員討論那個部份怎樣做，這個地方要注意什麼細節，這時候就會覺得自己在這條學習的路上並不孤單，有著跟志同道合的夥伴講著相同的語言的美好氛圍。<br>雖然現在的我還是一個在前端領域的小人物，但是回首過去，其實我為自己跨出這一大步而感到驕傲。<br><img src=\"https://images.unsplash.com/photo-1438783122414-75b2c084bd44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1189&q=80\" alt=\"Image\"></p>"},{"title":"ES6 好用語法 - 箭頭函式","date":"2020-09-19T09:40:54.000Z","keywords":["ES6","箭頭函式","arrow function"],"decription":"ES6 中好用語法，箭頭函式的使用。","_content":"在 ES6 中，有許多好用的語法可以使用，這篇就來介紹箭頭函式。\n<!--more-->\n\n## 前言\n\n最近買了一本書，書名是「**從 Hooks 開始讓你的網頁 React 起來**」。其實我本來就一直對 React 很有興趣，雖然後來跑去學了 Vue.js，不過我內心對 React 還是有一份憧憬，而且也想要了解這兩者有什麼不同之處，所以就開始來試著學看看吧。\n\nReact 是目前 JavaScript 三大框架中之一，雖然它比較像是一個用來渲染 UI 組件的函式庫而不是一個框架 (Framwork)，不過在其生態圈下有許多好用的函式庫，所以要說它是框架也是可以的。\n\nReact 雖然很強大，但是要入門的門檻還是有的，至少你的 ES6 語法要夠熟悉，所以想要寫一些文章來熟悉一下我的 ES6，那麼就開始吧！\n\n## 箭頭函式 (Arrow Function)\n\n### 一般函式的寫法\n函式一般在 JavaScript 中的寫法可能會是這樣:\n\n```js\nfunction callName(name) {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n### 箭頭函式的寫法\n\n* 而箭頭函式的用法寫法如下:\n\n```js\nconst callName = (name) => {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n\n* 如果只有一個參數的話，則可省略小括號:\n\n```js\nconst callName = name => {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n\n* 如果只是要直接回傳一個值的話，就可以更精簡了，可以把大括號跟 return 去掉:\n\n```js\nconst calName = name => `my name is ${name}`;\n\ncallName('Bucky');\n```\n\n#### **箭頭函式特別注意的地方**\n\n* 回傳物件\n\n如果是要回傳一個物件的話，就要注意一下用法，在物件的大括號外面包一個小括號就可以了:\n\n```js\nconst myInfo = () => ({\n  name: 'Bucky',\n  age: 18,\n  skill: 'JavaScript',\n});\n\nmyInfo();\n```\n\n* 箭頭函式**沒有 arguments**\n\n看一下一般函式在 arguments 的使用：\n```js\nfunction testScore() {\n  console.log(arguments);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // 得到 // [60, 59, 68, 44, 92, 85]\n```\n如果用箭頭函式的話，則是會報錯：\n```js\nconst testScore = () => {\n  console.log(arguments);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // arguments is not defined\n\n// 如果要使用的話，可以使用其餘參數：\nconst testScore = (...arg) => {\n  console.log(arg);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // [60, 59, 68, 44, 92, 85]\n```\n\n* 沒有自己的 this\n\n一般函式的操作：\n```js\nvar name = 'Cris';\nvar data = {\n  name: 'Bucky',\n  callName() {\n    console.log(`1st this is ${this.name}`);\n    setTimeout(function(){\n      console.log(`2nd this is ${this.name}`);\n    }, 50);\n  }\n}\ndata.callName();\n// 得到 \"1st this is Bucky\" \"2nd this is Cris\"\n```\n\n使用箭頭函式：\n```js\nvar name = 'Cris';\nvar data = {\n  name: 'Bucky',\n  callName: () => {\n    console.log(`1st this is ${this.name}`);\n    setTimeout(() => {\n      console.log(`2nd this is ${this.name}`);\n    }, 50);\n  }\n}\ndata.callName(); // 兩個都會指向 Cris\n\n// 解決方法是，在 method 不要使用 arrow function\nvar data = {\n  name: 'Bucky',\n  callName() {\n    const self = this;\n    console.log(`1st this is ${this.name}`);\n    setTimeout(() => {\n      console.log(`2nd this is ${self.name}`);\n    }, 50);\n  }\n}\ndata.callName(); // 兩個都會指向 Bucky\n```\n\n* 可以使用箭頭函式的時機\n\n前面提到的雷都是關於 this，那麼有沒有適合箭頭函式的時機呢？\n是有的，如果是在 立即函式 (IIFE) 的話，就可以正常運作，也不用另外宣告變數來代替 this，例如：\n```js\nconst data = {\n  name: 'Bucky',\n  callName() {\n    console.log(`1st this is ${this.name}`);\n    (() => { console.log(`2nd this is ${this.name}`); })()\n  }\n}\ndata.callName(); // 兩個都會指向 Bucky\n```\n### 練習\n\n學了一點皮毛後，那麼來練習一下吧～\n把以下的所有函式都改成箭頭函式看看：\n\n```js\n// 題目：1\nfunction sum(a, b) {\n  var c = a + b;\n  return c;\n}\nconsole.log(sum(5, 6));\n\n// 題目：2\nfunction square(num) {\n  return num * num;\n}1\nvar d = square(5);\nconsole.log(d);\n\n// 題目：3\nsetTimeout(function() {\n  console.log('延遲 10 毫秒');\n}, 10);\n\n// 題目：4\nvar arr = [1, 2, 3];\nvar arr2 = arr.map(function(item, i) {\n  return item * 2;\n});\nconsole.log(arr2);\n\n// 題目：5\nvar obj = {\n  fn: function fn2(a) {\n    return a * a;\n  }\n}\nconsole.log(obj.fn(10));\n```\n\n以下是我的答案：\n\n```js\n// 1. Ans:\nconst sum = (a, b) => a + b;\n\nconsole.log(sum(5, 6));\n\n// 2. Ans:\nconst square = num => num * num;\nconst d = square(5);\nconsole.log(d);\n\n// 3. Ans:\nsetTimeout(() => console.log('延遲 10 毫秒'), 10);\n\n// 4. Ans:\nconst arr = [1, 2, 3];\nconst arr2 = arr.map((item, i) => item * 2);\nconsole.log(arr2);\n\n// 5. Ans:\nconst obj = {\n  fn: (a) => a * a,\n}\n\nconsole.log(obj.fn(10));\n```","source":"_posts/arrow-function-es6.md","raw":"---\ntitle: ES6 好用語法 - 箭頭函式\ntags:\n  - ES6\n  - 箭頭函式\n  - arrow function\ndate: 2020-09-19 17:40:54\ncategories: ES6 好用語法\nkeywords: \n  - ES6\n  - 箭頭函式\n  - arrow function\ndecription: ES6 中好用語法，箭頭函式的使用。\n---\n在 ES6 中，有許多好用的語法可以使用，這篇就來介紹箭頭函式。\n<!--more-->\n\n## 前言\n\n最近買了一本書，書名是「**從 Hooks 開始讓你的網頁 React 起來**」。其實我本來就一直對 React 很有興趣，雖然後來跑去學了 Vue.js，不過我內心對 React 還是有一份憧憬，而且也想要了解這兩者有什麼不同之處，所以就開始來試著學看看吧。\n\nReact 是目前 JavaScript 三大框架中之一，雖然它比較像是一個用來渲染 UI 組件的函式庫而不是一個框架 (Framwork)，不過在其生態圈下有許多好用的函式庫，所以要說它是框架也是可以的。\n\nReact 雖然很強大，但是要入門的門檻還是有的，至少你的 ES6 語法要夠熟悉，所以想要寫一些文章來熟悉一下我的 ES6，那麼就開始吧！\n\n## 箭頭函式 (Arrow Function)\n\n### 一般函式的寫法\n函式一般在 JavaScript 中的寫法可能會是這樣:\n\n```js\nfunction callName(name) {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n### 箭頭函式的寫法\n\n* 而箭頭函式的用法寫法如下:\n\n```js\nconst callName = (name) => {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n\n* 如果只有一個參數的話，則可省略小括號:\n\n```js\nconst callName = name => {\n  return `my name is ${name}`;\n}\n\ncallName('Bucky');\n```\n\n* 如果只是要直接回傳一個值的話，就可以更精簡了，可以把大括號跟 return 去掉:\n\n```js\nconst calName = name => `my name is ${name}`;\n\ncallName('Bucky');\n```\n\n#### **箭頭函式特別注意的地方**\n\n* 回傳物件\n\n如果是要回傳一個物件的話，就要注意一下用法，在物件的大括號外面包一個小括號就可以了:\n\n```js\nconst myInfo = () => ({\n  name: 'Bucky',\n  age: 18,\n  skill: 'JavaScript',\n});\n\nmyInfo();\n```\n\n* 箭頭函式**沒有 arguments**\n\n看一下一般函式在 arguments 的使用：\n```js\nfunction testScore() {\n  console.log(arguments);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // 得到 // [60, 59, 68, 44, 92, 85]\n```\n如果用箭頭函式的話，則是會報錯：\n```js\nconst testScore = () => {\n  console.log(arguments);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // arguments is not defined\n\n// 如果要使用的話，可以使用其餘參數：\nconst testScore = (...arg) => {\n  console.log(arg);\n}\n\ntestScore(60, 59, 68, 44, 92, 85); // [60, 59, 68, 44, 92, 85]\n```\n\n* 沒有自己的 this\n\n一般函式的操作：\n```js\nvar name = 'Cris';\nvar data = {\n  name: 'Bucky',\n  callName() {\n    console.log(`1st this is ${this.name}`);\n    setTimeout(function(){\n      console.log(`2nd this is ${this.name}`);\n    }, 50);\n  }\n}\ndata.callName();\n// 得到 \"1st this is Bucky\" \"2nd this is Cris\"\n```\n\n使用箭頭函式：\n```js\nvar name = 'Cris';\nvar data = {\n  name: 'Bucky',\n  callName: () => {\n    console.log(`1st this is ${this.name}`);\n    setTimeout(() => {\n      console.log(`2nd this is ${this.name}`);\n    }, 50);\n  }\n}\ndata.callName(); // 兩個都會指向 Cris\n\n// 解決方法是，在 method 不要使用 arrow function\nvar data = {\n  name: 'Bucky',\n  callName() {\n    const self = this;\n    console.log(`1st this is ${this.name}`);\n    setTimeout(() => {\n      console.log(`2nd this is ${self.name}`);\n    }, 50);\n  }\n}\ndata.callName(); // 兩個都會指向 Bucky\n```\n\n* 可以使用箭頭函式的時機\n\n前面提到的雷都是關於 this，那麼有沒有適合箭頭函式的時機呢？\n是有的，如果是在 立即函式 (IIFE) 的話，就可以正常運作，也不用另外宣告變數來代替 this，例如：\n```js\nconst data = {\n  name: 'Bucky',\n  callName() {\n    console.log(`1st this is ${this.name}`);\n    (() => { console.log(`2nd this is ${this.name}`); })()\n  }\n}\ndata.callName(); // 兩個都會指向 Bucky\n```\n### 練習\n\n學了一點皮毛後，那麼來練習一下吧～\n把以下的所有函式都改成箭頭函式看看：\n\n```js\n// 題目：1\nfunction sum(a, b) {\n  var c = a + b;\n  return c;\n}\nconsole.log(sum(5, 6));\n\n// 題目：2\nfunction square(num) {\n  return num * num;\n}1\nvar d = square(5);\nconsole.log(d);\n\n// 題目：3\nsetTimeout(function() {\n  console.log('延遲 10 毫秒');\n}, 10);\n\n// 題目：4\nvar arr = [1, 2, 3];\nvar arr2 = arr.map(function(item, i) {\n  return item * 2;\n});\nconsole.log(arr2);\n\n// 題目：5\nvar obj = {\n  fn: function fn2(a) {\n    return a * a;\n  }\n}\nconsole.log(obj.fn(10));\n```\n\n以下是我的答案：\n\n```js\n// 1. Ans:\nconst sum = (a, b) => a + b;\n\nconsole.log(sum(5, 6));\n\n// 2. Ans:\nconst square = num => num * num;\nconst d = square(5);\nconsole.log(d);\n\n// 3. Ans:\nsetTimeout(() => console.log('延遲 10 毫秒'), 10);\n\n// 4. Ans:\nconst arr = [1, 2, 3];\nconst arr2 = arr.map((item, i) => item * 2);\nconsole.log(arr2);\n\n// 5. Ans:\nconst obj = {\n  fn: (a) => a * a,\n}\n\nconsole.log(obj.fn(10));\n```","slug":"arrow-function-es6","published":1,"updated":"2020-09-21T13:14:05.443Z","_id":"ckf9kpwi00000pju72bgh19ve","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 ES6 中，有許多好用的語法可以使用，這篇就來介紹箭頭函式。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近買了一本書，書名是「<strong>從 Hooks 開始讓你的網頁 React 起來</strong>」。其實我本來就一直對 React 很有興趣，雖然後來跑去學了 Vue.js，不過我內心對 React 還是有一份憧憬，而且也想要了解這兩者有什麼不同之處，所以就開始來試著學看看吧。</p>\n<p>React 是目前 JavaScript 三大框架中之一，雖然它比較像是一個用來渲染 UI 組件的函式庫而不是一個框架 (Framwork)，不過在其生態圈下有許多好用的函式庫，所以要說它是框架也是可以的。</p>\n<p>React 雖然很強大，但是要入門的門檻還是有的，至少你的 ES6 語法要夠熟悉，所以想要寫一些文章來熟悉一下我的 ES6，那麼就開始吧！</p>\n<h2 id=\"箭頭函式-Arrow-Function\"><a href=\"#箭頭函式-Arrow-Function\" class=\"headerlink\" title=\"箭頭函式 (Arrow Function)\"></a>箭頭函式 (Arrow Function)</h2><h3 id=\"一般函式的寫法\"><a href=\"#一般函式的寫法\" class=\"headerlink\" title=\"一般函式的寫法\"></a>一般函式的寫法</h3><p>函式一般在 JavaScript 中的寫法可能會是這樣:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭頭函式的寫法\"><a href=\"#箭頭函式的寫法\" class=\"headerlink\" title=\"箭頭函式的寫法\"></a>箭頭函式的寫法</h3><ul>\n<li>而箭頭函式的用法寫法如下:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callName = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果只有一個參數的話，則可省略小括號:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callName = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果只是要直接回傳一個值的話，就可以更精簡了，可以把大括號跟 return 去掉:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> calName = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭頭函式特別注意的地方\"><a href=\"#箭頭函式特別注意的地方\" class=\"headerlink\" title=\"箭頭函式特別注意的地方\"></a><strong>箭頭函式特別注意的地方</strong></h4><ul>\n<li>回傳物件</li>\n</ul>\n<p>如果是要回傳一個物件的話，就要注意一下用法，在物件的大括號外面包一個小括號就可以了:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myInfo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  skill: <span class=\"string\">'JavaScript'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">myInfo();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>箭頭函式<strong>沒有 arguments</strong></li>\n</ul>\n<p>看一下一般函式在 arguments 的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// 得到 // [60, 59, 68, 44, 92, 85]</span></span><br></pre></td></tr></table></figure>\n<p>如果用箭頭函式的話，則是會報錯：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testScore = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// arguments is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果要使用的話，可以使用其餘參數：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> testScore = <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// [60, 59, 68, 44, 92, 85]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>沒有自己的 this</li>\n</ul>\n<p>一般函式的操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cris'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName();</span><br><span class=\"line\"><span class=\"comment\">// 得到 \"1st this is Bucky\" \"2nd this is Cris\"</span></span><br></pre></td></tr></table></figure>\n\n<p>使用箭頭函式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cris'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Cris</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解決方法是，在 method 不要使用 arrow function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;self.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Bucky</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以使用箭頭函式的時機</li>\n</ul>\n<p>前面提到的雷都是關於 this，那麼有沒有適合箭頭函式的時機呢？<br>是有的，如果是在 立即函式 (IIFE) 的話，就可以正常運作，也不用另外宣告變數來代替 this，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>); &#125;)()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Bucky</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"練習\"><a href=\"#練習\" class=\"headerlink\" title=\"練習\"></a>練習</h3><p>學了一點皮毛後，那麼來練習一下吧～<br>把以下的所有函式都改成箭頭函式看看：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 題目：1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num * num;</span><br><span class=\"line\">&#125;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = square(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：3</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'延遲 10 毫秒'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fn(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<p>以下是我的答案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num * num;</span><br><span class=\"line\"><span class=\"keyword\">const</span> d = square(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Ans:</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'延遲 10 毫秒'</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  fn: <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a * a,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fn(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在 ES6 中，有許多好用的語法可以使用，這篇就來介紹箭頭函式。</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近買了一本書，書名是「<strong>從 Hooks 開始讓你的網頁 React 起來</strong>」。其實我本來就一直對 React 很有興趣，雖然後來跑去學了 Vue.js，不過我內心對 React 還是有一份憧憬，而且也想要了解這兩者有什麼不同之處，所以就開始來試著學看看吧。</p>\n<p>React 是目前 JavaScript 三大框架中之一，雖然它比較像是一個用來渲染 UI 組件的函式庫而不是一個框架 (Framwork)，不過在其生態圈下有許多好用的函式庫，所以要說它是框架也是可以的。</p>\n<p>React 雖然很強大，但是要入門的門檻還是有的，至少你的 ES6 語法要夠熟悉，所以想要寫一些文章來熟悉一下我的 ES6，那麼就開始吧！</p>\n<h2 id=\"箭頭函式-Arrow-Function\"><a href=\"#箭頭函式-Arrow-Function\" class=\"headerlink\" title=\"箭頭函式 (Arrow Function)\"></a>箭頭函式 (Arrow Function)</h2><h3 id=\"一般函式的寫法\"><a href=\"#一般函式的寫法\" class=\"headerlink\" title=\"一般函式的寫法\"></a>一般函式的寫法</h3><p>函式一般在 JavaScript 中的寫法可能會是這樣:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"箭頭函式的寫法\"><a href=\"#箭頭函式的寫法\" class=\"headerlink\" title=\"箭頭函式的寫法\"></a>箭頭函式的寫法</h3><ul>\n<li>而箭頭函式的用法寫法如下:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callName = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果只有一個參數的話，則可省略小括號:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callName = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果只是要直接回傳一個值的話，就可以更精簡了，可以把大括號跟 return 去掉:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> calName = <span class=\"function\"><span class=\"params\">name</span> =&gt;</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">callName(<span class=\"string\">'Bucky'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"箭頭函式特別注意的地方\"><a href=\"#箭頭函式特別注意的地方\" class=\"headerlink\" title=\"箭頭函式特別注意的地方\"></a><strong>箭頭函式特別注意的地方</strong></h4><ul>\n<li>回傳物件</li>\n</ul>\n<p>如果是要回傳一個物件的話，就要注意一下用法，在物件的大括號外面包一個小括號就可以了:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myInfo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  skill: <span class=\"string\">'JavaScript'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">myInfo();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>箭頭函式<strong>沒有 arguments</strong></li>\n</ul>\n<p>看一下一般函式在 arguments 的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testScore</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// 得到 // [60, 59, 68, 44, 92, 85]</span></span><br></pre></td></tr></table></figure>\n<p>如果用箭頭函式的話，則是會報錯：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> testScore = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// arguments is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果要使用的話，可以使用其餘參數：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> testScore = <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testScore(<span class=\"number\">60</span>, <span class=\"number\">59</span>, <span class=\"number\">68</span>, <span class=\"number\">44</span>, <span class=\"number\">92</span>, <span class=\"number\">85</span>); <span class=\"comment\">// [60, 59, 68, 44, 92, 85]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>沒有自己的 this</li>\n</ul>\n<p>一般函式的操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cris'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName();</span><br><span class=\"line\"><span class=\"comment\">// 得到 \"1st this is Bucky\" \"2nd this is Cris\"</span></span><br></pre></td></tr></table></figure>\n\n<p>使用箭頭函式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cris'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Cris</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解決方法是，在 method 不要使用 arrow function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;self.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Bucky</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以使用箭頭函式的時機</li>\n</ul>\n<p>前面提到的雷都是關於 this，那麼有沒有適合箭頭函式的時機呢？<br>是有的，如果是在 立即函式 (IIFE) 的話，就可以正常運作，也不用另外宣告變數來代替 this，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bucky'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`1st this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">`2nd this is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>`</span>); &#125;)()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.callName(); <span class=\"comment\">// 兩個都會指向 Bucky</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"練習\"><a href=\"#練習\" class=\"headerlink\" title=\"練習\"></a>練習</h3><p>學了一點皮毛後，那麼來練習一下吧～<br>把以下的所有函式都改成箭頭函式看看：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 題目：1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num * num;</span><br><span class=\"line\">&#125;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = square(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：3</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'延遲 10 毫秒'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：4</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 題目：5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fn(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<p>以下是我的答案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">5</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> square = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num * num;</span><br><span class=\"line\"><span class=\"keyword\">const</span> d = square(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Ans:</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'延遲 10 毫秒'</span>), <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = arr.map(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> item * <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. Ans:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  fn: <span class=\"function\">(<span class=\"params\">a</span>) =&gt;</span> a * a,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.fn(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>"},{"_content":"## 物件結構\n\nvar family = {      // 物件實字\n\tproperty: value,\n\tproperty2: value,\n\tname: 'Ed',\n\tage: 18,\n\tmember: {\n\t\tmom: '老媽',\n\t\t\n\t} \n}; \n","source":"_posts/物件結構.md","raw":"## 物件結構\n\nvar family = {      // 物件實字\n\tproperty: value,\n\tproperty2: value,\n\tname: 'Ed',\n\tage: 18,\n\tmember: {\n\t\tmom: '老媽',\n\t\t\n\t} \n}; \n","slug":"物件結構","published":1,"date":"2020-06-03T14:44:41.000Z","updated":"2020-06-03T14:44:41.000Z","title":"物件結構","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf9kpwji0009pju7ektg2s5s","content":"<h2 id=\"物件結構\"><a href=\"#物件結構\" class=\"headerlink\" title=\"物件結構\"></a>物件結構</h2><p>var family = {      // 物件實字<br>    property: value,<br>    property2: value,<br>    name: ‘Ed’,<br>    age: 18,<br>    member: {<br>        mom: ‘老媽’,</p>\n<pre><code>} </code></pre><p>}; </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"物件結構\"><a href=\"#物件結構\" class=\"headerlink\" title=\"物件結構\"></a>物件結構</h2><p>var family = {      // 物件實字<br>    property: value,<br>    property2: value,<br>    name: ‘Ed’,<br>    age: 18,<br>    member: {<br>        mom: ‘老媽’,</p>\n<pre><code>} </code></pre><p>}; </p>\n"},{"title":"SCSS 變數運用","date":"2020-09-20T12:23:38.000Z","keywords":["sass","scss","variable","darken","lighten"],"decription":"SCSS 的變數運用、數值運算、字串使用、darken、lighten 的用法。","_content":"說來慚愧，立志成為一名前端工程師的我，只會純 CSS 跟框架來幫網頁做樣式，對於 SASS 這個好用的語言工具卻是知道的不多，所以想趁有時間來學一下 SASS，就開了這個學習筆記系列。\n<!--more-->\n\n## 何謂 SASS？\n根據[維基百科中](https://zh.wikipedia.org/wiki/Sass)介紹，SASS 全名為 **S**yntactically **A**wesome **S**tyle**s**heets，是一個將指令碼解析成 CSS 的手稿語言，也就是 SassScript。SASS 有兩種語法，一種是 SASS，另一種是 SCSS，那麼兩種有什麼差別呢？\n\n這是 SCSS 的寫法：\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"scss sample\" src=\"https://codepen.io/bucky0112/embed/OJNBqGK?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/OJNBqGK'>scss sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n這是 SASS 的寫法：\n<iframe height=\"280\" style=\"width: 100%;\" scrolling=\"no\" title=\"sass sample\" src=\"https://codepen.io/bucky0112/embed/XWdxGwe?height=280&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/XWdxGwe'>sass sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n跟普通的 CSS 相比，SCSS 是相對好入門的寫法，在相同架構下，例如 li 就可以寫在 ul 中，而且寫法差不多；而 SASS 看起來架構也一樣，差別在於完全沒有大括號跟分號，感覺很適合懶人的寫法。\n不過我似乎很少看到有人使用 SASS，也許是我孤陋寡聞，看的東西不夠多qq。所以為了避免未來協作實務上的困難，所以我之後的實用還是會以 SCSS 為主。\n\n## 變數運用\n前面稍微簡單介紹一下 SCSS 語法之間的差異，這裡就要來講一下 SCSS 好用的地方 - **變數**。\n\n在寫 CSS 時，有時候會遇到文字或是區塊共用同樣的顏色，例如下方例子：\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"same color\" src=\"https://codepen.io/bucky0112/embed/JjXmVjZ?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/JjXmVjZ'>same color</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如果遇到需要改變顏色的需求時，可能就得要一個一個更換。\n不過在 SCSS 就可以運用到變數的概念，設定變數也很簡單，一個錢字符號加上變數的名稱，後面設定想要的效果，例如：\n\n```scss\n// 設定字型大小\n$size-xl: 40px;\n// 設定字型顏色\n$font-color: red;\n\n.header {\n  font-size: $size-xl;\n  color: $font-color;\n}\n\n.content {\n  font-size: $size-xl;\n  color: $font-color;\n}\n\n.footer {\n  font-size: $size-xl;\n  color: $font-color;\n}\n```\n\n以上就可以一口氣更換大量的效果，如果想要再改的話，只要變更變數的值就可以了，非常靈活。\n\n## SCSS 變數做加減乘除好方便\n傳統 CSS 要做數值運算的話，得要透過 `calc()` 才能做到，不過在 SCSS 中的變數，很輕易的就可以做到跟一般的程式語言一樣的數值運算，例如：\n\n```scss\n// 設定一個基準\n$font-m: 20px;\n// 將基準 * 2\n$font-l: $font-m * 2;\n\nh1 {\n  font-size: $font-l;\n}\n\np {\n  font-size: $font-m;\n}\n```\n\n## 字串運用\n變數在 SCSS 中也可以做一般程式語言字串的使用，例如：\n\n```scss\n@import url('https://fonts.googleapis.com/css2?family=Kufam&display=swap');\n$font-family-base: 'Kufam', cursive;\n\nh1 {\n  font-family: $font-family-base;\n}\n\np {\n  font-family: $font-family-base;\n}\n```\n\n## 透過 darken、lighten 來調顏色\ndarken、lighten 是 SCSS 內建的功能，可以用來微調顏色，是一個非常有趣的功能，使用方法是 `darken(orange, 10%);`，這樣就可以將 orange 的顏色調深 10%，反之 lighten 就是調淺，例如：\n```scss\n$bg-red: red;\n$bg-green: green;\n\nh1 {\n  background-color: lighten($bg-red, 30%);\n}\n\np {\n  background-color: darken($bg-green, 10%);\n}\n\nspan {\n  background-color: darken(orange, 10%);\n}\n```\n","source":"_posts/scss-variable.md","raw":"---\ntitle: SCSS 變數運用\ntags:\n  - sass\n  - scss\n  - variable\ndate: 2020-09-20 20:23:38\ncategories: SCSS 學習筆記\nkeywords: \n  - sass\n  - scss\n  - variable\n  - darken\n  - lighten\ndecription: SCSS 的變數運用、數值運算、字串使用、darken、lighten 的用法。\n---\n說來慚愧，立志成為一名前端工程師的我，只會純 CSS 跟框架來幫網頁做樣式，對於 SASS 這個好用的語言工具卻是知道的不多，所以想趁有時間來學一下 SASS，就開了這個學習筆記系列。\n<!--more-->\n\n## 何謂 SASS？\n根據[維基百科中](https://zh.wikipedia.org/wiki/Sass)介紹，SASS 全名為 **S**yntactically **A**wesome **S**tyle**s**heets，是一個將指令碼解析成 CSS 的手稿語言，也就是 SassScript。SASS 有兩種語法，一種是 SASS，另一種是 SCSS，那麼兩種有什麼差別呢？\n\n這是 SCSS 的寫法：\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"scss sample\" src=\"https://codepen.io/bucky0112/embed/OJNBqGK?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/OJNBqGK'>scss sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n這是 SASS 的寫法：\n<iframe height=\"280\" style=\"width: 100%;\" scrolling=\"no\" title=\"sass sample\" src=\"https://codepen.io/bucky0112/embed/XWdxGwe?height=280&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/XWdxGwe'>sass sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n跟普通的 CSS 相比，SCSS 是相對好入門的寫法，在相同架構下，例如 li 就可以寫在 ul 中，而且寫法差不多；而 SASS 看起來架構也一樣，差別在於完全沒有大括號跟分號，感覺很適合懶人的寫法。\n不過我似乎很少看到有人使用 SASS，也許是我孤陋寡聞，看的東西不夠多qq。所以為了避免未來協作實務上的困難，所以我之後的實用還是會以 SCSS 為主。\n\n## 變數運用\n前面稍微簡單介紹一下 SCSS 語法之間的差異，這裡就要來講一下 SCSS 好用的地方 - **變數**。\n\n在寫 CSS 時，有時候會遇到文字或是區塊共用同樣的顏色，例如下方例子：\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"same color\" src=\"https://codepen.io/bucky0112/embed/JjXmVjZ?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/JjXmVjZ'>same color</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112'>@bucky0112</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n如果遇到需要改變顏色的需求時，可能就得要一個一個更換。\n不過在 SCSS 就可以運用到變數的概念，設定變數也很簡單，一個錢字符號加上變數的名稱，後面設定想要的效果，例如：\n\n```scss\n// 設定字型大小\n$size-xl: 40px;\n// 設定字型顏色\n$font-color: red;\n\n.header {\n  font-size: $size-xl;\n  color: $font-color;\n}\n\n.content {\n  font-size: $size-xl;\n  color: $font-color;\n}\n\n.footer {\n  font-size: $size-xl;\n  color: $font-color;\n}\n```\n\n以上就可以一口氣更換大量的效果，如果想要再改的話，只要變更變數的值就可以了，非常靈活。\n\n## SCSS 變數做加減乘除好方便\n傳統 CSS 要做數值運算的話，得要透過 `calc()` 才能做到，不過在 SCSS 中的變數，很輕易的就可以做到跟一般的程式語言一樣的數值運算，例如：\n\n```scss\n// 設定一個基準\n$font-m: 20px;\n// 將基準 * 2\n$font-l: $font-m * 2;\n\nh1 {\n  font-size: $font-l;\n}\n\np {\n  font-size: $font-m;\n}\n```\n\n## 字串運用\n變數在 SCSS 中也可以做一般程式語言字串的使用，例如：\n\n```scss\n@import url('https://fonts.googleapis.com/css2?family=Kufam&display=swap');\n$font-family-base: 'Kufam', cursive;\n\nh1 {\n  font-family: $font-family-base;\n}\n\np {\n  font-family: $font-family-base;\n}\n```\n\n## 透過 darken、lighten 來調顏色\ndarken、lighten 是 SCSS 內建的功能，可以用來微調顏色，是一個非常有趣的功能，使用方法是 `darken(orange, 10%);`，這樣就可以將 orange 的顏色調深 10%，反之 lighten 就是調淺，例如：\n```scss\n$bg-red: red;\n$bg-green: green;\n\nh1 {\n  background-color: lighten($bg-red, 30%);\n}\n\np {\n  background-color: darken($bg-green, 10%);\n}\n\nspan {\n  background-color: darken(orange, 10%);\n}\n```\n","slug":"scss-variable","published":1,"updated":"2020-09-20T12:29:22.264Z","_id":"ckfb2ttrx00008mu7fqok4y4j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>說來慚愧，立志成為一名前端工程師的我，只會純 CSS 跟框架來幫網頁做樣式，對於 SASS 這個好用的語言工具卻是知道的不多，所以想趁有時間來學一下 SASS，就開了這個學習筆記系列。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"何謂-SASS？\"><a href=\"#何謂-SASS？\" class=\"headerlink\" title=\"何謂 SASS？\"></a>何謂 SASS？</h2><p>根據<a href=\"https://zh.wikipedia.org/wiki/Sass\" target=\"_blank\" rel=\"noopener\">維基百科中</a>介紹，SASS 全名為 <strong>S</strong>yntactically <strong>A</strong>wesome <strong>S</strong>tyle<strong>s</strong>heets，是一個將指令碼解析成 CSS 的手稿語言，也就是 SassScript。SASS 有兩種語法，一種是 SASS，另一種是 SCSS，那麼兩種有什麼差別呢？</p>\n<p>這是 SCSS 的寫法：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"scss sample\" src=\"https://codepen.io/bucky0112/embed/OJNBqGK?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/OJNBqGK' target=\"_blank\" rel=\"noopener\">scss sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>這是 SASS 的寫法：</p>\n<iframe height=\"280\" style=\"width: 100%;\" scrolling=\"no\" title=\"sass sample\" src=\"https://codepen.io/bucky0112/embed/XWdxGwe?height=280&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/XWdxGwe' target=\"_blank\" rel=\"noopener\">sass sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>跟普通的 CSS 相比，SCSS 是相對好入門的寫法，在相同架構下，例如 li 就可以寫在 ul 中，而且寫法差不多；而 SASS 看起來架構也一樣，差別在於完全沒有大括號跟分號，感覺很適合懶人的寫法。<br>不過我似乎很少看到有人使用 SASS，也許是我孤陋寡聞，看的東西不夠多qq。所以為了避免未來協作實務上的困難，所以我之後的實用還是會以 SCSS 為主。</p>\n<h2 id=\"變數運用\"><a href=\"#變數運用\" class=\"headerlink\" title=\"變數運用\"></a>變數運用</h2><p>前面稍微簡單介紹一下 SCSS 語法之間的差異，這裡就要來講一下 SCSS 好用的地方 - <strong>變數</strong>。</p>\n<p>在寫 CSS 時，有時候會遇到文字或是區塊共用同樣的顏色，例如下方例子：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"same color\" src=\"https://codepen.io/bucky0112/embed/JjXmVjZ?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/JjXmVjZ' target=\"_blank\" rel=\"noopener\">same color</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>如果遇到需要改變顏色的需求時，可能就得要一個一個更換。<br>不過在 SCSS 就可以運用到變數的概念，設定變數也很簡單，一個錢字符號加上變數的名稱，後面設定想要的效果，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設定字型大小</span></span><br><span class=\"line\"><span class=\"variable\">$size-xl</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"comment\">// 設定字型顏色</span></span><br><span class=\"line\"><span class=\"variable\">$font-color</span>: red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就可以一口氣更換大量的效果，如果想要再改的話，只要變更變數的值就可以了，非常靈活。</p>\n<h2 id=\"SCSS-變數做加減乘除好方便\"><a href=\"#SCSS-變數做加減乘除好方便\" class=\"headerlink\" title=\"SCSS 變數做加減乘除好方便\"></a>SCSS 變數做加減乘除好方便</h2><p>傳統 CSS 要做數值運算的話，得要透過 <code>calc()</code> 才能做到，不過在 SCSS 中的變數，很輕易的就可以做到跟一般的程式語言一樣的數值運算，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設定一個基準</span></span><br><span class=\"line\"><span class=\"variable\">$font-m</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"><span class=\"comment\">// 將基準 * 2</span></span><br><span class=\"line\"><span class=\"variable\">$font-l</span>: <span class=\"variable\">$font-m</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$font-l</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$font-m</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字串運用\"><a href=\"#字串運用\" class=\"headerlink\" title=\"字串運用\"></a>字串運用</h2><p>變數在 SCSS 中也可以做一般程式語言字串的使用，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">'https://fonts.googleapis.com/css2?family=Kufam&amp;display=swap'</span>);</span><br><span class=\"line\"><span class=\"variable\">$font-family-base</span>: <span class=\"string\">'Kufam'</span>, cursive;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-family-base</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-family-base</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-darken、lighten-來調顏色\"><a href=\"#透過-darken、lighten-來調顏色\" class=\"headerlink\" title=\"透過 darken、lighten 來調顏色\"></a>透過 darken、lighten 來調顏色</h2><p>darken、lighten 是 SCSS 內建的功能，可以用來微調顏色，是一個非常有趣的功能，使用方法是 <code>darken(orange, 10%);</code>，這樣就可以將 orange 的顏色調深 10%，反之 lighten 就是調淺，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$bg-red</span>: red;</span><br><span class=\"line\"><span class=\"variable\">$bg-green</span>: green;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lighten(<span class=\"variable\">$bg-red</span>, <span class=\"number\">30%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darken(<span class=\"variable\">$bg-green</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darken(orange, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>說來慚愧，立志成為一名前端工程師的我，只會純 CSS 跟框架來幫網頁做樣式，對於 SASS 這個好用的語言工具卻是知道的不多，所以想趁有時間來學一下 SASS，就開了這個學習筆記系列。</p>","more":"<h2 id=\"何謂-SASS？\"><a href=\"#何謂-SASS？\" class=\"headerlink\" title=\"何謂 SASS？\"></a>何謂 SASS？</h2><p>根據<a href=\"https://zh.wikipedia.org/wiki/Sass\" target=\"_blank\" rel=\"noopener\">維基百科中</a>介紹，SASS 全名為 <strong>S</strong>yntactically <strong>A</strong>wesome <strong>S</strong>tyle<strong>s</strong>heets，是一個將指令碼解析成 CSS 的手稿語言，也就是 SassScript。SASS 有兩種語法，一種是 SASS，另一種是 SCSS，那麼兩種有什麼差別呢？</p>\n<p>這是 SCSS 的寫法：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"scss sample\" src=\"https://codepen.io/bucky0112/embed/OJNBqGK?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/OJNBqGK' target=\"_blank\" rel=\"noopener\">scss sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>這是 SASS 的寫法：</p>\n<iframe height=\"280\" style=\"width: 100%;\" scrolling=\"no\" title=\"sass sample\" src=\"https://codepen.io/bucky0112/embed/XWdxGwe?height=280&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/XWdxGwe' target=\"_blank\" rel=\"noopener\">sass sample</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>跟普通的 CSS 相比，SCSS 是相對好入門的寫法，在相同架構下，例如 li 就可以寫在 ul 中，而且寫法差不多；而 SASS 看起來架構也一樣，差別在於完全沒有大括號跟分號，感覺很適合懶人的寫法。<br>不過我似乎很少看到有人使用 SASS，也許是我孤陋寡聞，看的東西不夠多qq。所以為了避免未來協作實務上的困難，所以我之後的實用還是會以 SCSS 為主。</p>\n<h2 id=\"變數運用\"><a href=\"#變數運用\" class=\"headerlink\" title=\"變數運用\"></a>變數運用</h2><p>前面稍微簡單介紹一下 SCSS 語法之間的差異，這裡就要來講一下 SCSS 好用的地方 - <strong>變數</strong>。</p>\n<p>在寫 CSS 時，有時候會遇到文字或是區塊共用同樣的顏色，例如下方例子：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"same color\" src=\"https://codepen.io/bucky0112/embed/JjXmVjZ?height=265&theme-id=light&default-tab=css,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/JjXmVjZ' target=\"_blank\" rel=\"noopener\">same color</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>如果遇到需要改變顏色的需求時，可能就得要一個一個更換。<br>不過在 SCSS 就可以運用到變數的概念，設定變數也很簡單，一個錢字符號加上變數的名稱，後面設定想要的效果，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設定字型大小</span></span><br><span class=\"line\"><span class=\"variable\">$size-xl</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"comment\">// 設定字型顏色</span></span><br><span class=\"line\"><span class=\"variable\">$font-color</span>: red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$size-xl</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$font-color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就可以一口氣更換大量的效果，如果想要再改的話，只要變更變數的值就可以了，非常靈活。</p>\n<h2 id=\"SCSS-變數做加減乘除好方便\"><a href=\"#SCSS-變數做加減乘除好方便\" class=\"headerlink\" title=\"SCSS 變數做加減乘除好方便\"></a>SCSS 變數做加減乘除好方便</h2><p>傳統 CSS 要做數值運算的話，得要透過 <code>calc()</code> 才能做到，不過在 SCSS 中的變數，很輕易的就可以做到跟一般的程式語言一樣的數值運算，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設定一個基準</span></span><br><span class=\"line\"><span class=\"variable\">$font-m</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"><span class=\"comment\">// 將基準 * 2</span></span><br><span class=\"line\"><span class=\"variable\">$font-l</span>: <span class=\"variable\">$font-m</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$font-l</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$font-m</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字串運用\"><a href=\"#字串運用\" class=\"headerlink\" title=\"字串運用\"></a>字串運用</h2><p>變數在 SCSS 中也可以做一般程式語言字串的使用，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">'https://fonts.googleapis.com/css2?family=Kufam&amp;display=swap'</span>);</span><br><span class=\"line\"><span class=\"variable\">$font-family-base</span>: <span class=\"string\">'Kufam'</span>, cursive;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-family-base</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-family-base</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-darken、lighten-來調顏色\"><a href=\"#透過-darken、lighten-來調顏色\" class=\"headerlink\" title=\"透過 darken、lighten 來調顏色\"></a>透過 darken、lighten 來調顏色</h2><p>darken、lighten 是 SCSS 內建的功能，可以用來微調顏色，是一個非常有趣的功能，使用方法是 <code>darken(orange, 10%);</code>，這樣就可以將 orange 的顏色調深 10%，反之 lighten 就是調淺，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$bg-red</span>: red;</span><br><span class=\"line\"><span class=\"variable\">$bg-green</span>: green;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lighten(<span class=\"variable\">$bg-red</span>, <span class=\"number\">30%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darken(<span class=\"variable\">$bg-green</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darken(orange, <span class=\"number\">10%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ES6 好用語法 - 解構賦值","date":"2020-09-21T14:12:52.000Z","keywords":["ES6","解構賦值","destructuring assignment"],"decription":"ES6 中好用語法，解構賦值的使用。","_content":"懶得定義一樣的值嗎？來試試複製大法吧～\n<!--more-->\n## 解構賦值 (Destructuring assignment)\n在 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) 中的介紹為 - **解構賦值**語法是一種 JavaScript 運算式，可以把陣列或物件中的資料解開擷取成為獨立變數。\n\n## 陣列解構\n一般如果想要把陣列中的資料給複製並建立一個新的變數的話，可能會這樣做：\n```js\nconst winter_is_comming = ['December', 'January', 'February'];\n\nconst winter_1st_month = winter_is_comming[0];\nconst winter_2nd_month = winter_is_comming[1];\nconst winter_3rd_month = winter_is_comming[2];\n```\n\n如果透過解構的話，作法有點像是把右邊的值給複製進去給左邊的變數一樣，可以這樣做：\n```js\nconst winter_is_comming = ['December', 'January', 'February'];\n\nconst [winter_1st_month, winter_2nd_month, winter_3rd_month] = winter_is_comming;\n```\n\n接著來練習一下：\n```js\n// 使用解構組合使 arr2 變成為 [1, 2, 3, 4, 5, 6] 的結果\nconst arr = [1, 2, 3];\nconst arr2 = [...arr, 4, 5, 6]; // arr2 = [1, 2, 3, 4, 5, 6]\n// ---------------------------------------------------------\n// 使用解構組合將以下兩個陣列為 [1, 2, 3, 4, 5, 6] 的結果\nconst nums1 = [1, 2, 3];\nconst nums2 = [4, 5, 6];\nconst nums3 = [...nums1, ...nums2]; // nums3 = [1, 2, 3, 4, 5, 6]\n// ---------------------------------------------------------\n// 使用解構組合將 a、b、c 三個變數的值分別設為 'angular', 'react', 'vue'\nconst jsFramwork = ['angular', 'react', 'vue'];\nconst [a, b, c] = jsFramwork; // a = 'angular'; b = 'react'; c = 'vue';\n// ---------------------------------------------------------\n// 請使用解構，將以下陣列分別取出為獨立變數 Hua, Xion, Ming, Mei\nconst people = ['小花', '大雄', '大明', '小美'];\nconst [Hua, Xion, Ming, Mei] = people;\nconsole.log(Hua, Xion, Ming, Mei);\n```\n\n\n## 物件解構\n物件的解構賦值用法也差不多，看下面例子：\n```js\n// 請使用解構，取出 name 及 age 的變數\nconst person = {\n  name: '小明',\n  age: 16\n}\nconst { name, age } = person;\nconsole.log(name, age);\n```\n\n使用的時機主要是在可能透過 api 抓取到資料的時候，如果想要拿到某些值來使用，就可以透過這個方法。\n\n### 進階使用方法\n\n* 取出物件中的物件\n如果想拿到物件中的物件的話，也是辦得到的，例如：\n```js\nconst person = {\n\tname: '小明',\n  age: 16,\n\tskills: {\n    front: 'JavaScript',\n    back: 'Ruby',\n\t},\n}\n\nconst { skills } = person;\nconst { front, back } = skills;\nconsole.log(front, back); // \"JavaScript\", \"Ruby\"\n```\n\n* 物件屬性名稱縮寫\n先看下方的例子：\n```js\nconst gameName = '動物森友會';\nconst gameType = '模擬遊戲';\nconst gamePrice = 1600;\n\nconst animalCrossing = {\n  gameName: gameName,\n  gameType: gameType,\n  gamePrice: gamePrice,\n}\n```\n\n如果物件內的屬性跟變數名稱一樣的話，那就可以這樣寫：\n```js\nconst animalCrossing = {\n  gameName,\n  gameType,\n  gamePrice,\n}\n\nconsole.log(animalCrossing);\n// 結果會是一樣的\n```","source":"_posts/destructuring-assignment-es6.md","raw":"---\ntitle: ES6 好用語法 - 解構賦值\ntags:\n  - ES6\n  - 解構賦值\n  - destructuring assignment\ndate: 2020-09-21 22:12:52\ncategories: ES6 好用語法\nkeywords:\n  - ES6\n  - 解構賦值\n  - destructuring assignment\ndecription: ES6 中好用語法，解構賦值的使用。\n---\n懶得定義一樣的值嗎？來試試複製大法吧～\n<!--more-->\n## 解構賦值 (Destructuring assignment)\n在 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) 中的介紹為 - **解構賦值**語法是一種 JavaScript 運算式，可以把陣列或物件中的資料解開擷取成為獨立變數。\n\n## 陣列解構\n一般如果想要把陣列中的資料給複製並建立一個新的變數的話，可能會這樣做：\n```js\nconst winter_is_comming = ['December', 'January', 'February'];\n\nconst winter_1st_month = winter_is_comming[0];\nconst winter_2nd_month = winter_is_comming[1];\nconst winter_3rd_month = winter_is_comming[2];\n```\n\n如果透過解構的話，作法有點像是把右邊的值給複製進去給左邊的變數一樣，可以這樣做：\n```js\nconst winter_is_comming = ['December', 'January', 'February'];\n\nconst [winter_1st_month, winter_2nd_month, winter_3rd_month] = winter_is_comming;\n```\n\n接著來練習一下：\n```js\n// 使用解構組合使 arr2 變成為 [1, 2, 3, 4, 5, 6] 的結果\nconst arr = [1, 2, 3];\nconst arr2 = [...arr, 4, 5, 6]; // arr2 = [1, 2, 3, 4, 5, 6]\n// ---------------------------------------------------------\n// 使用解構組合將以下兩個陣列為 [1, 2, 3, 4, 5, 6] 的結果\nconst nums1 = [1, 2, 3];\nconst nums2 = [4, 5, 6];\nconst nums3 = [...nums1, ...nums2]; // nums3 = [1, 2, 3, 4, 5, 6]\n// ---------------------------------------------------------\n// 使用解構組合將 a、b、c 三個變數的值分別設為 'angular', 'react', 'vue'\nconst jsFramwork = ['angular', 'react', 'vue'];\nconst [a, b, c] = jsFramwork; // a = 'angular'; b = 'react'; c = 'vue';\n// ---------------------------------------------------------\n// 請使用解構，將以下陣列分別取出為獨立變數 Hua, Xion, Ming, Mei\nconst people = ['小花', '大雄', '大明', '小美'];\nconst [Hua, Xion, Ming, Mei] = people;\nconsole.log(Hua, Xion, Ming, Mei);\n```\n\n\n## 物件解構\n物件的解構賦值用法也差不多，看下面例子：\n```js\n// 請使用解構，取出 name 及 age 的變數\nconst person = {\n  name: '小明',\n  age: 16\n}\nconst { name, age } = person;\nconsole.log(name, age);\n```\n\n使用的時機主要是在可能透過 api 抓取到資料的時候，如果想要拿到某些值來使用，就可以透過這個方法。\n\n### 進階使用方法\n\n* 取出物件中的物件\n如果想拿到物件中的物件的話，也是辦得到的，例如：\n```js\nconst person = {\n\tname: '小明',\n  age: 16,\n\tskills: {\n    front: 'JavaScript',\n    back: 'Ruby',\n\t},\n}\n\nconst { skills } = person;\nconst { front, back } = skills;\nconsole.log(front, back); // \"JavaScript\", \"Ruby\"\n```\n\n* 物件屬性名稱縮寫\n先看下方的例子：\n```js\nconst gameName = '動物森友會';\nconst gameType = '模擬遊戲';\nconst gamePrice = 1600;\n\nconst animalCrossing = {\n  gameName: gameName,\n  gameType: gameType,\n  gamePrice: gamePrice,\n}\n```\n\n如果物件內的屬性跟變數名稱一樣的話，那就可以這樣寫：\n```js\nconst animalCrossing = {\n  gameName,\n  gameType,\n  gamePrice,\n}\n\nconsole.log(animalCrossing);\n// 結果會是一樣的\n```","slug":"destructuring-assignment-es6","published":1,"updated":"2020-09-21T14:18:12.501Z","_id":"ckfcm5ckm0000tlu73lqd28tt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>懶得定義一樣的值嗎？來試試複製大法吧～</p>\n<a id=\"more\"></a>\n<h2 id=\"解構賦值-Destructuring-assignment\"><a href=\"#解構賦值-Destructuring-assignment\" class=\"headerlink\" title=\"解構賦值 (Destructuring assignment)\"></a>解構賦值 (Destructuring assignment)</h2><p>在 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">MDN</a> 中的介紹為 - <strong>解構賦值</strong>語法是一種 JavaScript 運算式，可以把陣列或物件中的資料解開擷取成為獨立變數。</p>\n<h2 id=\"陣列解構\"><a href=\"#陣列解構\" class=\"headerlink\" title=\"陣列解構\"></a>陣列解構</h2><p>一般如果想要把陣列中的資料給複製並建立一個新的變數的話，可能會這樣做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winter_is_comming = [<span class=\"string\">'December'</span>, <span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_1st_month = winter_is_comming[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_2nd_month = winter_is_comming[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_3rd_month = winter_is_comming[<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果透過解構的話，作法有點像是把右邊的值給複製進去給左邊的變數一樣，可以這樣做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winter_is_comming = [<span class=\"string\">'December'</span>, <span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [winter_1st_month, winter_2nd_month, winter_3rd_month] = winter_is_comming;</span><br></pre></td></tr></table></figure>\n\n<p>接著來練習一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用解構組合使 arr2 變成為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]; <span class=\"comment\">// arr2 = [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 使用解構組合將以下兩個陣列為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nums1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums3 = [...nums1, ...nums2]; <span class=\"comment\">// nums3 = [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 使用解構組合將 a、b、c 三個變數的值分別設為 'angular', 'react', 'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> jsFramwork = [<span class=\"string\">'angular'</span>, <span class=\"string\">'react'</span>, <span class=\"string\">'vue'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = jsFramwork; <span class=\"comment\">// a = 'angular'; b = 'react'; c = 'vue';</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 請使用解構，將以下陣列分別取出為獨立變數 Hua, Xion, Ming, Mei</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = [<span class=\"string\">'小花'</span>, <span class=\"string\">'大雄'</span>, <span class=\"string\">'大明'</span>, <span class=\"string\">'小美'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [Hua, Xion, Ming, Mei] = people;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Hua, Xion, Ming, Mei);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"物件解構\"><a href=\"#物件解構\" class=\"headerlink\" title=\"物件解構\"></a>物件解構</h2><p>物件的解構賦值用法也差不多，看下面例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 請使用解構，取出 name 及 age 的變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, age &#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age);</span><br></pre></td></tr></table></figure>\n\n<p>使用的時機主要是在可能透過 api 抓取到資料的時候，如果想要拿到某些值來使用，就可以透過這個方法。</p>\n<h3 id=\"進階使用方法\"><a href=\"#進階使用方法\" class=\"headerlink\" title=\"進階使用方法\"></a>進階使用方法</h3><ul>\n<li><p>取出物件中的物件<br>如果想拿到物件中的物件的話，也是辦得到的，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span>,</span><br><span class=\"line\">\tskills: &#123;</span><br><span class=\"line\">    front: <span class=\"string\">'JavaScript'</span>,</span><br><span class=\"line\">    back: <span class=\"string\">'Ruby'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; skills &#125; = person;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; front, back &#125; = skills;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(front, back); <span class=\"comment\">// \"JavaScript\", \"Ruby\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>物件屬性名稱縮寫<br>先看下方的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gameName = <span class=\"string\">'動物森友會'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gameType = <span class=\"string\">'模擬遊戲'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gamePrice = <span class=\"number\">1600</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animalCrossing = &#123;</span><br><span class=\"line\">  gameName: gameName,</span><br><span class=\"line\">  gameType: gameType,</span><br><span class=\"line\">  gamePrice: gamePrice,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果物件內的屬性跟變數名稱一樣的話，那就可以這樣寫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animalCrossing = &#123;</span><br><span class=\"line\">  gameName,</span><br><span class=\"line\">  gameType,</span><br><span class=\"line\">  gamePrice,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(animalCrossing);</span><br><span class=\"line\"><span class=\"comment\">// 結果會是一樣的</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>懶得定義一樣的值嗎？來試試複製大法吧～</p>","more":"<h2 id=\"解構賦值-Destructuring-assignment\"><a href=\"#解構賦值-Destructuring-assignment\" class=\"headerlink\" title=\"解構賦值 (Destructuring assignment)\"></a>解構賦值 (Destructuring assignment)</h2><p>在 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">MDN</a> 中的介紹為 - <strong>解構賦值</strong>語法是一種 JavaScript 運算式，可以把陣列或物件中的資料解開擷取成為獨立變數。</p>\n<h2 id=\"陣列解構\"><a href=\"#陣列解構\" class=\"headerlink\" title=\"陣列解構\"></a>陣列解構</h2><p>一般如果想要把陣列中的資料給複製並建立一個新的變數的話，可能會這樣做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winter_is_comming = [<span class=\"string\">'December'</span>, <span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_1st_month = winter_is_comming[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_2nd_month = winter_is_comming[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> winter_3rd_month = winter_is_comming[<span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果透過解構的話，作法有點像是把右邊的值給複製進去給左邊的變數一樣，可以這樣做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> winter_is_comming = [<span class=\"string\">'December'</span>, <span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [winter_1st_month, winter_2nd_month, winter_3rd_month] = winter_is_comming;</span><br></pre></td></tr></table></figure>\n\n<p>接著來練習一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用解構組合使 arr2 變成為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]; <span class=\"comment\">// arr2 = [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 使用解構組合將以下兩個陣列為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> nums1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> nums3 = [...nums1, ...nums2]; <span class=\"comment\">// nums3 = [1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 使用解構組合將 a、b、c 三個變數的值分別設為 'angular', 'react', 'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> jsFramwork = [<span class=\"string\">'angular'</span>, <span class=\"string\">'react'</span>, <span class=\"string\">'vue'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c] = jsFramwork; <span class=\"comment\">// a = 'angular'; b = 'react'; c = 'vue';</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 請使用解構，將以下陣列分別取出為獨立變數 Hua, Xion, Ming, Mei</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = [<span class=\"string\">'小花'</span>, <span class=\"string\">'大雄'</span>, <span class=\"string\">'大明'</span>, <span class=\"string\">'小美'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> [Hua, Xion, Ming, Mei] = people;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Hua, Xion, Ming, Mei);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"物件解構\"><a href=\"#物件解構\" class=\"headerlink\" title=\"物件解構\"></a>物件解構</h2><p>物件的解構賦值用法也差不多，看下面例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 請使用解構，取出 name 及 age 的變數</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; name, age &#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name, age);</span><br></pre></td></tr></table></figure>\n\n<p>使用的時機主要是在可能透過 api 抓取到資料的時候，如果想要拿到某些值來使用，就可以透過這個方法。</p>\n<h3 id=\"進階使用方法\"><a href=\"#進階使用方法\" class=\"headerlink\" title=\"進階使用方法\"></a>進階使用方法</h3><ul>\n<li><p>取出物件中的物件<br>如果想拿到物件中的物件的話，也是辦得到的，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">16</span>,</span><br><span class=\"line\">\tskills: &#123;</span><br><span class=\"line\">    front: <span class=\"string\">'JavaScript'</span>,</span><br><span class=\"line\">    back: <span class=\"string\">'Ruby'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; skills &#125; = person;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; front, back &#125; = skills;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(front, back); <span class=\"comment\">// \"JavaScript\", \"Ruby\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>物件屬性名稱縮寫<br>先看下方的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gameName = <span class=\"string\">'動物森友會'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gameType = <span class=\"string\">'模擬遊戲'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> gamePrice = <span class=\"number\">1600</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animalCrossing = &#123;</span><br><span class=\"line\">  gameName: gameName,</span><br><span class=\"line\">  gameType: gameType,</span><br><span class=\"line\">  gamePrice: gamePrice,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果物件內的屬性跟變數名稱一樣的話，那就可以這樣寫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animalCrossing = &#123;</span><br><span class=\"line\">  gameName,</span><br><span class=\"line\">  gameType,</span><br><span class=\"line\">  gamePrice,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(animalCrossing);</span><br><span class=\"line\"><span class=\"comment\">// 結果會是一樣的</span></span><br></pre></td></tr></table></figure>"},{"title":"SCSS import 切分檔案管理","date":"2020-09-22T14:40:59.000Z","keywords":["sass","scss","import"],"decription":"如何使用 import 來管理 SCSS 檔案。","_content":"在以往單純使用 CSS 的開發經驗中，總是會使用一支 CSS 檔案來設計所有的樣式，但是這樣的缺點是之後的維護相當困難，要找一個樣式的 code 可能要找很久。之前在寫 Vue 專案的時候，覺得元件式的管理很棒，所有元件分離讓之後的管理變得容易很多，現在才發現原來 SCSS 也可以做類似的事情，感覺好用很多啊～\n<!--more-->\n\n## 變數管理\n這個方法在我上次的專案中， 在我自定義 BootstrapVue 的顏色時有用到。而在 SCSS 中的作法也是差不多，假設目前有一支 .scss 檔案，已經有設定顏色的變數，想要讓變數分割成一支獨立的檔案來管理的話，做兩步驟就可以成功使用 import 來管理：\n\n1. 新增一支 `_variable.scss`，裡面放變數的設定。\n2. 在主要 .scss 檔中 import 檔案：`@import \"variable\";`\n\n```scss\n// all.scss\n@import \"variable\";\n\n.banner-title {\n    max-width: 460px;\n    background: lighten($danger, 20%);\n    color: $white;\n  }\n  .main-menu {\n    background: $danger;\n    overflow: hidden;\n    a:hover {\n      background: $danger;\n    }\n  }\n```\n\n```scss\n// _variable.scss\n$danger: #ff0000;\n$white: #fff;\n```\n\n## 分離式管理 SCSS\n前面提到將變數分開管理，那麼如果要將元件分得更細的話也可以，例如可以分成每一頁一個 .scss 檔，或是把 navbar 或是 footer 分開放，當然如果有使用 CSS Reset 的話，也是可以使用 import 管理，例如下方的例子：\n\n* 新增一個 `_header.scss`\n* 在 `all.scss` 中 `@import “header”`\n\n這樣子把 `all.scss` 當作一個管理其他元件的檔案，在維護管理上就更加的方便了。","source":"_posts/scss-import.md","raw":"---\ntitle: SCSS import 切分檔案管理\ntags:\n  - scss\n  - import\ndate: 2020-09-22 22:40:59\ncategories: SCSS 學習筆記\nkeywords:\n  - sass\n  - scss\n  - import\ndecription: 如何使用 import 來管理 SCSS 檔案。\n---\n在以往單純使用 CSS 的開發經驗中，總是會使用一支 CSS 檔案來設計所有的樣式，但是這樣的缺點是之後的維護相當困難，要找一個樣式的 code 可能要找很久。之前在寫 Vue 專案的時候，覺得元件式的管理很棒，所有元件分離讓之後的管理變得容易很多，現在才發現原來 SCSS 也可以做類似的事情，感覺好用很多啊～\n<!--more-->\n\n## 變數管理\n這個方法在我上次的專案中， 在我自定義 BootstrapVue 的顏色時有用到。而在 SCSS 中的作法也是差不多，假設目前有一支 .scss 檔案，已經有設定顏色的變數，想要讓變數分割成一支獨立的檔案來管理的話，做兩步驟就可以成功使用 import 來管理：\n\n1. 新增一支 `_variable.scss`，裡面放變數的設定。\n2. 在主要 .scss 檔中 import 檔案：`@import \"variable\";`\n\n```scss\n// all.scss\n@import \"variable\";\n\n.banner-title {\n    max-width: 460px;\n    background: lighten($danger, 20%);\n    color: $white;\n  }\n  .main-menu {\n    background: $danger;\n    overflow: hidden;\n    a:hover {\n      background: $danger;\n    }\n  }\n```\n\n```scss\n// _variable.scss\n$danger: #ff0000;\n$white: #fff;\n```\n\n## 分離式管理 SCSS\n前面提到將變數分開管理，那麼如果要將元件分得更細的話也可以，例如可以分成每一頁一個 .scss 檔，或是把 navbar 或是 footer 分開放，當然如果有使用 CSS Reset 的話，也是可以使用 import 管理，例如下方的例子：\n\n* 新增一個 `_header.scss`\n* 在 `all.scss` 中 `@import “header”`\n\n這樣子把 `all.scss` 當作一個管理其他元件的檔案，在維護管理上就更加的方便了。","slug":"scss-import","published":1,"updated":"2020-09-22T14:47:21.805Z","_id":"ckfe2muw700002gu7frr8ej1d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在以往單純使用 CSS 的開發經驗中，總是會使用一支 CSS 檔案來設計所有的樣式，但是這樣的缺點是之後的維護相當困難，要找一個樣式的 code 可能要找很久。之前在寫 Vue 專案的時候，覺得元件式的管理很棒，所有元件分離讓之後的管理變得容易很多，現在才發現原來 SCSS 也可以做類似的事情，感覺好用很多啊～</p>\n<a id=\"more\"></a>\n\n<h2 id=\"變數管理\"><a href=\"#變數管理\" class=\"headerlink\" title=\"變數管理\"></a>變數管理</h2><p>這個方法在我上次的專案中， 在我自定義 BootstrapVue 的顏色時有用到。而在 SCSS 中的作法也是差不多，假設目前有一支 .scss 檔案，已經有設定顏色的變數，想要讓變數分割成一支獨立的檔案來管理的話，做兩步驟就可以成功使用 import 來管理：</p>\n<ol>\n<li>新增一支 <code>_variable.scss</code>，裡面放變數的設定。</li>\n<li>在主要 .scss 檔中 import 檔案：<code>@import &quot;variable&quot;;</code></li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// all.scss</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"variable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.banner-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">460px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lighten(<span class=\"variable\">$danger</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$white</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.main-menu</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"variable\">$danger</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"variable\">$danger</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _variable.scss</span></span><br><span class=\"line\"><span class=\"variable\">$danger</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\"><span class=\"variable\">$white</span>: <span class=\"number\">#fff</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分離式管理-SCSS\"><a href=\"#分離式管理-SCSS\" class=\"headerlink\" title=\"分離式管理 SCSS\"></a>分離式管理 SCSS</h2><p>前面提到將變數分開管理，那麼如果要將元件分得更細的話也可以，例如可以分成每一頁一個 .scss 檔，或是把 navbar 或是 footer 分開放，當然如果有使用 CSS Reset 的話，也是可以使用 import 管理，例如下方的例子：</p>\n<ul>\n<li>新增一個 <code>_header.scss</code></li>\n<li>在 <code>all.scss</code> 中 <code>@import “header”</code></li>\n</ul>\n<p>這樣子把 <code>all.scss</code> 當作一個管理其他元件的檔案，在維護管理上就更加的方便了。</p>\n","site":{"data":{}},"excerpt":"<p>在以往單純使用 CSS 的開發經驗中，總是會使用一支 CSS 檔案來設計所有的樣式，但是這樣的缺點是之後的維護相當困難，要找一個樣式的 code 可能要找很久。之前在寫 Vue 專案的時候，覺得元件式的管理很棒，所有元件分離讓之後的管理變得容易很多，現在才發現原來 SCSS 也可以做類似的事情，感覺好用很多啊～</p>","more":"<h2 id=\"變數管理\"><a href=\"#變數管理\" class=\"headerlink\" title=\"變數管理\"></a>變數管理</h2><p>這個方法在我上次的專案中， 在我自定義 BootstrapVue 的顏色時有用到。而在 SCSS 中的作法也是差不多，假設目前有一支 .scss 檔案，已經有設定顏色的變數，想要讓變數分割成一支獨立的檔案來管理的話，做兩步驟就可以成功使用 import 來管理：</p>\n<ol>\n<li>新增一支 <code>_variable.scss</code>，裡面放變數的設定。</li>\n<li>在主要 .scss 檔中 import 檔案：<code>@import &quot;variable&quot;;</code></li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// all.scss</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"variable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.banner-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">460px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: lighten(<span class=\"variable\">$danger</span>, <span class=\"number\">20%</span>);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$white</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.main-menu</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"variable\">$danger</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: <span class=\"variable\">$danger</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _variable.scss</span></span><br><span class=\"line\"><span class=\"variable\">$danger</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\"><span class=\"variable\">$white</span>: <span class=\"number\">#fff</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分離式管理-SCSS\"><a href=\"#分離式管理-SCSS\" class=\"headerlink\" title=\"分離式管理 SCSS\"></a>分離式管理 SCSS</h2><p>前面提到將變數分開管理，那麼如果要將元件分得更細的話也可以，例如可以分成每一頁一個 .scss 檔，或是把 navbar 或是 footer 分開放，當然如果有使用 CSS Reset 的話，也是可以使用 import 管理，例如下方的例子：</p>\n<ul>\n<li>新增一個 <code>_header.scss</code></li>\n<li>在 <code>all.scss</code> 中 <code>@import “header”</code></li>\n</ul>\n<p>這樣子把 <code>all.scss</code> 當作一個管理其他元件的檔案，在維護管理上就更加的方便了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckbdizwxq0001b6u7gi6fdok7","category_id":"ckbdizwxz0005b6u7hz9ph0hr","_id":"ckbdizwy9000fb6u7eb0t354u"},{"post_id":"ckbdizwy7000db6u7dv6k7rj1","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwyg000lb6u74thk42rq"},{"post_id":"ckbdizwxw0003b6u7etph3h0e","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwyi000qb6u73795571q"},{"post_id":"ckbdizwy20007b6u7am81g095","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwyj000sb6u760ua4hak"},{"post_id":"ckbdizwyh000pb6u76tumgc0f","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwym000yb6u73iguat8e"},{"post_id":"ckbdizwy40009b6u75igcfywx","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyo0012b6u742ta8fzi"},{"post_id":"ckbdizwyi000rb6u727iofbbf","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyq0015b6u78h3lakdj"},{"post_id":"ckbdizwy5000ab6u728xcegjs","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyr0018b6u7540x1r7y"},{"post_id":"ckbdizwy8000eb6u73w850hoa","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyt001cb6u76drw4j9s"},{"post_id":"ckbdizwyr0017b6u7h1u5garj","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwyv001gb6u75zo14j42"},{"post_id":"ckbdizwyc000ib6u75cmkbtb4","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyw001jb6u7a8fw9nks"},{"post_id":"ckbdizwyt001db6u7h3sjecjd","category_id":"ckbdizwyg000nb6u7gdhz0098","_id":"ckbdizwyy001mb6u75gnsaiaf"},{"post_id":"ckbdizwye000kb6u71gj39imn","category_id":"ckbdizwys001bb6u7hkt58874","_id":"ckbdizwyz001pb6u7bdi99973"},{"post_id":"ckbdizwyx001lb6u7dd2pc4uq","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz1001vb6u700rl7at8"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz2001yb6u74qye4kug"},{"post_id":"ckbdizwyy001ob6u72j336o4h","category_id":"ckbdizwys001bb6u7hkt58874","_id":"ckbdizwz30020b6u7a75chcif"},{"post_id":"ckbdizwz0001sb6u70a7bh73l","category_id":"ckbdizwy6000bb6u73tjn524y","_id":"ckbdizwz40022b6u7hdecfrkb"},{"post_id":"ckbdizwyl000xb6u76ttb8x5i","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz40025b6u72zenddg7"},{"post_id":"ckbdizwyn0011b6u7dgve58lr","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz50028b6u7ffzh6tdj"},{"post_id":"ckbdizwyp0014b6u70c7d79jr","category_id":"ckbdizwz30021b6u7c3lm41dm","_id":"ckbdizwz6002cb6u7d2ndbm1v"},{"post_id":"ckbdizwys001ab6u78dcv2ubp","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz7002eb6u79x7seab1"},{"post_id":"ckbdizwyu001fb6u7ho639axr","category_id":"ckbdizwyv001hb6u7e08p4j9q","_id":"ckbdizwz7002ib6u79m5g5sj6"},{"post_id":"ckedtxyro000089u72b2e4cak","category_id":"ckedtxyse000189u7gq2yeqwd","_id":"ckedtxysv000489u79mwjegah"},{"post_id":"ckf9kpwi00000pju72bgh19ve","category_id":"ckf9kpwih0001pju71apte8do","_id":"ckf9kpwiu0004pju7611z47ut"},{"post_id":"ckfb2ttrx00008mu7fqok4y4j","category_id":"ckfb2ttsn00018mu72tgz95n1","_id":"ckfb2ttsy00048mu71xdef2ki"},{"post_id":"ckfcm5ckm0000tlu73lqd28tt","category_id":"ckf9kpwih0001pju71apte8do","_id":"ckfcm5cla0002tlu7hugpckmx"},{"post_id":"ckfe2muw700002gu7frr8ej1d","category_id":"ckfb2ttsn00018mu72tgz95n1","_id":"ckfe2muws00022gu71wiva2ra"}],"PostTag":[{"post_id":"ckbdizwxq0001b6u7gi6fdok7","tag_id":"ckbdizwy10006b6u7dzgz43dv","_id":"ckbdizwye000jb6u7gnhwehwf"},{"post_id":"ckbdizwxq0001b6u7gi6fdok7","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwyg000mb6u7fowx97tl"},{"post_id":"ckbdizwxw0003b6u7etph3h0e","tag_id":"ckbdizwy9000hb6u7drkv2jkz","_id":"ckbdizwyl000wb6u7b5a82u6f"},{"post_id":"ckbdizwxw0003b6u7etph3h0e","tag_id":"ckbdizwyg000ob6u79aw15kaj","_id":"ckbdizwyn0010b6u7gx6d1tmm"},{"post_id":"ckbdizwy20007b6u7am81g095","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwyy001nb6u710y4e60s"},{"post_id":"ckbdizwy20007b6u7am81g095","tag_id":"ckbdizwyo0013b6u7hq6m7o83","_id":"ckbdizwyz001rb6u700zh5z1s"},{"post_id":"ckbdizwy20007b6u7am81g095","tag_id":"ckbdizwyr0019b6u7bv8n6wpy","_id":"ckbdizwz1001ub6u73asbehvt"},{"post_id":"ckbdizwy20007b6u7am81g095","tag_id":"ckbdizwyu001eb6u7eoze6tq2","_id":"ckbdizwz2001xb6u739uz4qy2"},{"post_id":"ckbdizwy40009b6u75igcfywx","tag_id":"ckbdizwyx001kb6u70xzdbxbs","_id":"ckbdizwz40024b6u76fo45f56"},{"post_id":"ckbdizwy40009b6u75igcfywx","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwz50027b6u72mrx5zei"},{"post_id":"ckbdizwy40009b6u75igcfywx","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwz5002ab6u74a1o0n41"},{"post_id":"ckbdizwy5000ab6u728xcegjs","tag_id":"ckbdizwz40023b6u7032t31g5","_id":"ckbdizwz7002fb6u7ajpb3jii"},{"post_id":"ckbdizwy5000ab6u728xcegjs","tag_id":"ckbdizwz50029b6u78w8y6isp","_id":"ckbdizwz7002gb6u7dv7u6zbz"},{"post_id":"ckbdizwy7000db6u7dv6k7rj1","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwz9002kb6u7actrd2es"},{"post_id":"ckbdizwy7000db6u7dv6k7rj1","tag_id":"ckbdizwz7002hb6u791s5d2mi","_id":"ckbdizwz9002lb6u77eub1ksh"},{"post_id":"ckbdizwy8000eb6u73w850hoa","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwz9002nb6u75mkp80yv"},{"post_id":"ckbdizwyc000ib6u75cmkbtb4","tag_id":"ckbdizwz7002hb6u791s5d2mi","_id":"ckbdizwzc002rb6u78d6fdf27"},{"post_id":"ckbdizwyc000ib6u75cmkbtb4","tag_id":"ckbdizwza002ob6u7dxgu5mrb","_id":"ckbdizwzc002sb6u7b16a8vj4"},{"post_id":"ckbdizwyc000ib6u75cmkbtb4","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzc002ub6u7czrxhr2x"},{"post_id":"ckbdizwyc000ib6u75cmkbtb4","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwzc002vb6u7e6p82myw"},{"post_id":"ckbdizwye000kb6u71gj39imn","tag_id":"ckbdizwzb002qb6u737694d98","_id":"ckbdizwzd002xb6u796vk8bwb"},{"post_id":"ckbdizwye000kb6u71gj39imn","tag_id":"ckbdizwzc002tb6u7d6025x1u","_id":"ckbdizwze002yb6u78qfy8sog"},{"post_id":"ckbdizwyh000pb6u76tumgc0f","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzf0031b6u7cfx2adww"},{"post_id":"ckbdizwyh000pb6u76tumgc0f","tag_id":"ckbdizwze002zb6u7f35be7y8","_id":"ckbdizwzf0032b6u72i0vd1y9"},{"post_id":"ckbdizwyi000rb6u727iofbbf","tag_id":"ckbdizwze0030b6u7f23z8v5g","_id":"ckbdizwzg0035b6u71daxf1d7"},{"post_id":"ckbdizwyi000rb6u727iofbbf","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzg0036b6u7g5zx6pus"},{"post_id":"ckbdizwyi000rb6u727iofbbf","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwzg0038b6u7a0z8egzd"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzl003cb6u733keeiwh"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","tag_id":"ckbdizwzg0037b6u78n8lb30m","_id":"ckbdizwzl003db6u7cpf0d8g0"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwzm003fb6u72lgz1kba"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","tag_id":"ckbdizwzh0039b6u7cu0gfkgc","_id":"ckbdizwzm003gb6u7amdhghn7"},{"post_id":"ckbdizwyk000vb6u7bv3n1gn4","tag_id":"ckbdizwzk003ab6u77najh3bf","_id":"ckbdizwzm003ib6u7e5doh295"},{"post_id":"ckbdizwyl000xb6u76ttb8x5i","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzn003kb6u740cxh5gy"},{"post_id":"ckbdizwyl000xb6u76ttb8x5i","tag_id":"ckbdizwzl003eb6u74cz70teo","_id":"ckbdizwzn003lb6u7djizabjc"},{"post_id":"ckbdizwyl000xb6u76ttb8x5i","tag_id":"ckbdizwzm003hb6u7g3tzcccq","_id":"ckbdizwzn003nb6u778fb71xx"},{"post_id":"ckbdizwyl000xb6u76ttb8x5i","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwzo003ob6u731vv5bz2"},{"post_id":"ckbdizwyn0011b6u7dgve58lr","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzo003qb6u7c7isaozi"},{"post_id":"ckbdizwyn0011b6u7dgve58lr","tag_id":"ckbdizwzn003mb6u79wn6b5b7","_id":"ckbdizwzo003rb6u7c102hc48"},{"post_id":"ckbdizwyn0011b6u7dgve58lr","tag_id":"ckbdizwy6000cb6u7cob321mo","_id":"ckbdizwzp003tb6u7crzffqgj"},{"post_id":"ckbdizwyp0014b6u70c7d79jr","tag_id":"ckbdizwzo003pb6u76600cdzn","_id":"ckbdizwzq003vb6u78nzyd7kh"},{"post_id":"ckbdizwyp0014b6u70c7d79jr","tag_id":"ckbdizwzp003sb6u723st5jby","_id":"ckbdizwzq003wb6u7ebtx6v4s"},{"post_id":"ckbdizwyr0017b6u7h1u5garj","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzr003zb6u75ez4ee7c"},{"post_id":"ckbdizwyr0017b6u7h1u5garj","tag_id":"ckbdizwzp003ub6u79dri4ti2","_id":"ckbdizwzr0040b6u7g9l84hq5"},{"post_id":"ckbdizwyr0017b6u7h1u5garj","tag_id":"ckbdizwzq003xb6u7at2o70m2","_id":"ckbdizwzt0042b6u73p92edkl"},{"post_id":"ckbdizwys001ab6u78dcv2ubp","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzu0043b6u7dd0xgayi"},{"post_id":"ckbdizwys001ab6u78dcv2ubp","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzv0045b6u75dni6a4i"},{"post_id":"ckbdizwyt001db6u7h3sjecjd","tag_id":"ckbdizwzr0041b6u7g3tr28jl","_id":"ckbdizwzw0047b6u71te08vfe"},{"post_id":"ckbdizwyt001db6u7h3sjecjd","tag_id":"ckbdizwzu0044b6u71as469au","_id":"ckbdizwzw0048b6u7czdthini"},{"post_id":"ckbdizwyu001fb6u7ho639axr","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzx004ab6u753dm96dh"},{"post_id":"ckbdizwyu001fb6u7ho639axr","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzx004bb6u737gs3efm"},{"post_id":"ckbdizwyx001lb6u7dd2pc4uq","tag_id":"ckbdizwzf0034b6u75hxw9xcd","_id":"ckbdizwzy004db6u7hcul2lcb"},{"post_id":"ckbdizwyx001lb6u7dd2pc4uq","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizwzy004eb6u74y371izp"},{"post_id":"ckbdizwyy001ob6u72j336o4h","tag_id":"ckbdizwzx004cb6u7g5p56zox","_id":"ckbdizx00004ib6u78ih28cpj"},{"post_id":"ckbdizwyy001ob6u72j336o4h","tag_id":"ckbdizwzy004fb6u79h6l8p4s","_id":"ckbdizx01004jb6u77lpnfzzj"},{"post_id":"ckbdizwyy001ob6u72j336o4h","tag_id":"ckbdizwzz004gb6u72ien1a2s","_id":"ckbdizx01004kb6u74fpvefvs"},{"post_id":"ckbdizwz0001sb6u70a7bh73l","tag_id":"ckbdizwyj000ub6u795qxaep6","_id":"ckbdizx01004lb6u70pw90zsl"},{"post_id":"ckbdizwz0001sb6u70a7bh73l","tag_id":"ckbdizwzz004hb6u7dsfnafvd","_id":"ckbdizx01004mb6u75s1eds0w"},{"post_id":"ckedtxyro000089u72b2e4cak","tag_id":"ckedtxyss000289u7fyb917zf","_id":"ckedtxysv000389u7htxhcr4s"},{"post_id":"ckf9kpwi00000pju72bgh19ve","tag_id":"ckf9kpwip0002pju763naex17","_id":"ckf9kpwiw0006pju7gkftake5"},{"post_id":"ckf9kpwi00000pju72bgh19ve","tag_id":"ckf9kpwis0003pju75kke9y3h","_id":"ckf9kpwiw0007pju73et64dhk"},{"post_id":"ckf9kpwi00000pju72bgh19ve","tag_id":"ckf9kpwiu0005pju73g80gxs5","_id":"ckf9kpwix0008pju78biw0c1w"},{"post_id":"ckfb2ttrx00008mu7fqok4y4j","tag_id":"ckfb2ttsv00028mu75bpu7a0t","_id":"ckfb2ttt000068mu76k604nt8"},{"post_id":"ckfb2ttrx00008mu7fqok4y4j","tag_id":"ckfb2ttsx00038mu7b0s8ho8z","_id":"ckfb2ttt000078mu727eybuxe"},{"post_id":"ckfb2ttrx00008mu7fqok4y4j","tag_id":"ckfb2ttsy00058mu7hso10rn5","_id":"ckfb2ttt000088mu74f7fbj29"},{"post_id":"ckfcm5ckm0000tlu73lqd28tt","tag_id":"ckf9kpwip0002pju763naex17","_id":"ckfcm5clc0004tlu70zo017wk"},{"post_id":"ckfcm5ckm0000tlu73lqd28tt","tag_id":"ckfcm5ckx0001tlu71plbatqy","_id":"ckfcm5clc0005tlu7037qdlwm"},{"post_id":"ckfcm5ckm0000tlu73lqd28tt","tag_id":"ckfcm5clb0003tlu79nc219bx","_id":"ckfcm5clc0006tlu72sq7910x"},{"post_id":"ckfe2muw700002gu7frr8ej1d","tag_id":"ckfb2ttsx00038mu7b0s8ho8z","_id":"ckfe2muwu00032gu766161gfd"},{"post_id":"ckfe2muw700002gu7frr8ej1d","tag_id":"ckfe2muwi00012gu7f35w5xzn","_id":"ckfe2muwu00042gu727tk8vkw"}],"Tag":[{"name":"codewar","_id":"ckbdizwy10006b6u7dzgz43dv"},{"name":"w3HexSchool","_id":"ckbdizwy6000cb6u7cob321mo"},{"name":"JavaScript","_id":"ckbdizwy9000hb6u7drkv2jkz"},{"name":"undefined","_id":"ckbdizwyg000ob6u79aw15kaj"},{"name":"javascript","_id":"ckbdizwyj000ub6u795qxaep6"},{"name":"語法解析器","_id":"ckbdizwyo0013b6u7hq6m7o83"},{"name":"詞彙環境","_id":"ckbdizwyr0019b6u7bv8n6wpy"},{"name":"執行環境","_id":"ckbdizwyu001eb6u7eoze6tq2"},{"name":"迴圈","_id":"ckbdizwyx001kb6u70xzdbxbs"},{"name":"function","_id":"ckbdizwz40023b6u7032t31g5"},{"name":"匿名函式","_id":"ckbdizwz50029b6u78w8y6isp"},{"name":"物件","_id":"ckbdizwz7002hb6u791s5d2mi"},{"name":"陣列","_id":"ckbdizwza002ob6u7dxgu5mrb"},{"name":"先別急著寫 leetcode","_id":"ckbdizwzb002qb6u737694d98"},{"name":"pseudo code","_id":"ckbdizwzc002tb6u7d6025x1u"},{"name":"程式執行","_id":"ckbdizwze002zb6u7f35be7y8"},{"name":"DOM","_id":"ckbdizwze0030b6u7f23z8v5g"},{"name":"vue","_id":"ckbdizwzf0034b6u75hxw9xcd"},{"name":"component","_id":"ckbdizwzg0037b6u78n8lb30m"},{"name":"prop","_id":"ckbdizwzh0039b6u7cu0gfkgc"},{"name":"x-template","_id":"ckbdizwzk003ab6u77najh3bf"},{"name":"vue cli","_id":"ckbdizwzl003eb6u74cz70teo"},{"name":"node.js","_id":"ckbdizwzm003hb6u7g3tzcccq"},{"name":"todolist","_id":"ckbdizwzn003mb6u79wn6b5b7"},{"name":"hexo","_id":"ckbdizwzo003pb6u76600cdzn"},{"name":"next","_id":"ckbdizwzp003sb6u723st5jby"},{"name":"全域環境","_id":"ckbdizwzp003ub6u79dri4ti2"},{"name":"全域物件","_id":"ckbdizwzq003xb6u7at2o70m2"},{"name":"全域變數","_id":"ckbdizwzr0041b6u7g3tr28jl"},{"name":"區域變數","_id":"ckbdizwzu0044b6u71as469au"},{"name":"印出 1-100 的奇數","_id":"ckbdizwzx004cb6u7g5p56zox"},{"name":"fizz buzz","_id":"ckbdizwzy004fb6u79h6l8p4s"},{"name":"找最小值","_id":"ckbdizwzz004gb6u72ien1a2s"},{"name":"hoisting","_id":"ckbdizwzz004hb6u7dsfnafvd"},{"name":"es6","_id":"ckbdj1adi004ob6u75b5bap32"},{"name":"JavaScript 作品實戰班筆記","_id":"ckcm5psb300020vu77mof35ux"},{"name":"JavaScript 作品實戰班","_id":"ckedtxyss000289u7fyb917zf"},{"name":"ES6","_id":"ckf9kpwip0002pju763naex17"},{"name":"箭頭函式","_id":"ckf9kpwis0003pju75kke9y3h"},{"name":"arrow function","_id":"ckf9kpwiu0005pju73g80gxs5"},{"name":"sass","_id":"ckfb2ttsv00028mu75bpu7a0t"},{"name":"scss","_id":"ckfb2ttsx00038mu7b0s8ho8z"},{"name":"variable","_id":"ckfb2ttsy00058mu7hso10rn5"},{"name":"解構賦值","_id":"ckfcm5ckx0001tlu71plbatqy"},{"name":"destructuring assignment","_id":"ckfcm5clb0003tlu79nc219bx"},{"name":"import","_id":"ckfe2muwi00012gu7f35w5xzn"}]}}